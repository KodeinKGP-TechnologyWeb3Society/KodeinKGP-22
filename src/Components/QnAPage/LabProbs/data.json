{
    "initialBasics": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question":"Compute the angles in degree of a triangle given its coordinates of its three vertices (to be read).\nThe angles formed at vertices should be printed in the same order of the vertices describing the triangle.\r\nInput data set (coordinates of three vertices of a triangle)\r\n\r\n(i) (10,5), (-5,3), (2,2)\r\n(ii) (1,2), (5,5), (7,6.5)\r\n(iii) (0,0,), (5,0), (2.5, 5)\r\n",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    \/\/ points are (x1,y1),(x2,y2),(x3,y3)\r\n    double x1, x2, x3;\r\n    double y1, y2, y3;\r\n    scanf(\"%lf%lf%lf%lf%lf%lf\",&x1,&y1,&x2,&y2,&x3,&y3);\r\n\r\n    double m1, m2;\r\n    m1 =(y2-y1)\/(x2-x1);\r\n    m2 =(y3-y2)\/(x3-x2);\r\n\r\n    \/\/condition of collinearity; if the three points lie on a straight line\r\n\r\n    if(m1==m2){\r\n        printf(\"Triangle coud not be formed; the points are collinear\\n\\n\\n\");\r\n        return 0;\r\n    }\r\n\r\n    double a, b, c;\r\n    \/\/length of the side opposite to pint (x1,y1) is a\r\n    \/\/length of the side opposite to pint (x2,y2) is b\r\n    \/\/length of the side opposite to pint (x3,y3) is c\r\n\r\n    a=sqrt( (x3-x2)*(x3-x2)+(y3-y2)*(y3-y2));\r\n    b=sqrt( (x1-x3)*(x1-x3)+(y1-y3)*(y1-y3));\r\n    c=sqrt( (x2-x1)*(x2-x1)+(y2-y1)*(y2-y1));\r\n\r\n\r\n    double A, B, C;  \/\/ angle of the triangle are A, B, c\r\n    A =acos((b*b+c*c-a*a)\/(2*b*c));\r\n    B =acos((a*a+c*c-b*b)\/(2*a*c));\r\n    C =acos((a*a+b*b-c*c)\/(2*a*b));\r\n\r\n    \/\/ Angles A, B, and C calculated are in radians\r\n    \/\/ 1 radian =57.295779 degrees\r\n\r\n    const double degree= 57.295779;\r\n\r\n    printf(\"%lf degrees\\n\",A*degree);\r\n    printf(\"%lf degrees\\n\",B*degree);\r\n    printf(\"%lf degrees\\n\\n\\n\",C*degree);\r\n\r\n    return 0;\r\n\r\n}\r\n"
                },
                {
                    "Question":"Compute the equivalent energy in Joule of a mass M (to be read) in gram (gm) using Einstein\u2019s mass energy equation.\r\nInput data set:\r\n(i) M=2\r\n(ii) M= 4.56\r\n",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n    double M;\r\n    scanf(\"%lf\",&M);\r\n    const long double c=3*100000000;\r\n    \/\/ c= speed of light; c=3*10^8m\/sec\r\n    double Energy;\r\n    M=M*0.001;\r\n    \/\/E=Mc^2\r\n    Energy=M*c*c;\r\n    printf(\"energy= %lf\\n\",Energy);\r\n}\r\n"
                },
                {
                    "Question": "Read two degree 2 polynomials f and g of the form:\r\nf(x) = a0 + a1x + a2x^2\r\ng(x) = b0 + b1x + b2x^2,\r\nwhere all the coefficients are integer modulo prime p = 59. Add f(x) and g(x) to compute another degree two polynomial h(x).\nPrint f(x), g(x) and h(x) using coefficient representation.\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    \/\/ PART1: Take input for f(x) and g(x) and add f(x) and g(x) to compute another degree two polynomial h(x).\r\n    \r\n    \/\/ Input for f(x)\r\n    int a, b, c, d, e, f, p = 59;\r\n    printf(\"Give coefficients for f(x)\\n\");\r\n    printf(\"constant term = \");\r\n    scanf(\"%d\", &a);\r\n    printf(\"coeff of x = \");\r\n    scanf(\"%d\", &b);\r\n    printf(\"coeff of x^2 = \");\r\n    scanf(\"%d\", &c);\r\n    int a0 = a%p, a1 = b%p, a2 = c%p;\r\n    \/\/ Input for g(x)\r\n    printf(\"Give coefficients for g(x)\\n\");\r\n    printf(\"constant term = \");\r\n    scanf(\"%d\", &d);\r\n    printf(\"coeff of x = \");\r\n    scanf(\"%d\", &e);\r\n    printf(\"coeff of x^2 = \");\r\n    scanf(\"%d\", &f);\r\n    int b0 = d%p, b1 = e%p, b2 = f%p;\r\n    \/\/ Adding f(x) and g(x)\r\n    int c0, c1, c2;\r\n    c0 = (a0 + b0)%p, c1 = (a1 + b1)%p, c2 = (a2 + b2)%p;\r\n    \/\/ Printing f(x), h(x) and g(x)\r\n    printf(\"Printing the functions\\n\");\r\n    printf(\"f(x) = %d + %d(x) + %d(x^2)\\n\", a0, a1, a2);\r\n    printf(\"g(x) = %d + %d(x) + %d(x^2)\\n\", b0, b1, b2);\r\n    printf(\"h(x) = %d + %d(x) + %d(x^2)\\n\", c0, c1, c2);\r\n}\r\n"
                },
                {
                    "Question": "Consider the polynomials f(x) and g(x) from the first part of the assignment.\nRead 3 unique integers modulo p and evaluate f(x) and g(x) on those points. \nIf 3 integers are not unique print an error message and exit.\nLet {\u03B11, \u03B12, \u03B13} are those points, then the evaluation should give us {f(\u03B11), f(\u03B12), f(\u03B13)} and {g(\u03B11), g(\u03B12), g(\u03B13)}.\nAdd them point-wise to obtain:\r\n{f(\u03B11) + g(\u03B11), f(\u03B12) + g(\u03B12), f(\u03B13) + g(\u03B13)}.\r\n\r\nDefine polynomial m(x) in the point-value representation as:\r\n{{\u03B11, m(\u03B11)}, {\u03B12, m(\u03B12)}, {\u03B13, m(\u03B13)}}\r\n:= {{\u03B11, f(\u03B11) + g(\u03B11)}, {\u03B12, f(\u03B12) + g(\u03B12)}, {\u03B13, f(\u03B13) + g(\u03B13)}}.\r\n\r\nPrint f(x), g(x) and m(x) using point-value representation.\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n    \/\/ Input of points\r\n    int p1, p2, p3;\r\n    printf(\"\\nEnter three points:\\n\");\r\n    printf(\"s1 = \");\r\n    scanf(\"%d\", &p1);\r\n    printf(\"\\nEnter three points:\\n\");\r\n    printf(\"s2 = \");\r\n    scanf(\"%d\", &p2);\r\n    printf(\"\\nEnter three points:\\n\");\r\n    printf(\"s3 = \");\r\n    scanf(\"%d\", &p3);\r\n    int s1 = p1%p, s2 = p2%p, s3 = p3%p;\r\n    \/\/ Evaluating values\r\n    int x;\r\n    x = s1;\r\n    int fs1 = (a0) + (a1*x) + (a2*x*x);\r\n    x = s2;\r\n    int fs2 = (a0) + (a1*x) + (a2*x*x);\r\n    x = s3;\r\n    int fs3 = (a0) + (a1*x) + (a2*x*x);\r\n\r\n    x = s1;\r\n    int gs1 = (b0) + (b1*x) + (b2*x*x);\r\n    x = s2;\r\n    int gs2 = (b0) + (b1*x) + (b2*x*x);\r\n    x = s3;\r\n    int gs3 = (b0) + (b1*x) + (b2*x*x);\r\n\r\n    int ms1 = (fs1 + gs1)%p;\r\n    int ms2 = (fs2 + gs2)%p;\r\n    int ms3 = (fs3 + gs3)%p;\r\n\r\n    printf(\"Point-value represntations\\n\");\r\n    printf(\"{{s1, f(s1)}, {s2, f(s2)}, {s3, f(s3)}}: {{%d, %d}, {%d, %d}, {%d, %d}}\\n\", s1, fs1, s2, fs2, s3, fs3);\r\n    printf(\"{{s1, g(s1)}, {s2, g(s2)}, {s3, g(s3)}}: {{%d, %d}, {%d, %d}, {%d, %d}}\\n\", s1, gs1, s2, gs2, s3, gs3);\r\n    printf(\"{{s1, m(s1)}, {s2, m(s2)}, {s3, m(s3)}}: {{%d, %d}, {%d, %d}, {%d, %d}}\\n\", s1, ms1, s2, ms2, s3, ms3);\r\n    }\r\n"
                },
                {
                    "Question": "Here we will check equivalence between coefficient representation and point-value representation of a polynomial.\nConsider {{\u03B11, m(\u03B11)}, {\u03B12, m(\u03B12)}, {\u03B13, m(\u03B13)}} from the second part of the assignment.\nCompute the polynomial m(x) in coefficient representation from the point-value representation\n(Use the Lagrange interpolation for this purpose).\nPrint m(x) and h(x) in coefficient representation to check whether they are equivalent. If they are not equivalent print an error mes-\r\nsage.\r\nLagrange Interpolation: Consider a degree two polynomial f(x). Let {{\u03B11, f(\u03B11)}, {\u03B12, f(\u03B12)}, {\u03B13, f(\u03B13)}}\r\nbe one point value representation of f(x). Then we can write f(x) as:\r\nf(x) = f(\u03B11) \u00B7[(x \u2212 \u03B12)(x \u2212 \u03B13)]\/[(\u03B11 \u2212 \u03B12)(\u03B11 \u2212 \u03B13)]+ f(\u03B12) \u00B7[(x \u2212 \u03B11)(x \u2212 \u03B13)]\/[(\u03B12 \u2212 \u03B11)(\u03B12 \u2212 \u03B13)] + f(\u03B13) \u00B7[(x \u2212 \u03B11)(x \u2212 \u03B12)]\/[(\u03B13 \u2212 \u03B11)(\u03B13 \u2212 \u03B12)]\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n    int m0, m1, m2;\r\n    int den;\r\n\r\n    printf(\"Enter the integral value of modulo inverse[(data*inverse)%%p = 1: this inverse] of (s1-s2)(s2 - s3)(s1 - s3): \");\r\n    \r\n    scanf(\"%d\", &den);\r\n\r\n    m0 = (p + (((ms1*(s2 - s3)*s2*s3 - ms2*(s1 - s3)*s1*s3 + ms3*(s1 - s2)*s1*s2)%p)*(den))%p)%p;\r\n    m1 = (p + (((- ms1*(s2 - s3)*(s2 + s3) + ms2*(s1 - s3)*(s1 + s3) - ms3*(s1 - s2)*(s1 + s2)))%p*(den))%p)%p;\r\n    m2 = (p + (((ms1*(s2 - s3) - ms2*(s1 - s3) + ms3*(s1 - s2))%p)*(den))%p)%p;\r\n\r\n\r\n    printf(\"m(x) = %d + %d(x) + %d(x^2)\\n\", m0, m1, m2);\r\n    printf(\"h(x) = %d + %d(x) + %d(x^2)\\n\", c0, c1, c2);\r\n\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question":"Read three numbers and return sum of their first and second maximum.\r\nInput data set\r\n(i) 4.8, -3.0, 2.9\r\n(ii) 7.8, 81.0, -4.0\r\n(iii) 4.0, 5.0, 6.0\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n    double a, b, c;\r\n    scanf(\"%lf%lf%lf\",&a,&b,&c);\r\n    double total, sum;\r\n    total = a+b+c;\r\n    double min=a;\r\n    if(a>b){\r\n        min=b;\r\n        if(b>c)\r\n            min=c;\r\n    }\r\n    else if(a>c){\r\n        min=c;\r\n    }\r\n    sum=total-min;\r\n    printf(\"sum: %lf\\n\",sum);\r\n\r\n}\r\n"
                },
                
                {
                    "Question": "Read the side of a square (an integer value) and print the area of the largest circle enclosed inside the square. The area will be a real number.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    int side;\r\n    float pi=3.14;\r\n    float area;\r\n    printf(\"Enter side of square : \");\r\n    scanf(\"%d\",&side);\r\n    area = pi*((side*side)\/4.0);\r\n    printf(\"Area of largest circle inside square of side length %d is : %f\",side,area);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read a single input as character.\r\n    a. Then check if the input is a numeral or character\r\n    b. In case of character report whether it is upper case or lower case\r\n    c. If it is lowercase then report if it is vowel or constant\r\nUse switch case to perform above-mentioned conditional operations.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    char a;\r\n    printf(\"Enter any character :\");\r\n    scanf(\"%c\",&a);\r\n    switch(a)\r\n    {\r\n        case '0' ... '9':\r\n            {\r\n                printf(\"Numeral\");\r\n                break;\r\n            }\r\n        case 'A' ... 'Z':\r\n            {\r\n                printf(\"Uppercase character\");\r\n                break;\r\n            }\r\n        case 'a' ... 'z':\r\n            {\r\n                if(a=='a'||a=='e'||a=='i'||a=='o'||a=='u')\r\n                    printf(\"Vowel lowercase\");\r\n                else\r\n                    printf(\"Consonant lowercase\");\r\n                break;\r\n            }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read the date of birth of a person as a\nsix digit integer with the format mmyyyy.\nAssume the user entered a valid date. Write a C program that can compute the age as of today (042022).\nMention month and the year.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    int dob,diffm,diffyr;\r\n    int year;\r\n    int month;\r\n    printf(\"Enter date as mmyyyy :\");\r\n    scanf(\"%d\",&dob);\r\n    int thismonth=04;\r\n    int thisyear=2022;\r\n    year=(dob%10000);\r\n    month=(dob\/10000);\r\n    if(thismonth>=month)\r\n    {\r\n        diffm=thismonth-month;\r\n        diffyr=thisyear-year;\r\n    }\r\n    else\r\n    {\r\n        diffm=(12-month)+thismonth;\r\n        diffyr=thisyear-year-1;\r\n    }\r\n    printf(\"Age of person is %d years and %d months\",diffyr,diffm);\r\n    return 0;\r\n}"
                },
                {
                    "Question" : "Submit one (single) C program.\r\n    Write a C program to perform the following tasks. \r\n    1. Take as input the first 2 digits of your roll number. Let this number be a. \r\n    2. Next, take as input the next 2 characters of your roll number. \r\n    3. Then take as input the last 5 digits of your roll number. Let this number be b. \r\n    4. Print \"Hello\" followed by your full roll number. Eg. Hello 21CS10001. \r\n    5. Compute y = 1.234x105 +7.5x10-\u00B3 + b. \r\n    6. Print y. \r\n    7. Compute z = a+++ -b + b-. \r\n    8. Print a,b,z at the end of the computations. \r\n\r\n\r\nYou may need to use math library function :\n#include imath.h \nIf you want to compile useing the terminal then use the command \ngcc.\/program.c-Im Proper commenting, indentation and output commands carry marks.",
                    "Answer" : "#include <stdio.h>\r\n#include <math.h>\r\nint main() {\r\n    int a,b;\r\n    long double y;\r\n    int z;\r\n    char c[3];\r\n    printf(\"Input first 2 digits : \");\r\n    scanf(\"%d\",&a);\/\/input first 2 digits\r\n    printf(\"Input next 2 characters :\");\r\n    scanf(\"%s\",c);\/\/input 2 character\r\n    printf(\"Input last 5 digits: \");\r\n    scanf(\"%d\",&b);\/\/input last 5 digits\r\n    printf(\"Hello %d%s%d\\n\",a,c,b);\/\/ output 1\r\n\r\n\r\n    y=1.234*(pow(10,5))+ 7.5*(pow(10,-3))+b;\/\/ the y function\r\n    printf(\"y=%Lf\\n\",y);\/\/printing y\r\n    z=(a++)+(--b)+(b--);\/\/ the z function\r\n    printf(\"z=%d\\n\",z);\/\/printing z\r\n    printf(\"a=%d, b=%d,z=%d\",a,b,z);\/\/ printing a,b and z as final output\r\n    return 0;\r\n}"
                },
                {
                    "Question" : "1. Write a C program which takes as input the coordinates of the vertices of a triangle and does the following :\r\n    a. Print the area of the triangle \r\n    b. Print whether the triangle is acute, obtuse or right angle \r\n    c. Check whether the triangle is equilateral or isosceles and if so print the type \r\n\r\n2. Write a C program to assign the students to breakout rooms based on their roll numbers.\nRead n Roll nos and print the assignment of each them to rooms. Use switch statement. \r\n    a. If the student roll no ends in 0 or 1, assign the student to ERoom \r\n    b. If the student roll no ends in 2 or 3, assign the student to Droom \r\n    c. If the student roll no ends in 4 or 5, assign the student to TRoom \r\n    d. If the student roll no ends in 6 or 7, assign the student to Croom \r\n    e. If the student roll no ends in 8 or 9, assign the student to PRoom.",
                    "Answer" : "1.\r\n\r\n#include <stdio.h>\r\n#include <math.h>\r\nint main() {\r\n    \/\/ DEFINING VARIABLES\r\n    float x1,x2,x3,y1,y2,y3;\r\n    float s1,s2,s3,a,x,y,z;\r\n    \/\/ TAKING INPUT AS COORDINATES\r\n    printf(\"Input coordinate 1 : \");\r\n    scanf(\"%f %f\",&x1,&y1);\r\n\r\n    printf(\"Input coordinate 2 : \");\r\n    scanf(\"%f %f\",&x2,&y2);\r\n\r\n    printf(\"Input coordinate 3 : \");\r\n    scanf(\"%f %f\",&x3,&y3);\r\n    a=(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))\/2;\r\n    if(a<0){\r\n    printf(\"Area is %f\\n\",a*(-1));}\r\n    else\r\n    {\r\n        printf(\"Area is %f\\n\",a);\r\n    }\r\n    \/\/ CALCULATING SIDE LENGTHS\r\n    s1=sqrt(((x2-x1)*(x2-x1))+ ((y2-y1)*(y2-y1)));\r\n    s2=sqrt(((x3-x2)*(x3-x2))+ ((y3-y2)*(y3-y2)));\r\n    s3=sqrt(((x3-x1)*(x3-x1))+ ((y3-y1)*(y3-y1)));\r\n    \/\/CHECKING IF A TRIANGLE IS VALID OR NOT\r\n    if (s1==0 || s2==0 || s3==0 || a==0)\r\n    {\r\n        printf(\"It is not a valid triangle\");\r\n    }\r\n    else{\r\n        \/\/ EQUILATERAL \/ ISOSCELES\/ SCALENE CHECK\r\n    if(s1==s2 && s2==s3)\r\n    {\r\n        printf(\"Equilateral Triangle\\n\");\r\n    }\r\n    else if(s1==s2 || s2==s3 || s3==s1)\r\n    {\r\n        printf(\"Isosceles Triangles\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Scalene Triangle\\n\");\r\n    }\r\n    \/\/ ACUTE \/ OBTUSE\/ RIGHT ANGLE CHECK\r\n    x = ((x2-x1)*(x2-x1))+ ((y2-y1)*(y2-y1));\r\n    y = ((x3-x2)*(x3-x2))+ ((y3-y2)*(y3-y2));\r\n    z = ((x3-x1)*(x3-x1))+ ((y3-y1)*(y3-y1));\r\n    if(s1>s2 && s1>s3) \/\/ LARGEST IS S1\r\n    {\r\n        if(x == y + z)\r\n            printf( \" Triangle is Right-angled\");\r\n        else if(x < y + z)\r\n            printf( \"Triangle is acute-angled\");\r\n        else\r\n            printf (\"Triangle is obtuse-angled\");\r\n\r\n    }\r\n\r\n    else if(s2>s1 && s2>s3) \/\/ LARGEST IS S2\r\n    {\r\n        if(y == x + z)\r\n            printf( \"Triangle is right-angled\");\r\n        else if(y < x + z)\r\n            printf (\"Triangle is  acute-angled\");\r\n        else\r\n            printf(\"Triangle is obtuse-angled\");\r\n    }\r\n    else \/\/LARGEST IS S3\r\n    {\r\n        if(z == x + y)\r\n            printf( \"Triangle is right-angled\");\r\n        else if(z < x + y)\r\n            printf(\"Triangle is acute-angled\");\r\n        else\r\n            printf(\"Triangle is obtuse-angled\");\r\n    }}\r\n\r\n}\r\n\r\n2.\r\n\r\n#include <stdio.h>\r\n\r\nint main() {\r\n\/\/ DEFINE VARIABLES\r\n    int i, n;\r\n    int roll;\r\n    \/\/ NUMBER OF STUDENTS\r\n    printf(\"Enter Number of Students :\");\r\n    scanf(\"%d\", &n);\r\n\r\n    for (i = 1; i <= n; i++) {\r\n        printf(\"enter a roll number:\");\r\n        scanf(\"%d\", &roll);\r\n        int last = roll % 10;\/\/ TO FIND LAST DIGIT OF ROLL NUMBER\r\n        \/\/USING SWITCH TO FIND ROOM ALLOTED\r\n        switch (last) {\r\n            case 0: {\r\n                printf(\"ERoom\\n\");\r\n               continue;\r\n            }\r\n            case 1: {\r\n                printf(\"ERoom\\n\");\r\n                continue;\r\n            }\r\n\r\n            case 2: {\r\n                printf(\"DRoom\\n\");\r\n                continue;\r\n            }\r\n            case 3: {\r\n                printf(\"DRoom\\n\");\r\n                continue;\r\n            }\r\n            case 4: {\r\n                printf(\"TRoom\\n\");\r\n                continue;\r\n            }\r\n            case 5: {\r\n                printf(\"TRoom\\n\");\r\n                continue;\r\n            }\r\n            case 6: {\r\n                printf(\"CRoom\\n\");\r\n                continue;\r\n            }\r\n            case 7: {\r\n                printf(\"CRoom\\n\");\r\n                continue;\r\n            }\r\n            case 8 : {\r\n                printf(\"PRoom\\n\");\r\n                continue;\r\n\r\n            }\r\n            case 9: {\r\n                printf(\"PRoom\\n\");\r\n         continue;\r\n            }\r\n        }\r\n        return 0;\r\n    }\r\n}" 
                    
                },
                {
                    "Question":"Write a C program that prints your name and roll number in two consecutive lines.",
                    "Answer":"#include <stdio.h>\r\n\r\nint main(){\r\n  printf(\"Name: Aritra Basu\\nRoll number: 17AG21015\\n\\n\");\r\n  return 0;\r\n}\r\n" 
                },
                {
                    "Question":"Write a C program that takes as input two integers a and b from the keyboard, computes a\/b\r\nand prints its value on the terminal.\r\n\uE00C The value of a\/b should be correct up to 6th decimal place.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int i;\r\n  float a, b, x;\r\n\r\n  \/\/Bullet 1\r\n\r\n  printf(\"Enter a: \");\r\n  scanf(\"%f\",&a);\r\n\r\n  \/\/Bullet 2\r\n  \r\n  printf(\"a=%0.4f\\n\", a);\r\n  b=a;\r\n\r\n  \/\/The next 4 lines raise b to its 16th power\r\n\r\n  b=b*b;\r\n  b=b*b;\r\n  b=b*b;\r\n  b=b*b;\r\n\r\n  \/\/Bullet 3\r\n\r\n  x=(1-b)\/(1-a);\r\n  printf(\"p(a)=%0.4f\\n\",x);\r\n\r\n  \/\/Bullet 4\r\n\r\n  x=(1-b)\/((1-a)*(1-a)) - 16*b\/(1-a);\r\n  printf(\"q(a)=%0.4f\\n\",x);\r\n  \r\n  \/\/Bullet 5\r\n\r\n  x=1\/(1-a);\r\n  printf(\"r(a)=%0.4f\\n\",x);\r\n  return 0;\r\n}"
                   
                },
                {
                    "Question":"Write a program that takes as input the value of a floating-point variable, say x , calculates the\r\nvalue of the expression 1+x+x^2 , and prints the result on the terminal correct up to 10th\r\ndecimal place.\r\n\uE00C Assume that the value of x is positive and less than 1.\r\n\uE00C You cannot use math library.",
                    "Answer":"#include <stdio.h>\r\n\r\nint main(){\r\n  float x, y;\r\n  \r\n  printf(\"Enter x: \");\r\n  scanf(\"%f\", &x);\r\n  \r\n  y = 1 + x + x*x; \r\n  \r\n  printf(\"Answer = %12.10f\\n\", y); \r\n    \r\n  return 0;\r\n}\r\n"
                },
                {
                    "Question":"Write a C program that prints the following two patterns (a triangle and a Swastika) on the\r\nconsole. Your printed patterns should be exactly as the sample output. However, your number\r\nof newlines between the triangle and Swastika may differ from ours.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n\/\/Triangle\r\n\r\nprintf(\"    *    \\n   * *   \\n  *   *  \\n *     * \\n*********\\n\\n\\n\");\r\n\r\n\/\/Swastika\r\n\r\nprintf(\"**   *******\\n**   *******\\n**   **\\n**   **\\n************\\n************\\n     **   **\\n     **   **\\n     **   **\\n*******   **\\n*******   **\");\r\n\r\nreturn 0;\r\n\r\n}"
                },
                {
                    "Question":"User supplies a positive integer having value at most 9999. Your program should shift its\r\ndigits cyclically towards right, one digit at a time, and print the results on the terminal. This\r\nshould continue 4 times. The program should treat the input as a 4-digit number, by adding 0\r\nto its left if needed. The numbers printed should be right-justified. You should use as few\r\nvariables as possible.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int a;\r\n  printf(\"Enter a positive integer: \");\r\n  scanf(\"%d\",&a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  a=(a%10)*1000+(a\/10);\r\n  printf(\"%4d\\n\",a);\r\n  return 0;\r\n}"
                },
                {
                    "Question":"Write a C program that does the following:\r\n\r\n\uE00C The program first takes in a 7- or 8-digit positive integer as input (that\u2019s ensured)\r\nthrough the keyboard that is to be interpreted as a date in dd-mm-yyyy format.\r\nExample: 22112001 stands for November 22, 2001 and 3011987 stands for January 3,\r\n1987. Note that the last 4 digits correspond to year, the next 2 digits correspond to\r\nmonth, and the next 1 or 2 digits correspond to day. Make sure that you use an integer\r\ntype that can accommodate any 8-digit integer. You may use the sizeof( ) function to\r\nfind out the sizes of various data types in your system.\r\n\uE00C Prints the numbers in the day, month, and year fields, each in a new line. [2]\r\n\uE00C If the year is before 2021 or after 2099, then the program prints an appropriate\r\nmessage and terminates. [1]\r\n\uE00C If the input integer does not correspond to any valid date (for example, 99092022,\r\n31062078, 29022023), then the program prints an explanatory error message and\r\nterminates. If there are multiple explanations of invalidity (for example, both day and\r\nmonth are out of their respective ranges), any one explanation can be printed. [2]\r\n\uE00C If the input integer corresponds to a valid date, and the year is between 2021 and 2099\r\n(both inclusive) then the program prints the month and the day (both in words) in a\r\nnew line. [1+4]\r\nYou may use the fact that January 1, 2021 is a Friday.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int date, month, year, isvalid=1, offset=0;\r\n\r\n  \/\/Bullet 1\r\n  \r\n  printf(\"Enter date: \");\r\n  scanf(\"%d\",&date);\r\n \r\n\/*In my system, size of int is 4 bytes. This is enough to hold any 8 digit integer.\r\n  If size of int is smaller in your system (eg. 2 bytes), you may need to use long int or long long int. *\/\r\n\r\n  year=date%10000;\r\n  date\/=10000;\r\n  month=date%100;\r\n  date\/=100;\r\n\r\n\/* Note that the variable date holds the value of day at this point. *\/\r\n\r\n  \/\/Bullet 2\r\n\r\n  printf(\"Day: %d\\nMonth: %d\\nYear: %d\\n\", date, month, year);\r\n\r\n  \/\/Bullet 3\r\n\r\n  if(year<2021)\r\n  {\r\n    printf(\"Before 2021\\n\");\r\n    return 0;\r\n  }\r\n  if(year>2099)\r\n  {\r\n    printf(\"After 2099\\n\");\r\n    return 0;\r\n  }\r\n\r\n  \/\/Bullet 4\r\n \r\n  if(month<1 || month>12)\r\n  {\r\n    printf(\"Month out of range.\\n\");\r\n    return 0;\r\n  }\r\n  if(date<1 || date > 31)\r\n  {\r\n    printf(\"Day out of range.\\n\");\r\n    return 0;\r\n  }\r\n  switch(month)\r\n  {\r\n    case 2: if(date>28+(!(year%4))) isvalid=0; break;\r\n    case 4: \r\n    case 6:\r\n    case 9:\r\n    case 11: if(date>30) isvalid=0;\r\n  }\r\n  if(!isvalid)\r\n  {\r\n    printf(\"Day out of range.\\n\");\r\n    return 0;\r\n  }\r\n\r\n  \/\/Bullet 5 \r\n\r\n  offset=(year-2021)*365+(year-2021)\/4;\r\n\r\n  switch(month)\r\n  {\r\n    case 12: offset+=30; \/\/Adding number of days in November. Similarly for other cases.\r\n    case 11: offset+=31;\r\n    case 10: offset+=30;\r\n    case 9: offset+=31;\r\n    case 8: offset+=31;\r\n    case 7: offset+=30;\r\n    case 6: offset+=31;\r\n    case 5: offset+=30;\r\n    case 4: offset+=31;\r\n    case 3: offset+=28+(!(year%4));\r\n    case 2: offset+=31;\r\n  }\r\n  \r\n  offset+=date-1;\r\n\r\n  switch(offset%7)\r\n  {\r\n    case 0: printf(\"It's a Friday of \"); break;\r\n    case 1: printf(\"It's a Saturday of \"); break;\r\n    case 2: printf(\"It's a Sunday of \"); break;\r\n    case 3: printf(\"It's a Monday of \"); break;\r\n    case 4: printf(\"It's a Tuesday of \"); break;\r\n    case 5: printf(\"It's a Wednesday of \"); break;\r\n    case 6: printf(\"It's a Thursday of \"); break;\r\n  }\r\n  \r\n  switch(month)\r\n  {\r\n    case 1: printf(\"January.\\n\"); break;\r\n    case 2: printf(\"February.\\n\"); break;\r\n    case 3: printf(\"March.\\n\"); break;\r\n    case 4: printf(\"April.\\n\"); break;\r\n    case 5: printf(\"May.\\n\"); break;\r\n    case 6: printf(\"June.\\n\"); break;\r\n    case 7: printf(\"July.\\n\"); break;\r\n    case 8: printf(\"August.\\n\"); break;\r\n    case 9: printf(\"September.\\n\"); break;\r\n    case 10: printf(\"October.\\n\"); break;\r\n    case 11: printf(\"November.\\n\"); break;\r\n    case 12: printf(\"December.\\n\"); break;\r\n  }\r\n\r\n   \r\n  return 0;\r\n}"
                },
                {
                    "Question":"Write a program that manages transactions in a snacks bar. The program should do the following:\r\n\r\n\uE00C The program first displays a header line:\r\nFollowing are 12 items and their rates (INR):\r\nThen it skips a line and prints a menu on the console, as shown below. [3]\r\n\uE00C Next, the program skips a line and prints:\r\nEnter the Serial Number (SN) of item and the quantity you want:\r\nThe user will enter two valid integers in response, the first being the SN and the second its\r\nquantity. [1]\r\n\uE00C After the user\u2019s input, the program displays the item name and the quantity requested. After\r\nthat, it computes the payable amount and displays the calculation. The basic price is the rate of\r\nthe item times the quantity. The tax is 12.5% of the basic price. The payable amount is the sum\r\nof the basic price and the tax, rounded to its nearest integer (e.g., 10.49 is rounded to 10, while\r\n10.50 or 10.60 is rounded to 11). Finally, the program prints a greeting. [6]\r\nEverything printed should exactly match the output given below, including alignments, justifications,\r\nprecision of the fractions, the horizontal lines, the greeting, etc. You may assume that the total amount\r\n(before rounding) is less than INR 9999.50.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int sn, q;\r\n  float basic_price, price;\r\n  printf(\"Following are 12 items and their rates (INR):\\n\\n\");\r\n  printf(\"SN      ITEM                 RATE\\n\");\r\n  printf(\"--      ----                 ----\\n\\n\");\r\n  printf(\"01:     BUTTER COOKIES       25\\n\");\r\n  printf(\"02:     CASHEW COOKIES       30\\n\");\r\n  printf(\"03:     CREAM CAKE           22\\n\");\r\n  printf(\"04:     LEMON JUICE          35\\n\");\r\n  printf(\"05:     VEG CASHEW CAKE      18\\n\");\r\n  printf(\"06:     MANGO JUICE          78\\n\");\r\n  printf(\"07:     COOKIES (PLAIN)      15\\n\");\r\n  printf(\"08:     ORANGE JUICE         73\\n\");\r\n  printf(\"09:     MILK BISCUITS        12\\n\");\r\n  printf(\"10:     PLAIN VEG CAKE       20\\n\");\r\n  printf(\"11:     BUTTER FRUIT CAKE    25\\n\");\r\n  printf(\"12:     PINEAPPLE JUICE      65\\n\\n\");\r\n  printf(\"Enter the Serial Number (SN) of item and the quantity you want: \");\r\n  scanf(\"%d%d\",&sn,&q);\r\n  printf(\"Your item is \");\r\n  switch(sn)\r\n  {\r\n    case 1: printf(\"BUTTER COOKIES x\"); basic_price=25.0; break;\r\n    case 2: printf(\"CASHEW COOKIES x\"); basic_price=30.0; break;\r\n    case 3: printf(\"CREAM CAKE x\"); basic_price=22.0; break;\r\n    case 4: printf(\"LEMON JUICE x\"); basic_price=35.0; break;\r\n    case 5: printf(\"VEG CASHEW CAKE x\"); basic_price=18.0; break;\r\n    case 6: printf(\"MANGO JUICE x\"); basic_price=78.0; break;\r\n    case 7: printf(\"COOKIES (PLAIN) x\"); basic_price=15.0; break;\r\n    case 8: printf(\"ORANGE JUICE x\"); basic_price=73.0; break;\r\n    case 9: printf(\"MILK BISCUITS x\"); basic_price=12.0; break;\r\n    case 10: printf(\"PLAIN VEG CAKE x\"); basic_price=20.0; break;\r\n    case 11: printf(\"BUTTER FRUIT CAKE x\"); basic_price=25.0; break;\r\n    case 12: printf(\"PINEAPPLE JUICE x\"); basic_price=65.0;\r\n  }\r\n  printf(\" %d\\n\", q);\r\n  printf(\"Basic price = Rs. %7.2f\\n\", basic_price*q);\r\n  printf(\"Tax @12.5%%  = Rs. %7.2f\\n\", basic_price*q*0.125);\r\n  printf(\"Total price = Rs. %7.2f\\n\", price=basic_price*q*1.125);\r\n\r\n  \/* We may have used basic_price itself in place of price. \r\n     However, in the interest of readability we preferred that \r\n     the variable basic_price be reserved for holding the basic price. *\/\r\n\r\n  printf(\"=========================\\n\");\r\n  printf(\"To pay      = Rs. %4d.00\", (int)(price+0.50));\r\n  printf(\"\\n=========================\");\r\n  printf(\"\\nThank you!\\nPlease visit us again.\\n\");\r\n  return 0;\r\n}"
                },
                {
                    "Question":" Assume that a class has 5 students. Read the Roll number (integer) and Marks out of (100) for the 5 students and display the data nicely formatted." ,
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n    int r1,r2,r3,r4,r5;\r\n    int s11,s21,s31,s41,s51;\r\n    int s12,s22,s32,s42,s52;\r\n    int s13,s23,s33,s43,s53;\r\n    int s14,s24,s34,s44,s54;\r\n    int s15,s25,s35,s45,s55;\r\n    printf(\"enter the roll no of student 1\\n\");\r\n    scanf(\"%d\\n\", &r1);\r\n    printf(\"enter the roll no of student 2\\n\");\r\n    scanf(\"%d\\n\", &r2);\r\n    printf(\"enter the roll no of student 3\\n\");\r\n    scanf(\"%d\\n\", &r3);\r\n    printf(\"enter the roll no of student 4\\n\");\r\n    scanf(\"%d\\n\", &r4);\r\n    printf(\"enter the roll no of student 5\\n\");\r\n    scanf(\"%d\\n\", &r5);\r\n    printf(\"enter the marks of student1 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s11);\r\n    printf(\"enter the marks of student1 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s21);\r\n    printf(\"enter the marks of student1 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s31);\r\n    printf(\"enter the marks of student1 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s41);\r\n    printf(\"enter the marks of student1 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s51);\r\n    printf(\"enter the marks of student2 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s12);\r\n    printf(\"enter the marks of student2 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s22);\r\n    printf(\"enter the marks of student2 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s32);\r\n    printf(\"enter the marks of student2 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s42);\r\n    printf(\"enter the marks of student2 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s52);\r\n    printf(\"enter the marks of student3 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s13);\r\n    printf(\"enter the marks of student3 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s23);\r\n    printf(\"enter the marks of student3 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s33);\r\n    printf(\"enter the marks of student3 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s43);\r\n    printf(\"enter the marks of student3 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s53);\r\n    printf(\"enter the marks of student4 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s14);\r\n    printf(\"enter the marks of student4 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s24);\r\n    printf(\"enter the marks of student4 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s34);\r\n    printf(\"enter the marks of student4 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s44);\r\n    printf(\"enter the marks of student4 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s54);\r\n    printf(\"enter the marks of student5 in sub1(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s15);\r\n    printf(\"enter the marks of student5 in sub2(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s25);\r\n    printf(\"enter the marks of student5 in sub3(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s35);\r\n    printf(\"enter the marks of student5 in sub4(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s45);\r\n    printf(\"enter the marks of student5 in sub5(out of 100)\\n\");\r\n    scanf(\"%d\\n\", &s55);\r\n    printf(\"the tabulated form is____\\n\");\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r1,s11,s21,s31,s41,s51);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r2,s12,s22,s32,s42,s52);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r3,s13,s23,s33,s43,s53);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r4,s14,s24,s34,s44,s54);\r\n    printf(\"%6d%3d%3d%3d%3d%3d\\n\", r5,s15,s25,s35,s45,s55);\r\n    return 0;\r\n\r\n}"
                },
                {
                    "Question":"Assume that you are going to deposit a certain amount of money in bank fixed deposit.\r\nWnte a C program to read two integers a and b representing the amount being deposited\r\nand the period of deposit in years, respectively. Also, read a floating point number r\r\nindicating the yearly interest rate in percentage. Compute and display the total amount\r\npayable at the end of the deposit period assuming (a) Simple interest rate computed at\r\nthe end of the complete deposit period and (6) Yearly compound interest computation.",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    int a,b;\r\n    float r,si,ci;\r\n    printf(\"enter the principal amt.\\n\");\r\n    scanf(\"%d\", &a);\r\n    printf(\"enter the period of deposit in yrs\\n\");\r\n    scanf(\"%d\", &b);\r\n    printf(\"enter the interest rate in percentage\\n\");\r\n    scanf(\"%f\", &r);\r\n    si=(a*b*r)\/100.0;\r\n    ci= (pow((1+(0.01*r)),b)*a) - a;\r\n    printf(\"the simple interest is %f and compound interest is %f\", si,ci);\r\n    return 0;\r\n\r\n\r\n}" 
                },
                {
                    "Question":"Write a C program that reads two triplets of floating point numbers al,bl,rl and a2,b2,r2\r\ndenoting the centers and radii of two circles. Here, al1,bl are the x.y coordinates of the center\r\nof the first circle with radius rl. Similarly, a2,b2 are the x,y coordinates of the center of the\r\nsecond circle with radius r2. Determine the distance between the centers of the two circles.\r\nDisplay your answer as a floating point number",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    float a1,b1,r1;\r\n    float a2,b2,r2,d;\r\n    printf(\"enter x co-ordinate of 1st circle\\n\");\r\n    scanf(\"%f\", &a1);\r\n    printf(\"\\nenter y co-ordinate of 1st circle\\n\");\r\n    scanf(\"%f\", &b1);\r\n    printf(\"\\nenter radius of 1st circle\\n\");\r\n    scanf(\"%f\", &r1);\r\n    printf(\"\\nenter x co-ordinate of 2nd circle\\n\");\r\n    scanf(\"%f\", &a2);\r\n    printf(\"\\nenter y co-ordinate of 2nd circle\\n\");\r\n    scanf(\"%f\", &b2);\r\n    printf(\"\\nenter radius of 2nd circle\\n\");\r\n    scanf(\"%f\", &r2);\r\n    d = sqrt(pow(a1 - a2 ,2) + pow(b1 - b2 ,2));\r\n    printf(\"\\nthe distance between two centers of circle is %f\", d);\r\n    return 0;\r\n\r\n}\r\n"
                },
                {
                    "Question":"In this probiem, you will compute the derivative of a degree polynomial of a single\r\nvariable. Assume that its coefficients are positive integers. Read 6 cocfficients as inputs\r\nfrom the keyboard. Display the polynomial, and then compute and display the derivative\r\npolynomial. A sample input and output below; stick to the format shown below.\r\nEnter coefficient of x0: 5\r\nEnter coefficient of x^1: 2\r\nEnter coefficient of x^2:2\r\nEnter coefficient of x^3:7\r\nEnter coefficient of x^4:0\r\nEnter coefficient of x^5:3\r\nPolynomial: 3x^5 +0*x^4+7*x^3-2*x^2+ 2*x +5\r\nDerivative: 15*1^4 + 0\"1*3+ 21*1^2-4*x +2",
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n    int c0,c1,c2,c3,c4,c5;\r\n    printf(\"enter the coefficient of x^0\\n\");\r\n    scanf(\"%d\", &c0);\r\n    printf(\"enter the coefficient of x^1\\n\");\r\n    scanf(\"%d\", &c1);\r\n    printf(\"enter the coefficient of x^2\\n\");\r\n    scanf(\"%d\", &c2);\r\n    printf(\"enter the coefficient of x^3\\n\");\r\n    scanf(\"%d\", &c3);\r\n    printf(\"enter the coefficient of x^4\\n\");\r\n    scanf(\"%d\", &c4);\r\n    printf(\"enter the coefficient of x^5\\n\");\r\n    scanf(\"%d\", &c5);\r\n    printf(\"the polynomial is__%dx^5 + %dx^4 + %dx^3 + %dx^2 + %dx + %d\", c5,c4,c3,c2,c1,c0);\r\n    printf(\"\\nthe deriative is__\\n \");\r\n    printf(\"%dx^4 + %dx^3 + %dx^2 + %dx + %d\", 5*c5, 4*c4, 3*c3, 2*c2, c1);\r\n    return 0;\r\n\r\n}" 
                },
                {
                    "Question":"1. A circle (in the two-dimensional real plane) is defined in terms of three real numbers a, b and c. The\r\ndefining equation is of the form: x +y+ ax + by+c=0. Input three real numbers a, b, c from the user\r\nand display the three numbers. [1]\r\na. Determine if these three read numbers (a, b,c ) definea circle. If not, display the message: \"The\r\nthree numbers do not define a circle\" and quit. [3]\r\nb. If the read a,b,c values define a valid circle, then determine and display the center and radius of the\r\ncircle. [3]\r\nc. Read from keyboard the coordinates of a point. Display whether this point lies on, inside or outside\r\nthe circle. [3]",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main()\r\n{\r\nint a, b, c, x, y;\r\nfloat d, e;\r\nprintf(\"The general eqn of circle is x^2 + y^2 + ax + by + c =0\\nEnter the values of a,b and c respectively..\\n\");\r\nscanf(\"%d%d%d\", &a, &b, &c);\r\nprintf(\"The eqn of your circle is \\n x^2 + y^2 + %dx + %dy + %d =0.\\n\", a, b, c);\r\nd = a * a \/ 4 + b * b \/ 4 - c;\r\nif (d < 0)\r\n{\r\nprintf(\"The three numberss do not define a circle.\\n\");\r\n}\r\nelse\r\n{\r\nprintf(\"The centre of the circle is (%d ,%d).\\n\", -a \/ 2, -b \/ 2);\r\nprintf(\"The radius of the circle is %f.\\n\", sqrt(d));\r\n}\r\nprintf(\"enter the x and y coordinates of your point respectively.\\n\");\r\nscanf(\"%d%d\", &x, &y);\r\ne = (pow((x + a \/ 2), 2) + pow((y + b \/ 2), 2));\r\nif (e > d)\r\n{\r\nprintf(\"The point lies outside the circle.\\n\");\r\n}\r\nelse if (e == d)\r\n{\r\nprintf(\"The point lies on the circle.\\n\");\r\n}\r\n\r\nelse\r\n{\r\nprintf(\"the point lies inside the circle.\\n\");\r\n}\r\n\r\nreturn 0;\r\n}" 
                },
                {
                    "Question":"2. Write a program to do the following:\r\na. Read the roll number (integer) of a student and the letter grades (E,A,B,C,D,P, and F) in three\r\nsubjects, the subject numbers, and the corresponding credits. If a user enters any letter other\r\nthan the letters corresponding to valid grades, your program should exit after displaying the\r\nmessage \"Cannot handle invalid grade!\". [Hint: exit from a program can be achieved by writing\r\n\"return 0\" as the body of the if statement checking whether the entered letter corresponds to\r\na valid grade.] Display the Roll number of the student and the subject numbers and the\r\ncorresponding grades nicely formatted.\r\nb. Compute and display the GPA (Grade Point Average). Assume E grade=10points, A grade=9\r\npoints, B grade = 8 points, C grade=7 points, D grade=6 points, P grade=5 points, F grade=0\r\npoints.\r\n",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\nint r, s1, s2, s3, c1, c2, c3;\r\nint p1, p2, p3;\r\nchar g1, g2, g3;\r\nfloat gpa;\r\nprintf(\"Enter the Roll No.__\\n \");\r\nscanf(\"%d\", &r);\r\nprintf(\"enter the subject no. of S1\\n\");\r\nscanf(\"%d\", &s1);\r\nprintf(\"Enter the credits in in S1\\n\");\r\nscanf(\"%d\", &c1);\r\nprintf(\"Enter the grades(in upper case only)\\n\");\r\nscanf(\" %c\", &g1);\r\nif (g1 != 'E' && g1 != 'A' && g1 != 'B' && g1 != 'C' && g1 != 'D' && g1 != 'P' && g1 != 'F')\r\n{\r\nprintf(\"Cannot handle invalid grade!!\");\r\nreturn 0;\r\n}\r\n\r\nprintf(\"enter the subject no. of S2\\n\");\r\nscanf(\"%d\", &s2);\r\nprintf(\"Enter the credits in in S2\\n\");\r\nscanf(\"%d\", &c2);\r\nprintf(\"Enter the grades(in upper case only)\\n\");\r\nscanf(\" %c\", &g2);\r\nif (g2 != 'E' && g2 != 'A' && g2 != 'B' && g2 != 'C' && g2 != 'D' && g2 != 'P' && g2 != 'F')\r\n{\r\nprintf(\"Cannot handle invalid grade!!\");\r\nreturn 0;\r\n}\r\nprintf(\"enter the subject no. of S3\\n\");\r\nscanf(\"%d\", &s3);\r\nprintf(\"Enter the credits in in S3\\n\");\r\nscanf(\"%d\", &c3);\r\nprintf(\"Enter the grades(in upper case only)\\n\");\r\nscanf(\" %c\", &g3);\r\nif (g3 != 'E' && g3 != 'A' && g3 != 'B' && g3 != 'C' && g3 != 'D' && g3 != 'P' && g3 != 'F')\r\n{\r\nprintf(\"Cannot handle invalid grade!!\");\r\nreturn 0;\r\n}\r\nprintf(\"*****\\nRoll No. -- %d\\n*****\\n\", r);\r\nprintf(\"\\nSubject No.       Credits     Grades\\n\");\r\nprintf(\"%d                    %d           %c\\n\", s1, c1, g1);\r\nprintf(\"%d                    %d           %c\\n\", s2, c2, g2);\r\nprintf(\"%d                    %d           %c\\n\", s3, c3, g3);\r\n\r\nif (g1 == 'E')\r\n{\r\np1 = 10;\r\n}\r\nelse if (g1 == 'A')\r\n{\r\np1 = 9;\r\n}\r\nelse if (g1 == 'B')\r\n{\r\np1 = 8;\r\n}\r\nelse if (g1 == 'C')\r\n{\r\np1 = 7;\r\n}\r\nelse if (g1 == 'D')\r\n{\r\np1 = 6;\r\n}\r\nelse if (g1 == 'P')\r\n{\r\np1 = 5;\r\n}\r\nelse if (g1 == 'F')\r\n{\r\np1 = 0;\r\n}\r\nif (g2 == 'E')\r\n{\r\np2 = 10;\r\n}\r\nelse if (g2 == 'A')\r\n{\r\np2 = 9;\r\n}\r\nelse if (g2 == 'B')\r\n{\r\np2 = 8;\r\n}\r\nelse if (g2 == 'C')\r\n{\r\np2 = 7;\r\n}\r\nelse if (g2 == 'D')\r\n{\r\np2 = 6;\r\n}\r\nelse if (g2 == 'P')\r\n{\r\np2 = 5;\r\n}\r\nelse if (g2 == 'F')\r\n{\r\np2 = 0;\r\n}\r\nif (g3 == 'E')\r\n{\r\np3 = 10;\r\n}\r\nelse if (g3 == 'A')\r\n{\r\np3 = 9;\r\n}\r\nelse if (g3 == 'B')\r\n{\r\np3 = 8;\r\n}\r\nelse if (g3 == 'C')\r\n{\r\np3 = 7;\r\n}\r\nelse if (g3 == 'D')\r\n{\r\np3 = 6;\r\n}\r\nelse if (g3 == 'P')\r\n{\r\np3 = 5;\r\n}\r\nelse if (g3 == 'F')\r\n{\r\np3 = 0;\r\n}\r\ngpa = (p1 * c1 + p2 * c2 + p3 * c3) \/ (c1 + c2 + c3);\r\nprintf(\"\\n***********\\nThe GPA is %f.\\n**********\\n\", gpa);\r\nreturn 0;\r\n}"
                },
                {
                    "Question":" Write a program that takes an integer number between 1 and 100 as input, and then displays the value\r\nof the input in words. Some sample inputs and outputs are:\r\nInput: 13\r\nOutput: Thirteen\r\nInput: 56\r\nOutput: Fifty six\r\nOutput: Ninety eight\r\nNote that, a brute force method is to write 100 if-else statements. But, this will fetch you only 75% marks.\r\nThis problem can be solved using far less number of conditional statements, by utilizing the fact that the\r\nword representations of numbers between 20 and 99 follow a pattern.",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\nint a, b, c;\r\nprintf(\"Enter your number between 0 to 100.\\n\");\r\nscanf(\"%d\", &a);\r\nb = a % 10;\r\nc = a \/ 10;\r\nif (c == 9)\r\n{\r\nprintf(\"Ninety \");\r\n}\r\nelse if (c == 8)\r\n{\r\nprintf(\"Eighty \");\r\n}\r\nelse if (c == 7)\r\n{\r\nprintf(\"Seventy \");\r\n}\r\nelse if (c == 6)\r\n{\r\nprintf(\"Sixty \");\r\n}\r\nelse if (c == 5)\r\n{\r\nprintf(\"Fifty \");\r\n}\r\nelse if (c == 4)\r\n{\r\nprintf(\"Forty \");\r\n}\r\nelse if (c == 3)\r\n{\r\nprintf(\"Thirty \");\r\n}\r\nelse if (c == 2)\r\n{\r\nprintf(\"Twenty \");\r\n}\r\nif (c != 1 && b == 1)\r\n{\r\nprintf(\"one\");\r\n}\r\nelse if (c != 1 && b == 2)\r\n{\r\nprintf(\"two\");\r\n}\r\nelse if (c != 1 && b == 3)\r\n{\r\nprintf(\"three\");\r\n}\r\nelse if (c != 1 && b == 4)\r\n{\r\nprintf(\"four\");\r\n}\r\nelse if (c != 1 && b == 5)\r\n{\r\nprintf(\"five\");\r\n}\r\nelse if (c != 1 && b == 6)\r\n{\r\nprintf(\"six\");\r\n}\r\nelse if (c != 1 && b == 7)\r\n{\r\nprintf(\"seven\");\r\n}\r\nelse if (c != 1 && b == 8)\r\n{\r\nprintf(\"eight\");\r\n}\r\nelse if (c != 1 && b == 9)\r\n{\r\nprintf(\"nine\");\r\n}\r\nif (c == 1 && b == 1)\r\n{\r\nprintf(\"Eleven\");\r\n}\r\nelse if (c == 1 && b == 2)\r\n{\r\nprintf(\"Twelve\");\r\n}\r\nelse if (c == 1 && b == 3)\r\n{\r\nprintf(\"Thirteen\");\r\n}\r\nelse if (c == 1 && b == 4)\r\n{\r\nprintf(\"Fourteen\");\r\n}\r\nelse if (c == 1 && b == 5)\r\n{\r\nprintf(\"fifteen\");\r\n}\r\nelse if (c == 1 && b == 6)\r\n{\r\nprintf(\"Sixteen\");\r\n}\r\nelse if (c == 1 && b == 7)\r\n{\r\nprintf(\"Seventeen\");\r\n}\r\nelse if (c == 1 && b == 8)\r\n{\r\nprintf(\"Eighteen\");\r\n}\r\nelse if (c == 1 && b == 9)\r\n{\r\nprintf(\"Nineteen\");\r\n}\r\nelse if (c == 1 && b == 0)\r\n{\r\nprintf(\"Ten\");\r\n}\r\nreturn 0;\r\n}"
                },
                {
                    "Question": "Write a C program to perform the following tasks.\r\n\r\n1. Let P = (x1, y1) and Q = (x2, y2) be two points in the two-dimensional plane. Assume that the\r\nstraight line join P and Q does not pass through the origin. These coordinates should be floatingpoint\r\nnumbers.\r\n\r\n2. Print the equation of the straight line joining P and Q in aX + bY + c = 0 format. You are not\r\nrequired to ensure that the gcd of a, b, and c is 1. Any valid equation is acceptable.\r\n\r\n3. Print the distance of the straight line from the origin.\r\n\r\n4. Print the mirror-image of the origin with respect to the straight line joining P and Q.\r\n\r\n5. Take R = (x3, y3) a point as input from the user. Print if R lies on the straight-line joining P and Q.\r\n\r\n6. Print the mirror-image of R with respect to the straight line joining P and Q.\r\n\r\nYou may require math library functions. For that, you use the following code in the beginning of your\r\ncode.\r\n\r\n#include<math.h>\r\nTo compile your code, you the following command in terminal.\r\ngcc .\/program.c -lm\r\n\r\nTo compare a floating point variable, say x, with a floating point constant, say 2, use the following\r\ncode\r\n``if (x== 2.0f)'' or ``if (x > 2.0f)'' etc.\r\n\r\nSample Output:\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out .\/a.out\r\nWrite x1: 3.4\r\nWrite y1: -2.6\r\nWrite x2: -5.2\r\nWrite y2: -19\r\nEquation of the line joinig the two points is 16.400000X+(-8.600000)Y+(-78.120003)=0\r\nThe distance of the line from the origin is 4.218576\r\nMirror image of the origin with respect to the line is (7.472110,-3.918302)\r\nWrite x3: 32\r\nWrite y3: -9.2\r\nThe point (32.000000,-9.200000) does not lie on the straight line\r\nMirror image of (32.000000,-9.200000) with respect to the line is (-18.292313,17.172802)\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main(){\r\n    \/\/ Task 1\r\n    float x1,x2,y1,y2;\r\n    printf(\"Write x1: \");\r\n    scanf(\"%f\",&x1);\r\n    printf(\"Write y1: \");\r\n    scanf(\"%f\",&y1);\r\n    printf(\"Write x2: \");\r\n    scanf(\"%f\",&x2);\r\n    printf(\"Write y2: \");\r\n    scanf(\"%f\",&y2);\r\n\r\n    \/\/Task 2\r\n    float a=1.0; \/\/ 'a' is assigned a value which is used to find b and c\r\n    float slope=(y2-y1)\/(x2-x1);\r\n    float b=-(a\/slope);\r\n    float c=-(a*x1+b*y1);\r\n    printf(\"Equation of the line joining the two points is %fX+(%fY)+(%f)=0\\n\",a,b,c);\r\n\r\n    \/\/Task 3\r\n    float distance=fabs(c\/(sqrt(a*a+b*b))); \/\/ Distance is always positive so applied fabs()\r\n    printf(\"The distance of the line from the origin is %f\\n\",distance);\r\n\r\n    \/\/Task 4\r\n    float mirror_x_0=-(2*a*c)\/(a*a+b*b);\r\n    float mirror_y_0=-(2*b*c)\/(a*a+b*b);\r\n    printf(\"Mirror image of the origin with respect to the line is (%f,%f)\\n\",mirror_x_0,mirror_y_0);\r\n\r\n    \/\/Task 5\r\n    float x3,y3;\r\n    printf(\"Write x3: \");\r\n    scanf(\"%f\",&x3);\r\n    printf(\"Write y3: \");\r\n    scanf(\"%f\",&y3);\r\n    float result=fabs((a*x3+b*y3+c)); \/\/ Applied fabs() keeping in mind 0.0 and -0.0\r\n    if(result==0.0f){\r\n        printf(\"The point (%f,%f) lies on the straight line\\n\",x3,y3);\r\n    }\r\n    else{\r\n        printf(\"The point (%f,%f) does not lie on the straight line\\n\",x3,y3);\r\n    }\r\n\r\n    \/\/Task 6\r\n    float mirror_x_x3=x3-((2*a*result)\/(a*a+b*b));\r\n    float mirror_y_y3=y3-((2*b*result)\/(a*a+b*b));\r\n    printf(\"Mirror image of (%f,%f) with respect to the line is (%f,%f)\",x3,y3,mirror_x_x3,mirror_y_y3);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write C code which reads a floating point number x\r\nand an integer n ( 0 to 10  both inclusive ) from keyboard and computes the\r\nfollowing.\r\n(a) SUM = x + (x+1) + (x+2) + (x+3) + \u2026\u2026.. +\r\n(x+n)\r\n(b) PRODUCT = x * (x+1) * (x+2) * (x+3) *\r\n\u2026\u2026.. * (x+n)\r\n(c) Take as input another positive floating point\r\nnumber y.\r\n(d) Now, enter an operator from the keyboard and\r\nperform the operation. The operator can be any of\r\nthe following\r\n+ (addition)\r\n- (subtraction)\r\n* (multiplication)\r\n\/ (division) and\r\n% (remainder)\r\nCalculate x <operator> y.\r\n(e) Print x, the sum, the product and the floating\r\npoint number you obtain from the calculator.",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main(){\r\n    float x,SUM=0.0,PRODUCT=1.0;\r\n    int n;\r\n    printf(\"Enter x (floating point number) : \");\r\n    scanf(\"%f\",&x); \/\/ x is taken as input from user\r\n    printf(\"Enter n (integer) : \");\r\n    scanf(\"%d\",&n); \/\/ n is taken as input from user\r\n    if(n>=0 && n<=10){\r\n        SUM=(x*(n+1))+((n*(n+1))\/2); \/\/ (a) Calculating sum as per the given series using some math formulas\r\n    }\r\n    \/* (b) Calculating product as per the given series *\/\r\n    \/* Control enters in switch case as per the value of n\r\n       and starts to calculate the series backwards from that value of n towards the first term\r\n    *\/\r\n    switch(n){\r\n        case 10:\r\n            PRODUCT=PRODUCT*(x+10);\r\n        case 9:\r\n            PRODUCT=PRODUCT*(x+9);\r\n        case 8:\r\n            PRODUCT=PRODUCT*(x+8);\r\n        case 7:\r\n            PRODUCT=PRODUCT*(x+7);\r\n        case 6:\r\n            PRODUCT=PRODUCT*(x+6);\r\n        case 5:\r\n            PRODUCT=PRODUCT*(x+5);\r\n        case 4:\r\n            PRODUCT=PRODUCT*(x+4);\r\n        case 3:\r\n            PRODUCT=PRODUCT*(x+3);\r\n        case 2:\r\n            PRODUCT=PRODUCT*(x+2);\r\n        case 1:\r\n            PRODUCT=PRODUCT*(x+1);\r\n        case 0:\r\n            PRODUCT=PRODUCT*x;\r\n            break;\r\n        default:\r\n            printf(\"The value of n should be an integer from 0 to 10 both inclusive!\\n\");\r\n    }\r\n    float y;\r\n    char operator,holder;\r\n    float result=0;\r\n    printf(\"Enter y (positive floating point number) : \");\r\n    scanf(\"%f\",&y); \/\/ (c) y is taken as input from user\r\n\r\n    \/* holder is used to hold the null terminator character\r\n       after input of y which otherwise gets stored in operator variable.\r\n       apart from this, holder has no use as such in this program\r\n    *\/\r\n    scanf(\"%c\",&holder);\r\n\r\n    \/* Start of part (d) *\/\r\n    printf(\"Type + for addition.\\n\");\r\n    printf(\"Type - for subtraction.\\n\");\r\n    printf(\"Type * for multiplication.\\n\");\r\n    printf(\"Type \/ for division.\\n\");\r\n    printf(\"Type percentage sign for remainder.\\n\");\r\n    printf(\"Enter an operator: \");\r\n    scanf(\"%c\",&operator); \/\/ operator to be used in calculator is taken as input from user\r\n    switch(operator){\r\n        case '+':\r\n            result=x+y; \/\/ addition\r\n            break;\r\n        case '-':\r\n            result=x-y; \/\/ subtraction\r\n            break;\r\n        case '*':\r\n            result=x*y; \/\/ multiplication\r\n            break;\r\n        case '\/':\r\n            result=(int)(x\/y); \/\/ division\r\n            break;\r\n        case '%':\r\n            result=fmod(x,y); \/\/remainder\r\n            break;\r\n        default:\r\n            printf(\"Sorry you have entered an invalid operator!\\n\");\r\n    }\r\n    \/* Entering part (e) *\/\r\n    printf(\"The value of x is: %f\\n\",x);\r\n    printf(\"The sum is: %f\\n\",SUM);\r\n    printf(\"The product is: %f\\n\",PRODUCT);\r\n    printf(\"The floating point number obtained from the calculator is: %f\\n\",result);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "\"A particle starts from a point A(a,0) on x-axis with an initial speed u \nand moves along +x-axis with an acceleration alpha. \nLet d be its distance from the origin (0,0) after t seconds. \nWrite a program to compute the value of d and print it on the terminal. \nThe values of a, u, alpha, and t are real and supplied by the user during execution of your program.\r\n\r\n                Enter the values of a, u, alpha in order: 5 2 3  \r\n                Enter the time: 3\r\n                Distance = 24.500000\r\n                \r\n                Enter the values of a, u, alpha in order: -5 6 7\r\n                Enter the time: 9.23\r\n                Distance = 348.555115",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float a,u,alpha,t,d;\r\n    printf(\"Enter the values of a,u,alpha in order: \");\r\n    scanf(\"%f %f %f\",&a,&u,&alpha);\r\n    printf(\"Enter the time: \");\r\n    scanf(\"%f\",&t);\r\n    d = u*t+0.5*alpha*t*t +a;\r\n    printf(\"Distance = %f\", d);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "User supplies a 3-digit number. Your program should reverse the digits and print the resultant number on the terminal. \nYou are not allowed to use loops.\r\n\r\n                Enter a 3-digit number: 567\r\n                Reverse number = 765\r\n                \r\n                Enter a 3-digit number: 222\r\n                Reverse number = 222\r\n                \r\n                Enter a 3-digit number: 891\r\n                Reverse number = 198\r\n                \r\n                Enter a 3-digit number: 120\r\n                Reverse number = 021 \/ 21",
                    "Answer": "#include<stdio.h>\r\n            int main(){\r\n            int a,ones,hundredths,d,tens, number;\r\n            printf(\"In this program, you will get a reverse of a three digit number\\n\");\r\n            printf(\"Enter a three digit number:\\n\");\r\n            scanf(\"%d\",&a);\r\n            ones = a\/100;\r\n            hundredths = a%10;\r\n            d = a\/10;\r\n            tens = d%10;\r\n            tens = tens*10;\r\n            hundredths = hundredths*100;\r\n            number = hundredths+tens+ones;\r\n            printf(\"The reverse of the number entered is:%d\",number);\r\n            return 0;\r\n            }"
                },
                {
                    "Question": "In an automobile company, the number of cars manufactured on a day, say n, depends on which day of the week it is.\r\n                Monday means Day 1, Tuesday means Day 2, ..., Sunday means Day 7.\r\n                For Day 1, number of manufactured cars per day is given by the number of available machines (say m, which is a user input).\r\n                For Day 2, n is m + m\/2 + m\/4, rounded off to the nearest integer.\r\n                For Day 3 and Day 6, k machines (k is user input) are kept under inspection, and so n becomes m-k + (m-k)\/2 + (m-k)\/4, rounded off to the nearest integer.\r\nFor the other days, n is m plus a boosting fraction f of m, rounded off to the nearest integer,\r\n                where the fraction f is positive and less than 1 and taken as user input.\r\n                Given the week day (1 to 7) as input, find the number of manufactured cars (n) on that day.\r\n                You should use switch-case statements.\r\n                \r\n                Example 1\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 1\r\n                Number of manufactured cars = 11.\r\n                \r\n                Example 2\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 2\r\n                Number of manufactured cars = 19.\r\n                \r\n                Example 3\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 3\r\n                Enter no. of machines under inspection: 5\r\n                Number of manufactured cars = 11.\r\n                \r\n                Example 4\r\n                Enter the number of machines: 11\r\n                Enter the day number (1-7): 4\r\n                Enter boosting fraction: .33\r\n                Number of manufactured cars = 15.",
                    "Answer": "#include <stdio.h>\r\n            #include <math.h>\r\n            int main()\r\n            {\r\n                int n,d,k;\r\n                float f,m;\r\n                printf(\"Enter the no. of machines in the company: \");\r\n                scanf(\"%f\",&m);\r\n                printf(\"Enter the week day number(1-7): \");\r\n                scanf(\"%d\",&d);\r\n                switch(d)\r\n                {\r\n                    case 1:\r\n                        n=m;\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    case 2:\r\n                        n=round(m+m\/2+m\/4);\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    case 3:\r\n                    case 6:\r\n                        printf(\"Enter no. of machines kept under inspection: \");\r\n                        scanf(\"%d\",&k);\r\n                        n=round((m-k)+(m-k)\/2.0+(m-k)\/4.0);\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    case 4:\r\n                    case 5:\r\n                    case 7:\r\n                        printf(\"Enter Boosting Factor: \");\r\n                        scanf(\"%f\",&f);\r\n                        n=round(m+f*m);\r\n                        printf(\"Number of manufactured cars = %d\",n);\r\n                        break;\r\n                    default:\r\n                        printf(\"Invalid Input!\");\r\n                }\r\n                return 0;\r\n            }"
                },
                {
                    "Question": "Write a C program that take three coordinates as input. \nNext, it checks if the triangle is acute-angled, right-angled, or obtuse-angled.  \nYour code should do the following: - first compute the lengths of three sides of the triangle; - \ncheck whether the input satisfies the triangle inequality property, \ni.e., max side length is less than the sum of the other two sides; \n- do necessary checking and print the type of the triangle in the terminal. Sample input:\r\n                \r\n                Enter the three coordinates: (2, 4), (6, 9), (-2, 7)\r\n                \r\n                This is a valid\/invalid triangle\r\n                \r\n                This is a XX (acute-angled\/right-angled\/obtuse-angled) triangle",
                    "Answer": "#include<stdio.h>\r\n            #include<math.h>\r\n            int main(){\r\n            float x1,y1,x2,y2,x3,y3,a,b,c,t;\r\n            printf(\"We are going to find the type of triangle in this program\\n\");\r\n            printf(\"Enter the coordinates (x1,y1),(x2,y2) and (x3,y3) in the mentioned order\\n\");\r\n            scanf(\"%f%f\",&x1,&y1);\r\n            scanf(\"%f%f\",&x2,&y2);\r\n            scanf(\"%f%f\",&x3,&y3);\r\n            a = sqrt(pow(x2-x1,2)+pow(y2-y1,2));\r\n            b = sqrt(pow(x3-x2,2)+pow(y3-y2,2));\r\n            c = sqrt(pow(x3-x1,2)+pow(y3-y1,2));\r\n            if (a>b){\r\n                t=a;\r\n                a=b;\r\n                b=t;\r\n            }\r\n            if (b>c){\r\n                t=c;\r\n                c=b;\r\n                b=t;\r\n            }\r\n            if (a>b){\r\n                t=a;\r\n                a=b;\r\n                b=t;\r\n            }\r\n            \r\n            if (a+b>c){\r\n                printf(\"The triangle is valid\\n\");\r\n                }else{\r\n                printf(\"The triangle is invalid\\n\");\r\n                }\r\n            \r\n            \r\n                    if ((c - sqrt(pow(a,2)+pow(b,2)))*(c - sqrt(pow(a,2)+pow(b,2)))<0.001 ){\r\n                        printf(\"It is a right angled triangle\\n\");\r\n                    }else if (c> sqrt(pow(a,2)+pow(b,2))){\r\n                        printf(\"It is an obtuse angled triangle\\n\");\r\n                    }else if (c<sqrt(pow(a,2)+pow(b,2)))\r\n                        printf(\"It is an acute angled triangle\\n\");\r\n            return 0;\r\n            }"
                },
                {
                    "Question": "Write a program to perform the following for a user who wants to purchase wood:\r\n                i) Ask the user for the type of wood ('n' for natural wood, 's' for synthetic wood).\r\n                ii) Ask for the weight he wants.\r\n                iii) Compute and print the base price.\r\n                iv) Compute and print the GST.\r\n                v) Compute and print the total price.\r\n                \r\n                All prices should have two digits in the decimal place (use %XX.YYf format for this).\r\n                Assume that price of natural wood is Rs. 1100\/kg, that of synthetic one is Rs. 780\/kg, and \n               the respective GSTs are 20% and 15% on the base price.\r\n        \r\n        Example:\r\n        Enter the type of wood (n for natural wood, s for synthetic wood): n\r\n        Enter the weight of wood (in Kg.) you want: 7.25\r\n        -------------------------\r\n        Base price =     7975.00\r\n        GST =            1595.00\r\n        Total price =    9570.00\r\n        -------------------------\r\n        \r\n        Example\r\n        Enter the type of wood (n for natural wood, s for synthetic wood): n\r\n        Enter the weight of wood (in Kg.) you want: 13.12\r\n        -------------------------\r\n        Base price =    14432.00\r\n        GST =            2886.40\r\n        Total price =   17318.40\r\n        -------------------------",
                    "Answer": "#include<stdio.h>\r\n       int main(){\r\n           char a,n,s;\r\n           float weight, Bp, Gst, Tp;\r\n           printf(\"Enter the type of wood(n for natural wood, s for synthetic wood):\\n\");\r\n           scanf(\"%c\", &a);\r\n           if (a =='n'){\r\n               printf(\"Enter the weight of wood(in kg) you want:\\n\");\r\n               scanf(\"%f\",&weight);\r\n               printf(\"--------------\\n\");\r\n               Bp = 1100*weight;\r\n               printf(\"Base price = %0.2f\\n\",Bp);\r\n               Gst = Bp*0.2;\r\n               printf(\"GST= %0.2f\\n\", Gst);\r\n               Tp = Bp+Gst;\r\n               printf(\"Total  price = %0.2f\\n\",Tp);\r\n               printf(\"--------------\\n\");\r\n           }\r\n           if (a=='s'){\r\n               printf(\"Enter the weight of wood(in kg) you want:\\n\");\r\n               scanf(\"%f\",&weight);\r\n               printf(\"--------------\\n\");\r\n               Bp = 780*weight;\r\n               printf(\"Base price = %0.2f\\n\",Bp);\r\n               Gst = Bp*0.15;\r\n               printf(\"GST= %0.2f\\n\", Gst);\r\n               Tp = Bp+Gst;\r\n               printf(\"Total  price = %0.2f\\n\",Tp);\r\n               printf(\"--------------\\n\");\r\n           }\r\n           else{\r\n                   printf(\"Invalid input\\n\");\r\n           }\r\n       return 0;\r\n       }"
                },
                {
                    "Question": "Write a C program to input two floating point variables a and b from the user \nand compute the result of the expression (a+b)(a-b). \nShow the output up to two decimal points.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    float a,b;\r\n    printf(\"Enter 1st number(a): \");\r\n    scanf(\"%f\",&a);\r\n    printf(\"Enter 2nd number(b): \");\r\n    scanf(\"%f\",&b);\r\n    float outputSum = (a+b)*(a-b);\r\n    printf(\"\\nThe value of (a+b)(a-b) is %0.2f\",outputSum);\r\n}"
                },
                {
                    "Question": "Write a C program which takes the individual components of your roll number(integer and character components) as an input \nand then prints 'Hello' followed by your roll number in the output.\nFor example, if your roll number is 21CS30023, then it will take 21 as integer, C and S as character, and 30023 as integer.",
                    "Answer": "#include <stdio.h>\r\n#include <ctype.h>\r\n\r\nint main(){\r\n    int firstTwoDigits,lastFiveDigits;\r\n    char char3,char4;\r\n    printf(\"Enter the first two digits of your roll number: \");\r\n    scanf(\"%d\",&firstTwoDigits);\r\n    printf(\"Enter third character: \");\r\n    scanf(\" %c\",&char3);\r\n    printf(\"Enter fourth character: \");\r\n    scanf(\" %c\",&char4);\r\n    printf(\"Enter the last five digits of your roll number: \");\r\n    scanf(\"%d\",&lastFiveDigits);\r\n\r\n    printf(\"\\nHello %d%c%c%d\",firstTwoDigits,toupper(char3),toupper(char4),lastFiveDigits);\r\n}"
                },{
                    "Question": "Write a C program to check if a given integer is divisible by 2,3,5 or 7.",
                    "Answer": "#include <stdio.h>\r\n \r\n int main() {\r\n     int num; \r\n     int flag = 0; \r\n     \r\n     printf(\"Enter the number:\");\r\n     scanf(\"%d\", &num);\r\n     printf(\"\\n\");\r\n     \r\n     if(num % 2 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 2\\n\");\r\n     }\r\n     if(num % 3 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 3\\n\");\r\n     }\r\n     if(num % 5 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 5\\n\");\r\n     }\r\n     if(num % 7 == 0) {\r\n         flag = 1; \r\n         printf(\"Divisible by 7\\n\");\r\n     }\r\n     \r\n     if(flag == 0) {\r\n         printf(\"Not divisible by any\\n\");\r\n     }\r\n     \r\n     return 0; \r\n }\r\n\r\n"
                },
                {
                    "Question": "Say, you input a 4 digit integer number. Write a C program to check the input number contains only the binary digits 0 and 1.\\n",
                    "Answer": "#include <stdio.h>\r\n \r\n int main() {\r\n     int num, digit; \r\n     \r\n     int flag = 1; \r\n     \r\n     printf(\"Enter the four digit number:\");\r\n     scanf(\"%d\", &num);\r\n     printf(\"\\n\");\r\n     \r\n     \/* extract and check the fourth digit *\/ \r\n     digit = num % 10; \r\n     num = num \/ 10; \r\n     if(digit > 1) {\r\n         flag = 0; \r\n     }\r\n\r\n     \/* extract and check the third digit *\/      \r\n     digit = num % 10; \r\n     num = num \/ 10; \r\n     if(digit > 1) {\r\n         flag = 0; \r\n     }\r\n\r\n     \/* extract and check the second digit *\/      \r\n     digit = num % 10; \r\n     num = num \/ 10; \r\n     if(digit > 1) {\r\n         flag = 0; \r\n     }\r\n     \r\n     \/* Check the first digit *\/      \r\n     if(num > 1) {\r\n         flag = 0; \r\n     }\r\n     \r\n     \r\n     if(flag == 0) {\r\n         printf(\"No\\n\");\r\n     } else {\r\n         printf(\"Yes\\n\"); \r\n     }\r\n     \r\n     return 0; \r\n }"
                },
                {
                    "Question": "Write a C Program that reads in three points on a 2 dimensional plane (integers). All three will not be in a single\r\nstraight line. These are corner points of an isosceles triangle T1. You will first test whether the triangle T1 is\r\nindeed an isosceles triangle or not. If it is isosceles, you will find the lengths of base, height and also the area\r\nof the triangle T1 and print them. Next, you will find the length of the isosceles side of a Triangle T2, which has\r\ndouble the area and three times the base length as T1 and print it. \r\nSave the file as A01_<Roll Number>.c (example A01_21AG10002.c). Build, Run for and test it for the given data.\r\nThen upload the .c file for the Assignment.\r\nIn particular, you will do the following:\r\n1. Read x and y integer coordinates of three points of T1 and print them.\r\n2. Find out the lengths of the three sides of T1 and print them.\r\n3. Test whether they form an isosceles triangle. If no, print that T1 is not an isosceles triangle and end.\r\n4.\r\nIf it is an isosceles triangle, then print the lengths of base and height of T1 and also print the area of T1.\r\nIf T1 is an isosceles triangle, then print the length of the isosceles side of another isosceles triangle T2\r\nwhose base is three times that of T1 and area is twice that of T1.\r\nTest Data: \r\n5.\r\nTest 1: <0,0>, <10,0>, <5,5>, Test 2: <4,12>, <8,16>, <3,3>\r\nTest 3: <10,10>, <-3,3>, <3,-3> ",
                    "Answer": ""
                },
                {
                    "Question": "Write a C Program that will read four integer values, find how may of them are unique and print only the unique\r\nelements in ascending order. For example, if the integers read in are 5, 8, 1,5 then you will first print that there\r\nare 3 unique elements and then print 1, 5, 8.\r\nSave the file as A02_<Roll Number>.c (example A02_21AG10002.c). Build, Run for and test it for the given data.Then upload the .c file for the Assignment. \r\nIn particular, you will do the following:\r\n1. Read in four integers and print them.\r\n2. Print how many unique elements are there.\r\n3. Print the unique elements in ascending order.\r\nTest Data:\r\n1. 7, 1, 7, 1\r\n2. 4, 4, 4, 2\r\n3. 1, 5, 8, 2\r\n4. 5, 5, 5, 5",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int a1, a2, a3, a4, unique, c1, c2, c3, c4;\r\n    int b1, b2, b3, b4;\r\n    printf(\"Give 4 integers input (separated by space): \");\r\n    scanf(\"%d %d %d %d\",&a1,&a2,&a3,&a4);\r\n    unique = 1;\r\n    b1 = a1;\r\n\r\n    if ((a2!=b1))\r\n    {\r\n        b2 = a2;\r\n        unique+=1;\r\n    }\r\n    else\r\n        b2 = -1;\r\n\r\n    if ((a3!=b1)&&(a3!=b2))\r\n    {\r\n        b3 = a3;\r\n        unique+=1;\r\n    }\r\n    else\r\n        b3 = -1;\r\n\r\n    if ((a4!=b1) && (a4!=b2) && (a4!=b3))\r\n    {\r\n        b4 = a4;\r\n        unique+=1;\r\n    }\r\n    else\r\n        b4 = -1;\r\n\r\n    printf(\"\\nNo. of unique values: %d\\n\",unique);\r\n\r\n    c1=b1;\r\n    printf(\"\\nThe numbers in non-decreasing order: \");\r\n\r\n    switch (unique)\r\n    {\r\n    case 1:\r\n        printf(\"%d\",c1);\r\n        break;\r\n\r\n    case 2:\r\n        {\r\n            if (b2>0)\r\n                c2 = b2;\r\n            else if (b3>0)\r\n                c2 = b3;\r\n            else\r\n                c2 = b4;\r\n\r\n            if (c1>c2)\r\n                printf(\"%d %d\",c2,c1);\r\n            else\r\n                printf(\"%d %d\",c1,c2);\r\n            break;\r\n        }\r\n    case 3:\r\n        {\r\n            if (b2<0)\r\n            {\r\n                c2 = b3;\r\n                c3 = b4;\r\n            }\r\n            else if (b3<0)\r\n            {\r\n                c2 = b2;\r\n                c3 = b4;\r\n            }\r\n            else\r\n            {\r\n                c2 = b2;\r\n                c3 = b3;\r\n            }\r\n\r\n            if (c1>c2)\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    if (c2>c3)\r\n                    {\r\n                        printf(\"%d %d %d\",c3,c2,c1);\r\n                    }\r\n                    else\r\n                    {\r\n                        printf(\"%d %d %d\",c2,c3,c1);\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    printf(\"%d %d %d\",c2,c1,c3);\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    printf(\"%d %d %d\",c3,c1,c2);\r\n                }\r\n                else\r\n                {\r\n                    if (c2>c3)\r\n                    {\r\n                        printf(\"%d %d %d\",c1,c3,c2);\r\n                    }\r\n                    else\r\n                    {\r\n                        printf(\"%d %d %d\",c1,c2,c3);\r\n                    }\r\n                }\r\n            }\r\n            break;\r\n        }\r\n\r\n    case 4:\r\n        {\r\n            c2 = b2;\r\n            c3 = b3;\r\n            c4 = b4;\r\n\r\n            if (c1>c2)\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            if (c2>c4)\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c4,c3,c2,c1);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c3,c4,c2,c1);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                printf(\"%d %d %d %d\",c3,c2,c4,c1);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (c2>c4)\r\n                            {\r\n                                printf(\"%d %d %d %d\",c4,c2,c3,c1);\r\n                            }\r\n                            else\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c2,c4,c3,c1);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c2,c3,c4,c1);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c2,c1,c4);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c3,c1,c4);\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c2>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c2,c1,c3);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c4,c1,c3);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c3>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c1,c4,c3);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c2,c1,c3,c4);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else\r\n            {\r\n                if (c1>c3)\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c3>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c3,c1,c2);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c4,c1,c2);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c2>c4)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c1,c4,c2);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c3,c1,c2,c4);\r\n                        }\r\n                    }\r\n                }\r\n                else\r\n                {\r\n                    if (c1>c4)\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c1,c3,c2);\r\n                        }\r\n                        else\r\n                        {\r\n                            printf(\"%d %d %d %d\",c4,c1,c2,c3);\r\n                        }\r\n                    }\r\n                    else\r\n                    {\r\n                        if (c2>c3)\r\n                        {\r\n                            if(c2>c4)\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c4,c3,c2);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c3,c4,c2);\r\n                                }\r\n                            }\r\n                            else\r\n                            {\r\n                                printf(\"%d %d %d %d\",c1,c4,c2,c3);\r\n                            }\r\n                        }\r\n                        else\r\n                        {\r\n                            if (c2>c4)\r\n                            {\r\n                                printf(\"%d %d %d %d\",c1,c4,c2,c3);\r\n                            }\r\n                            else\r\n                            {\r\n                                if (c3>c4)\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c2,c4,c3);\r\n                                }\r\n                                else\r\n                                {\r\n                                    printf(\"%d %d %d %d\",c1,c2,c3,c4);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program that reads in five integers. If the numbers are not distinct, it prints \u201CNOT DISTINCT\u201D and terminates.\r\nIf they are all distinct, then it finds and prints the following: largest, smallest, sum and median of the five numbers.\r\nSave the file as A03_<Roll Number>.c (example A03_21AG10002.c). Build, Run for and test it for the given data. Then\r\nupload the .c file for the Assignment.\r\nIn particular, you will do the following:\r\n1. Read five integers and print them. They must be printed in a single line with commas in between numbers.\r\n2.\r\nIf the numbers are not distinct, in a new line, print \u201CNOT DISTINCT\u201D and terminate\r\nIf they are all distinct, then print the following in a new line each\r\na) Largest of the five numbers as \u2013 Largest = <Print the largest number>\r\nb) Smallest of the five numbers as \u2013 Smallest = <Print the smallest number>\r\nc) Sum of the five numbers as \u2013 Sum = <Print the sum>\r\nd) Median of the five numbers as \u2013 Median = <Median of the five numbers>\r\nTest Data: (Inputs will be given one after another without commas)\r\na) 7     9     23     1     5\r\nb) 3     7     19    -1     8\r\nc) 4     1       9    11    9\r\nd) -2    8       0    -1   -9  \r\n",
                    "Answer" : "\r\n#include <stdio.h>\r\n\r\n\/*take 5 int input as\r\nd1 d2 d3 d4 d5\r\nprint all\r\ncheck if distinct\r\nif not distinct, print so and end\r\nif distinc, largest smallest sum median*\/\r\n\r\nmain(){\r\n    int d1,d2,d3,d4,d5,temp;\r\n    printf(\"Enter your data\\n\");\r\n    scanf(\"%d%d%d%d%d\",&d1,&d2,&d3,&d4,&d5);\r\n    printf(\"\\n%d %d %d %d %d\",d1,d2,d3,d4,d5);\r\n    if (d1==d2 || d1==d3 || d1==d4 || d1==d5 ||\r\n        d2==d3 || d2==d4 || d2==d5 ||\r\n        d3==d4 || d3==d5 ||\r\n        d4==d5)printf(\"\\nNot distinct\\n\");\r\n\r\n    else{\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n        if (d4<d3) temp=d3, d3=d4, d4=temp;\r\n        if (d3<d2) temp=d2, d2=d3, d3=temp;\r\n        if (d2<d1) temp=d1, d1=d2, d2=temp;\r\n\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n        if (d4<d3) temp=d3, d3=d4, d4=temp;\r\n        if (d3<d2) temp=d2, d2=d3, d3=temp;\r\n\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n        if (d4<d3) temp=d3, d3=d4, d4=temp;\r\n\r\n        if (d5<d4) temp=d4, d4=d5, d5=temp;\r\n\r\n        printf(\"\\nLargest:%d\\n\",d5);\r\n        printf(\"Smallest:%d\\n\", d1);\r\n        printf(\"Sum:%d\\n\", d1+d2+d3+d4+d5);\r\n        printf(\"Median:%d\\n\", d3);\r\n\r\n    }\r\n}"
                },
                {
                    "Question":"Write a C program to print on the screen the following lines in the exact same sequence as given.\r\nYou cannot use more than TWO printf() to print everything on your screen.\r\n\u201CI am learning C Programming. I am very excited.\r\nThis is my first time.\u201D",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n\t\/\/The following line prints the required sentences. \r\n\t\/\/The \\n is the new line charachter which pushes the line following it to\r\n\t\/\/a new line.\r\n\tprintf(\"I am learning C programming. I am very excited.\\nThis is my first time\");\r\n\r\n\treturn 0;\r\n}"
                },
                {
                    "Question":"The office in which you are working has decided to contribute a part of your salary towards a\r\nspecial fund contribution. Your contribution is calculated as the addition of 10% of your basic\r\npay and 5% of your Dearness Allowance (DA). Write a program to take input two integers as\r\nyour basic pay and as your DA and display the fund contribution.\r\nExample:\r\nInput: Basic Pay: 1000\r\nDA : 200\r\nOutput: Fund contribution: 110 (10% of 1000 + 5% of 200)",
                    "Answer":"#include<stdio.h>\r\nint main()\r\n{\r\n    float basic,da,c; \/\/declaring variables here\r\n    \r\n    printf(\"basic pay: \"); \/\/prompt user to input value\r\n    scanf(\"%f\",&basic);\/\/taking input for basic salary\r\n    \r\n    printf(\"DA: \"); \/\/prompt user to input value\r\n    scanf(\"%f\",&da);\/\/taking input for da\r\n    \r\n    c = (basic*0.1)+(da*0.05);\/\/calculating contribution and storing in variable c\r\n    \r\n    printf(\"\\nFund Contribution = %f (10%% of %f+ 5%% of %f)\",c,basic,da);\/\/printing the contribution\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Complex numbers are represented geometrically as a point in a 2D Argand plane, where the\r\nx-axis denotes the real part and the y-axis denotes the imaginary part. Take input one complex\r\nnumber from the keyboard. Hence reflect this complex number in the Argand plane with respect\r\nto the vertical y-axis.\r\n(a) Display the reflected complex number in the form \u201Ca + ib\u201D (i.e if the real part is 2 and the\r\nimaginary part is -5 then you should display \u201C2-i5\u201D on the screen).\r\n(b) Additionally, display the area enclosed by the rectangle between the horizontal x-axis (the\r\nreal axis) and the straight horizontal line connecting the two complex numbers, i.e the\r\noriginal and the reflected complex number. The other two sides of the rectangle are the\r\nvertical height of the imaginary part of the two complex numbers.\r\n[Hint: For input, maintain two separate variables, one denoting the real and the other\r\nimaginary part for one complex number. You can assume all integer variables.]",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/initialize the variables\r\n    \/\/x represents real part of the complex number\r\n    \/\/y is the imaginary part\r\n    \r\n    int x,y;\r\n    \r\n    printf(\"Enter the real part of the complex number:\"); \/\/prompt the user to enter the real part\r\n    scanf(\"%d\",&x); \/\/store the input in x\r\n\r\n    printf(\"Enter the imaginary part of the complex number:\"); \/\/prompt the user to enter the imaginary part\r\n    scanf(\"%d\",&y); \/\/store the input in y\r\n\r\n    printf(\"The original complex number is: %d+i%d \\n\",x,y);\r\n\r\n    \/\/after reflecting the complex number a+ib about the y axis,it becomes -a+ib\r\n    x=-x;\r\n    printf(\"After reflecting,the complex number is:%d+i%d \\n\",x,y);\r\n\r\n    \/* The area enclosed by the rectangle between the x-axis  and the straight horizontal line connecting the two complex numbers.\r\n     The other two sides of the rectangle are the vertical height of the imaginary part of the two complex numbers.*\/\r\n    \/*The length of the rectangle is 2x and breadth is y.*\/\r\n    \/*So area is 2*x*y.*\/\r\n\r\n    printf(\"the area of the required rectangle is=%d square units\",(2*x*y));\r\n\r\n    return 0;\r\n\r\n}"
                },
                {
                    "Question":"Given the base radius and total surface area (curved surface area + top circular area + bottom\r\ncircular area) of an enclosed right circular cylinder in cm, first calculate the height of the cylinder\r\n(in cm) and then find its volume (in cm3\r\n\r\n). Hence, calculate the cost of storing a perfume to fill\r\nexactly (2\/3)rd of the cylinder at an amount of Rs.10 per cubic centimeter and the remaining\r\nvolume is filled with Nitrogen gas at Rs.2 per cubic centimeter. Your input should be the radius\r\nand surface area of the cylinder (in cm and cm2\r\n\r\nrespectively) and you should display the height,\r\n\r\nvolume and the cost of storing the perfume with the Nitrogen gas.\r\nAssume,\r\n\u03C0 = 3.141\r\nCurved surface area of cylinder = 2*\u03C0*base radius*height\r\nVolume = \u03C0*radius2*height",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n \/\/declaring the variables\r\n float r,h,tsa,csa,vol,cost;\r\n\r\n \/\/input the base radius and the curved surface area\r\n printf(\"Enter the base radius\\n\");\r\n scanf(\"%f\",&r);\r\n\r\n printf(\"Enter the total surface area\\n\");\r\n scanf(\"%f\",&tsa);\r\n\r\n \/\/calculating curved surface area\r\n csa=tsa-(2*3.141*r*r);\r\n\r\n \/\/calculating the height\r\n h=csa\/(2*3.141*r);\r\n\r\n \/\/calculating volume of cylinder\r\n vol=3.141*r*h;\r\n\r\n \/\/calculating the cost of storing perfume\r\n cost=0.67*vol*10+0.33*vol*2;\r\n\r\n \/\/printing the results\r\n printf(\"Height:%1.3f\\n\",h);\r\n printf(\"Volume of the Cylinder:%1.3f\\n\",vol);\r\n printf(\"The Total Cost: Rs%1.2f\\n\",cost);\r\n\r\n return 0;\r\n}"
                },
                {
                    "Question":"If a five-digit number is taken as input through the keyboard, write a C program to print the\r\ndifference of the sum of the last three digits from the sum of the first two digits of the number.\r\nAlso use one single integer variable to generate the reverse of the last three digits and print\r\nthat single integer [Hint: Use positional notation for decimal numbers to generate the reverse\r\nnumber.].\r\nExample:\r\nInput:\r\n97321\r\nOutput:\r\nDifference = 10 (sum of (9,7) - sum of (3,2,1))\r\nReverse number = 123 (as a single integer)",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main()\r\n\r\n{\r\n    int Number,n1,n2,n3,n4,n5,Diff; \/\/declaring variables\r\n\r\n    printf(\"Enter the 5 digit number:\\n\"); \/\/prompt the user to input values\r\n    scanf(\"%d\",&Number); \/\/capture and store input\r\n\r\n    \/\/calulations below\r\n    n1=floor(Number\/10000);\r\n    Number-=10000*n1;\r\n\r\n    n2=floor(Number\/1000);\r\n    Number-=1000*n2;\r\n\r\n    n3=floor(Number\/100);\r\n    Number-=100*n3;\r\n\r\n    n4=floor(Number\/10);\r\n    Number-=10*n4;\r\n\r\n    n5=Number;\r\n    Diff=n1+n2-(n3+n4+n5);\r\n\r\n    printf(\"Difference: %d\\n\",Diff);\r\n    printf(\"Reverse Number: %d%d%d\",n5,n4,n3);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Read three real numbers, i.e., a, b, and c, which represent the coefficients of a quadratic equation\r\nand display them in the exact form ax \u02C6 2 + bx + c = 0. Hence check whether the roots are\r\nreal, coincident, or complex according to the rules of quadratic equation and display it. No need\r\nto find out the roots separately. Additionally if the roots are complex, determine the quadrant\r\n(i.e 1st quadrant\/2nd quadrant\/3rd quadrant\/4th quadrant) of the 2D Argand plane in which\r\nthe first complex root of the form a + ib lies. Note that complex roots occur as conjugate pairs\r\na+ib and a\u2212ib, consider only the root in the form a+ib and determine in which quadrant it lies.\r\n\r\nExample1:\r\n(Please take the input and display the output as shown)\r\nInput:\r\na:5\r\nb:2\r\nc:1\r\nOutput:\r\nEquation: 5x \u02C6 2 + 2x + 1 = 0\r\nRoots: Complex\r\nQuadrant of 1st complex root: 2nd [Reason: The first complex root is \u22120.2 + 0.4i as per the\r\ngiven example, hence it lies in the 2nd quadrant]\r\n\r\nExample2:\r\n(Please take the input and display the output as shown)\r\nInput:\r\na:1\r\nb:2\r\nc:-3\r\nOutput:\r\nEquation: x \u02C6 2 + 2x \u2212 3 = 0\r\nRoots: Real",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n\t\/\/Declaring coeffs of quadratic equation and discriminant\r\n\tfloat a,b,c;\r\n\tfloat d;\r\n\r\n\t\/\/Getting a,b,c from user\r\n\tprintf(\"a: \");\r\n\tscanf(\"%f\",&a);\r\n\tprintf(\"b: \");\r\n\tscanf(\"%f\",&b);\r\n\tprintf(\"c: \");\r\n\tscanf(\"%f\",&c);\r\n\r\n    \/\/Displaying the quadratic eqn as required\r\n    if(b<0 && c<0){\r\n        printf(\"%0.1fx^2 - %0.1fx - %0.1f = 0\\n\",a,-b,-c);\r\n    }\r\n    else if(b<0 && c>0){\r\n        printf(\"%0.1fx^2 - %0.1fx + %0.1f = 0\\n\",a,-b,c);\r\n    }\r\n    else if(b>0 && c<0){\r\n        printf(\"%0.1fx^2 + %0.1fx - %0.1f = 0\\n\",a,b,-c);\r\n    }\r\n    else{\r\n        printf(\"%0.1fx^2 + %0.1fx + %0.1f = 0\\n\",a,b,c);\r\n    }\r\n\r\n\r\n    \/\/calculating discriminant to find nature of roots\r\n\td = (pow(b,2)-4*a*c);\r\n\r\n    \/\/displaying input as per nature of \"d\"\r\n    if(d>0){\r\n        printf(\"\\nRoots: Real\\n\");\r\n        }\r\n    else if(d==0){\r\n        printf(\"\\nRoots: Coincident\\n\");\r\n    }\r\n    else if (d<0){\r\n        printf(\"\\nRoots: Complex\\n\");\r\n        float re = (float)(-b\/(2*a));\r\n        float im = (float)((sqrt(-d))\/(2*a));\r\n        \/\/first root => (-b\/2a)+i(sqrt(-d)\/2a), in this case taking -d to get real square root\r\n        \/\/Determining quadrant of root based on real and imaginary part of first root\r\n        if(re>=0 && im>0){\r\n            printf(\"Quadrant of 1st complex root: 1st\");\r\n        }\r\n        else if(re<0 && im>0){\r\n            printf(\"Quadrant of 1st complex root: 2nd\");\r\n        }\r\n        else if(re<0 && im<0){\r\n            printf(\"Quadrant of 1st complex root: 3rd\");\r\n        }\r\n        else if(re>=0 && im<0){\r\n            printf(\"Quadrant of 1st complex root: 4th\");\r\n        }\r\n    }\r\n\r\n\r\n\treturn 0;\r\n}"
                },
                {
                    "Question":"Steel is an alloy that is built of iron with typically a few tenths of a percent of carbon for im-\r\nproving its strength as well as fracture resistance in comparison to other forms of iron. Let us\r\n\r\nconsider that a certain grade of steel is graded as per the given condition:\r\nFirstly, the hardness of the steel should not be less than equal to 60. Secondly, the content of\r\nthe carbon in the steel should be greater than 0 and less than 0.65.\r\nFinally, strength of tensile must be greater than 6400\r\nThe grades are as follows: Grade is 10 - on satisfying all the three conditions\r\nGrade is 9 - on satisfying conditions (ii) and (iii)\r\nGrade is 8 - on satisfying conditions (i) and (ii)\r\nGrade is 7 - on satisfying conditions (i) and (iii) are satisfied\r\nGrade is 6 - if none of the conditions are satisfied\r\nGrade is 5 - if only one condition is satisfied\r\nWrite a program, to take the values of hardness, carbon content and tensile strength of the steel\r\nunder consideration as input from the user and output the grade of the steel. You can check for\r\nthe respective grade of the steel in the same order as given in the question.\r\nExample1:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nHardness: 80\r\nCarbon content: 0.30\r\nTensile strength: 5000\r\nOutput:\r\nGrade: 8",
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n\r\n    \/\/Declaring all required variables\r\n    int hardness,tensile;\r\n    float carbon;\r\n\r\n    \/\/Taking user input for 3 parameters\r\n    printf(\"Hardness: \");\r\n    scanf(\"%d\",&hardness);\r\n    printf(\"Carbon Content: \");\r\n    scanf(\"%f\",&carbon);\r\n    printf(\"Tensile Strength: \");\r\n    scanf(\"%d\",&tensile);\r\n\r\n\r\n    \/\/Displaying grade based on conditions satisfied\r\n    if (hardness>60 && carbon>0 && carbon<0.65 && tensile>6400){\r\n        printf(\"Grade: 10\");\r\n    }\r\n    else if(carbon>0 && carbon<0.65 && tensile>6400){\r\n        printf(\"Grade: 9\");\r\n    }\r\n    else if(hardness>60 && carbon>0 && carbon<0.65){\r\n        printf(\"Grade: 8\");\r\n    }\r\n    else if(hardness>60 && tensile>6400){\r\n        printf(\"Grade: 7\");\r\n    }\r\n    else if(hardness<60 && carbon>0.65 && tensile<6400){\r\n        printf(\"Grade: 6\");\r\n    }\r\n    else {\r\n        printf(\"Grade: 5\");\r\n    }\r\n\r\n\treturn 0;\r\n}"
                },
                {
                    "Question":"An aeroplane can travel at a speed of 700km\/h from a source A either eastwards or westwards.\r\nIf it travels east, the time advances at a rate of 1 hour per 500 km and if it travels west time\r\nrecedes back at the equal rate, with respect to the starting point A. Write a program to take\r\ninput i) the starting time of the aeroplane in hours and minutes only (you can consider 24 hour\r\nclock so 1PM becomes 13 hour 0 minutes), ii) the duration of the flight (you can assume the\r\nmaximum duration to be 6 hours) and iii) a character representing eastward or westward travel\r\n(like \u2018e\u2019 for eastwards and \u2018w\u2019 for westwards). Hence perform the following,\r\n\r\n(A) Check whether the starting time is a valid time or not. If the starting time is invalid, print\r\n\u201CError\u201D and you can exit from the program.\r\n(B) Depending on the duration of flight and eastward or westward direction of travel, display\r\nthe local time of arrival (i.e the local time at the arrival point) in the same 24 hour format.\r\nConsider the case of adjusting the time of arrival as per the standard 24 hour day format\r\nand take care of hour overflow (in case of eastward travel) or underflow (in case of westward\r\ntravel).\r\n(C) Also print \u201Csame day\u201D or \u201Cprevious day\u201D or \u201Cnext day\u201D depending on the day of arrival\r\nwith respect to the starting day\r\nAssume that the aeroplane travels in the given speed uniformly from source to destination. Also\r\nyou can assume all integer values.\r\n\r\nExample1:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nStarting hour: 14\r\nStarting minute: 15\r\nDuration: 5\r\nDirection: e\r\nOutput:\r\nStarting time is valid\r\nArrival time hour: 21\r\nArrival time minute: 15\r\nArrival day: same day\r\n\r\nExample2:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nStarting hour: 26\r\nStarting minute: 15\r\nDuration: 6\r\nDirection: w\r\nOutput:\r\nStarting time is invalid",
                    "Answer":"\/\/Speed of airplane: 700km\/h\r\n#include<stdio.h>\r\n\r\nint main(){\r\n    \/\/Declaring required variables\r\n    int hr,min,duration,time_change,hr_change,min_change,day;\r\n    char dirn;\r\n    \/\/Taking user input for all parameters\r\n    printf(\"Starting hour: \");\r\n    scanf(\"%d\",&hr);\r\n    printf(\"Starting minute: \");\r\n    scanf(\"%d\",&min);\r\n    printf(\"Duration: \");\r\n    scanf(\"%d\",&duration);\r\n    printf(\"Direction: \");\r\n    scanf(\" %c\",&dirn);\r\n\r\n    if(hr<=0 && hr>24 && min<0 && min>60) {\r\n        printf(\"\\nStarting time is valid.\\n\");\r\n        \/\/700*duration will be distance, and every 500 km distance, time changes by 1hr\r\n        \/\/Also multiplying by 10 in order to get hr and min by modulus\r\n        time_change = ((70*duration)\/5);\r\n        min_change = (time_change%10)*6;\r\n        hr_change = (time_change-(time_change%10))\/10;\r\n        \/\/this time change is incremented in case of e and decremented in case of w\r\n\r\n        if(dirn=='e'){\r\n            hr+=hr_change;\r\n            min+=min_change;\r\n            \/\/Adjusting min and\/or hr in case of overflow\r\n            \/\/\"day\" variable used to keep track of which day (-1 => previous day, 0=> same day,1=> next day)\r\n            if (min>=60){\r\n                min=min-60;\r\n                hr+=1;\r\n            }\r\n            else{\r\n                min=min;\r\n            }\r\n            if (hr>=24){\r\n                hr=hr-24;\r\n                day=1;\r\n            }\r\n            else{\r\n                day=0;\r\n            }\r\n            }\r\n        else if(dirn=='w'){\r\n            hr-=hr_change;\r\n            min-=min_change;\r\n            \/\/Adjusting min and\/or hr in case of underflow\r\n            if (min<0){\r\n                min=min+60;\r\n                hr-=1;\r\n            }\r\n            else{\r\n                min=min;\r\n            }\r\n            if (hr<0){\r\n                hr=hr+24;\r\n                day= -1;\r\n            }\r\n            else{\r\n                day=0;\r\n            }\r\n\r\n\r\n        }\r\n\r\n        printf(\"Arrival time hour: %d\\n\",hr);\r\n        printf(\"Arrival time minute: %d\\n\",min);\r\n\r\n        switch(day){\r\n        case -1:\r\n            printf(\"Arrival day: previous day\\n\");\r\n            break;\r\n        case 0:\r\n            printf(\"Arrival day: same day\\n\");\r\n            break;\r\n        case 1:\r\n            printf(\"Arrival day: next day\\n\");\r\n            break;\r\n        }\r\n    }\r\n    else{\r\n        printf(\"Starting time is invalid.\\n\");\r\n    }\r\n\r\nreturn 0;\r\n}"
                },
                {
                    "Question":"The litres of fuel sold on a day depends on which day of the week it is. Consider Monday as\r\nDay 1, Tuesday as Day 2, ....., Sunday as Day 7. Let s be the number litres of fuel sold on a day\r\nand v be the number of vehicles sighted on that day across the highway. The number of litres\r\ncan also be a fraction.\r\n\r\n(A) For Monday, s is given by one-third of the number of vehicles sighted in the highway across,\r\ni.e v\r\n(B) For Wednesday, s is 2v\/7, rounded off to the nearest lower integer.\r\n(C) For Tuesday, Thursday, and Friday, s is v\r\n2 + 2v\r\n\r\n(D) For the weekends, s is thrice the formula as that used for Tuesday\r\nTake the day (1 to 7) and v as input and calculate the amount of fuel sold s on that day, and\r\ndisplay it. Also calculate the total price of the fuel sold on that day by assuming that the price\r\nof fuel = Rs 120\/litre and the GST on the fuel as 25% on the base price. You HAVE to use\r\n\u2018switch-case\u2019 for this question.\r\n\r\nExample:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nDay: 3\r\nVehicles sighted: 100\r\nOutput:\r\nFuel sold \u2018s\u2019: 28\r\nTotal price: 4200\r\n[Reason: 28*120 + 25% GST on (28*120)]",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\nfloat s,price,GST; \/\/  declaring variables\r\nint v,day;         \/\/declaring variables  \r\nprintf(\"give the value of day in which you want to calculate the required value of question\\n\"); \r\nprintf(\"Consider Monday as Day 1, Tuesday as Day 2, ....., Sunday as Day 7\\n\");\r\nscanf(\"%d\",&day); \/\/taking value from keyboard\r\n\r\nswitch(day){\r\n    case 1: printf(\"the day is Monday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);      \/\/taking the value of day from keyboard\r\n            s=v*0.33333;         \/\/calculating amount of litres according to question\r\n            printf(\"the amount of fuel sold on that day is %f litres \\n\",s);\r\n            price=(s*120)*1.25; \/\/calculating price according to queston\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;              \/\/breaking the switch so that it dosent run further.\r\n\r\n    case 2: printf(\"the day is Tuesday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=pow(v,2)+v*2;\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 3: printf(\"the day is Wednesday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=floor((2*v)*0.142857); \/\/it was only mentioned to give the lowest nearest integer for wednesday or else i would have added floor to every output.\r\n            printf(\"the amount of fuel sold on that day is %3.0f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 4: printf(\"the day is Thursaday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=pow(v,2)+v*2;\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 5: printf(\"the day is Friday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=pow(v,2)+v*2;\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 6: printf(\"the day is Saturday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=3*(pow(v,2)+2*v);\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n\r\n    case 7: printf(\"the day is Sunday\\n give the value of number of vehicles spoted in highway \\n\");\r\n            scanf(\"%d\",&v);\r\n            s=3*(pow(v,2)+2*v);\r\n            printf(\"the amount of fuel sold on that day is %f litres\\n\",s);\r\n            price=(s*120)*1.25;\r\n            printf(\"the cost of fuel sold that day is %f rupees \\n\",price);\r\n            break;\r\n    default: printf(\"Such day dosent exist on earth, Please find a different planet......XD\");\r\n             break;\r\n\r\n}\r\n\/\/THANK YOU HAVE A GOOD DAY!\r\n\r\n\r\n\r\nreturn 0;\r\n}"
                },
                {
                    "Question": "Write a C program that will read the number of Kilometers travelled by a bike in a \r\nfloat type variable d, it will also read the liters of Petrol used and store in float \r\ntype variable f. It will then print the average fuel consumption Kilometers\/Liters \r\nup to two decimal places.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float d, f, avg;\r\n    printf(\"Please enter the number of Kilometres travelled by the bike:\\n\");\r\n    scanf(\"%f\",&d);\r\n    printf(\"Please enter the litres of Petrol used by the bike:\\n\");\r\n    scanf(\"%f\",&f);\r\n    avg=d\/f;\r\n    printf(\"The average fuel consumption of the bike is: %.2f Kilometres\/litre\\n\",avg);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program that will do the following:\r\ni. Read a temperature value in Fahrenheit scale from the keyboard in a variable F\r\nii. Convert the temperature value to its corresponding value in Centigrade scale \r\nand store it in a variable C\r\niii. Print the value of C in the display\r\n\r\nNote: the temperature values are real numbers. Also, they can be positive, \r\nnegative, or 0.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float C,F;\r\n    printf(\"Please enter the temperature value in Fahrenheit scale:\\n\");\r\n    scanf(\"%f\",&F);\r\n    C=(F-32)*5.0\/9.0;\r\n    printf(\"The temperature in Celsius scale is: %f C\\n\",C);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program which reads the total number of days and finds out the \r\nnumber of years, weeks and days. Ignore leap year. A year has 365 days, and \r\nthe week has 7 days.\r\n\r\nExample Test Data :\r\nNumber of days: 1329\r\nExpected Output :\r\nYears: 3\r\nWeeks: 33\r\nDays: 3",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    int days, years, days2, days3, weeks;\r\n    printf(\"Please enter the number of days:\\n\");\r\n    scanf(\"%d\",&days);\r\n    years= days\/365;\r\n    days2=days%365;\r\n    weeks=days2\/7;\r\n    days3=days2%7;\r\n    printf(\"Years: %d\\n\",years);\r\n    printf(\"Weeks: %d\\n\",weeks);\r\n    printf(\"Days: %d\\n\",days3);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program which reads the marks of a student in Physics, Chemistry, and Mathematics, \nand stores them in integer variables p, c, m. \nThe program should print (Eligible\/Not Eligible) based on \nthe following eligibility criteria for admission to a degree course:\r\nMarks in Maths >=65\r\nMarks in Phy >=55\r\nMarks in Chem>=50\r\nTotal in all three subject >=190 or Total in Math and Physics >=140",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    int p,c,m;\r\n    printf(\"Please enter the marks in Physics:\\n\");\r\n    scanf(\"%d\",&p);\r\n    printf(\"Please enter the marks in Chemistry:\\n\");\r\n    scanf(\"%d\",&c);\r\n    printf(\"Please enter the marks in Mathematics:\\n\");\r\n    scanf(\"%d\",&m);\r\n\r\n    if (m>=65 && p>=55 && c>=50 && ((p+c+m)>=190 || (m+p)>=140))\r\n    {\r\n        printf(\"Eligible\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Not Eligible\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program to read the coordinates (x, y) (in Cartesian system) (float \r\nvalues) of a point and find the quadrant to which it belongs (Quadrant -I, \r\nQuadrant -II, Quadrant -III, Quadrant -IV). Assume that the point does not lie on \r\nany of the axes. The quadrants are numbered from 1st to 4th as follows: (where \r\nthe signs of the (x, y) coordinates are I(+,+), II (\u2212,+), III (\u2212,\u2212), and IV (+,\u2212)",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    float x,y;\r\n    printf(\"Please enter the x coordinate:\\n\");\r\n    scanf(\"%f\",&x);\r\n    printf(\"Please enter the y coordinate:\\n\");\r\n    scanf(\"%f\",&y);\r\n\r\n    \/\/it is given that the point does not lie on any axes\r\n\r\n    if (x>0)\r\n    {\r\n        if (y>0) \/\/both x and y are +\r\n        {\r\n           printf(\"The point lies in Quadrant 1.\\n\");\r\n        }\r\n        else \/\/x is +, y is -\r\n        {\r\n            printf(\"The point lies in Quadrant 4.\\n\");\r\n        }\r\n\r\n    }\r\n    else if (y>0) \/\/x is - and y is +\r\n    {\r\n        printf(\"The point lies in Quadrant 2.\\n\");\r\n    }\r\n    else \/\/ both x and y are -\r\n        {\r\n            printf(\"The point lies in Quadrant 3.\\n\");\r\n        }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program that reads the length (integers) of three sides of a triangle \r\n(variables a, b, c) and prints whether a triangle is Equilateral, Isosceles or Scalene.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    int a,b,c;\r\n    printf(\"Please enter the lengths of sides of the triangle:\\n\");\r\n    scanf(\"%d%d%d\",&a,&b,&c);\r\n\r\n    if (a==b && b==c)\r\n    {\r\n        printf(\"It is an Equilateral Triangle.\\n\");\r\n    }\r\n    else if (a==b || b==c || c==a)\r\n        {\r\n            printf(\"It is an Isosceles Triangle.\\n\");\r\n        }\r\n    else\r\n    {\r\n        printf(\"It is a Scalene Triangle.\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Compute the perimeter of a triangle given its coordinates of its three\r\nvertices (to be read).\r\nInput data set (coordinates of three vertices of a triangle)\r\n\r\n(i) (10,5), (-5,3), (2,2)\r\n(ii) (1,2), (5,5), (7,6.5)\r\n(iii) (0,0,), (5,0), (2.5, 5)",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nfloat distance(float x1,float y1,float x2,float y2)\r\n{\r\n    float c;\r\n    c=sqrt(pow((x2-x1),2)+pow((y2-y1),2));\r\n\r\n    return c;\r\n}\r\n\r\nint main()\r\n{\r\n    float x1,x2,x3,y1,y2,y3,ans;\r\n\r\n    printf(\"Enter the co-ordinates of the first point.\\n\");\r\n    scanf(\" %f %f\",&x1,&y1);\r\n\r\n    printf(\"Enter the co-ordinates of the second point.\\n\");\r\n    scanf(\" %f %f\",&x2,&y2);\r\n\r\n    printf(\"Enter the co-ordinates of the third point.\\n\");\r\n    scanf(\" %f %f\",&x3,&y3);\r\n\r\n    ans=distance(x1,y1,x2,y2)+distance(x2,y2,x3,y3)+distance(x3,y3,x1,y1);\r\n\r\n    printf(\"The perimeter of the triangle is %.2f.\\n\",ans);\r\n\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "Compute the compound interest of a principal amount p (to be read) at an\r\n                    interest rate of 5.5% for n (to be read) years.\r\n                    Input data set:\r\n                    (i) p=10000, n=4\r\n                    (ii) p=4563, n=3",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    float p;\r\n    float n;\r\n\r\n    printf(\"Enter the principle amount.\\n\");\r\n    scanf(\"%f\",&p);\r\n    printf(\"Enter the number of years.\\n\");\r\n    scanf(\"%f\",&n);\r\n\r\n    float sum=p*pow(1.055,n);\r\n    float interest=sum-p;\r\n\r\n    printf(\"The interest is %.2f.\",interest);\r\n\r\n    return 0;\r\n}"
                },{
                    "Question": "Consider a resistive circuit (shown in a Figure overleaf) where a\r\nresistance R1 is connected with two resistances R2 and R3 connected in parallel.\r\nA D.C. source E is applied across this load. Compute the power dissipated in\r\neach resistance, and the total power consumed by the circuit. Assume the values\r\nof resistance given in ohm, power source in Volt, and power should be\r\nexpressed in Watt. Write a program which will read the values of resistances\r\nand power source and print the results (as asked) of the computation.\r\n\r\n(i) R1=5 KW, R2=10 KW, R3=20 KW, E=50 V\r\n(ii) R1=15 KW, R2=7 KW, R3=8 KW, E=12 V",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n    float r1,r2,r3,e;\r\n    printf(\"Enter the values of R1,R2 and R3.\\n\");\r\n    scanf(\"%f%f%f\",&r1,&r2,&r3);\r\n    printf(\"Enter the power source E.\\n\");\r\n    scanf(\"%f\",&e);\r\n\r\n    float rp=(r2*r3)\/(r2+r3);\r\n    float R=r1+rp;\r\n    float i=e\/R;\r\n\r\n    printf(\"The power consumed in R1 is %f.\\n\",i*i*r1);\r\n    printf(\"The power consumed in R2 is %f.\\n\",((r3*i)\/(r2+r3))*((r3*i)\/(r2+r3))*r2);\r\n    printf(\"The power consumed in R3 is %f.\\n\",((r2*i)\/(r2+r3))*((r2*i)\/(r2+r3))*r3);\r\n    printf(\"The power consumed in the circuit is %f.\\n\",i*i*R);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C-program which evaluates the value of the following\r\nfunction as given below for an input real number x (to be read):\r\nf(x)= x\r\n4\r\n-36x3\r\n+4x-3\r\n\r\nThe program also computes the sign of the derivative of the\r\nfunction (f\u2019(x)). If the derivative is positive, it prints \u20181\u2019. If it is\r\nnegative, prints \u2018-1\u2019. Otherwise, it prints \u20180\u2019. Run your program to\r\nprovide results for the following input numbers.\r\n-5.4, 2.4, 3.0, 5.0, and 38.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    float a;\r\n    printf(\"Enter the value of x.\\n\");\r\n    scanf(\"%f\",&a);\r\n    printf(\"%.1f\\n\",a);\r\n    float ans=pow(a,4)-36*pow(a,3)+4*a-3;\r\n    printf(\"The value of f(x) at x=%.1f is %.1f.\\n\",a,ans);\r\n\r\n    float der=4*pow(a,3)-108*pow(a,2)+4;\r\n    if(der>0){\r\n        printf(\"1\\n\");\r\n    }\r\n    else if(der<0){\r\n        printf(\"-1\\n\");\r\n    }\r\n    else{\r\n        printf(\"0\\n\");\r\n    }\r\n\r\n    return 0;\r\n}"
                },{
                    "Question": "Write a C-program which takes three distinct points (in 2-D\r\ncoordinates) as inputs and checks whether they form a triangle or\r\nstraight line. If they form a triangle, it prints \u201CFormed triangle\u201D and\r\nprints its area. If they form a straight line, it prints \u201CFormed Straight\r\nLine\u201D and prints the length between two end points. If any pair of\r\npoints are non-distinct, it prints coordinates of that point, and notifies\r\n\u201CNon-distinct input point\u201D and prints the length between two distinct\r\npoints, if any.\r\n\r\nProvide results for the following coordinate points:\r\n(2,3), (4,5), (10,23)\r\n(1,2), (4,8), (9,18)\r\n(0,0), (1,3), (1,3)",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nfloat dist(int x1,int y1,int x2,int y2){\r\n    float d=sqrt(pow((float)(x1-x2),2)+pow((float)(y1-y2),2));\r\n    return d;\r\n}\r\n\r\nfloat area(int x1,int y1,int x2,int y2,int x3,int y3){\r\n    float ar=0.50*(x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2));\r\n    if (ar>=0){\r\n        return ar;\r\n    }\r\n    return ar*(-1);\r\n}\r\n\r\nint main(){\r\n\r\n    int x1,x2,x3,y1,y2,y3;\r\n\r\n    printf(\"Enter the coordinate of the first point:\\n\");\r\n    scanf(\"%d%d\",&x1,&y1);\r\n    printf(\"%d %d\\n\",x1,y1);\r\n\r\n    printf(\"Enter the coordinate of the second point:\\n\");\r\n    scanf(\"%d%d\",&x2,&y2);\r\n    printf(\"%d %d\\n\",x2,y2);\r\n\r\n    printf(\"Enter the coordinate of the third point:\\n\");\r\n    scanf(\"%d%d\",&x3,&y3);\r\n    printf(\"%d %d\\n\",x3,y3);\r\n\r\n    if((x1==x2 && y1==y2) || (x2==x3 && y2==y3) || (x3==x1 && y3==y1)){\r\n        printf(\"Non-distinct input point\\n\");\r\n        float max;\r\n        max=dist(x1,y1,x2,y2);\r\n        if(max<dist(x2,y2,x3,y3)){\r\n            max=dist(x2,y2,x3,y3);\r\n        }\r\n        if(max<dist(x3,y3,x1,y1)){\r\n            max=dist(x3,y3,x1,y1);\r\n        }\r\n        if(max!=0){\r\n            printf(\"Distance between distinct points: %.2f\\n\",max);\r\n        }\r\n    }\r\n    else{\r\n        float ar=area(x1,y1,x2,y2,x3,y3);\r\n\r\n        if(ar==0){\r\n            printf(\"Formed Straight Line\\n\");\r\n            float max;\r\n            max=dist(x1,y1,x2,y2);\r\n            if(max<dist(x2,y2,x3,y3)){\r\n                max=dist(x2,y2,x3,y3);\r\n            }\r\n            if(max<dist(x3,y3,x1,y1)){\r\n                max=dist(x3,y3,x1,y1);\r\n            }\r\n            printf(\"Distance between end points: %.2f\\n\",max);\r\n        }\r\n        else{\r\n            printf(\"Formed triangle \\n Area of the triangle is %.2f\\n\",ar);\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                    
                },{
                    "Question":"Write a C-program and implement the function given in the\r\nfollowing diagram.\r\n\r\nProvide functional values at the following values of x\r\nx= 5, 15, 25, 40, and 60.\r\n\r\nN.B. All your programs may be tested by other input values.",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    float x;float ans;\r\n    printf(\"Enter the value of x:\\n\");\r\n    scanf(\"%f\",&x);\r\n    printf(\"%.2f\\n\",x);\r\n\r\n    if(x>50 || x<0){\r\n        printf(\"x is out of domain.\\n\");\r\n        return 0;\r\n    }\r\n\r\n    if(x>=0 && x<=10){\r\n        ans=x;\r\n    }\r\n    else if(x>10 && x<30){\r\n        ans=sqrt(40*x-x*x-200)+20;\r\n    }\r\n    else if(x>=30 && x<=50){\r\n        ans=25-x\/2;\r\n    }\r\n\r\n    printf(\"The value of f(x) is %.2f.\\n\",ans);\r\n\r\n    return 0;\r\n}"
                }
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question": "What is the output of the following C program when the input N is the number formed by the last \r\ntwo digits of your roll number? Explain the execution.\r\n\r\n#include <stdio.h> \r\nint main() {\r\n     int x, N;\r\n     scanf(\"%d\", &N);\r\n     printf(\"%d\\n\", N); \r\n     N \/= 2;\r\n     x = (N>15) ? (N=4): (N=12);\r\n     if (x < 10) \r\n            if (x < 15) printf(\"A\");\r\n     else printf(\"B\");\r\n     printf(\"C\");\r\n}",
                    "Answer": "Let input is 22. N\/=2 gives a value of N = 11\r\nNow for the statement x = (N>15)? (N=4):(N=12) as 11>15 is false N becomes 12 also x is 12\r\nNow x<10 is false. So the if (nested) and the linked else is not executed. So the output is:\r\n22\r\nc"
                },
                {
                    "Question": "Write a program that reads the volume, V, as a floating-point number. It then computes and prints \r\nthe radius of a sphere having volume V, and then computes and prints the height of a cylinder \nhaving the same radius and the same volume V. You may use math library functions if necessary. \r\n",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main(){\r\n    float v;\r\n    double r,h;\r\n    printf(\"Enter the volume of sphere: \");\r\n    scanf(\"%f\",&v);\r\n    r = pow((3\/(4.0*(22\/7.0))) * (double)v, (1.0\/3.0));\r\n    printf(\"Radius = %lf\\n\", r);\r\n    h = v\/((22\/7.0) * pow(r, 2.0));\r\n    printf(\"Height of the cylinder: %lf\\n\", h);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "The following C program aims to print the number of days from the date 1-1-y to the date 1-m-y, \r\nwhere yis a positive integer representing a year and m is an integer in the range 1 to 12 representing month. \nThe count should include 1-1-y but exclude 1-m-y. \nUnfortunately, the student who wrote this program made some mistakes. \nRearrange the lines of code so that it fulfils its objective correctly. Do not add any new statement. \nDo not modify any arithmetic. Explain why the rearranged code is correct.\r\n\r\n#include<stdio.h>\r\nint main(){\r\n    int days=0, is leap;\r\n    int m, y;\r\n    printf(\"Enter a month and year: \"); \r\n    scanf(\"%d %d\", &m, &y); \r\n    if ((m < 1) || (m >12) || (y < 1)) { \r\n        printf(\"Invalid input! \\n\");\r\n        return 1; \r\n    }\r\n\r\n    \/\/ adding an extra day if the year is leap\r\n    is_leap = (m>=3 && ( (y%4 == 0 && y%100 != 0) il y%400 == 0));\r\n    days= (is_leap)? (days+1):days;\r\n\r\n    switch (m) { \r\n        case 2: days+=31;\r\n        case 3: days += 28;\r\n        case 4: days += 31;\r\n        case 5: days += 30;\r\n        case 6: days += 31;\r\n        case 7: days += 30;\r\n        case 8: days += 31;\r\n        case 9: days += 31;\r\n        case 10: days += 30;\r\n        case 11: days += 31;\r\n        case 12: days += 30;\r\n    }\r\n\r\n    printf(\"Number of days between 1-1-%d and 1-%d-%d = %d\\n\", y, m, y, days);\r\n    return 0; \r\n}",
                    "Answer": "For the given code to work we will rearrange the switch case statements. As there is no break\r\nstatement, if a case is satisfied the no. of days go of adding of even the unrequired months. So the switch\r\ncase is to be written as :\r\n\r\nswitch(m) {\r\n          case 12: days+=30;\r\n          case 11: days+=31;\r\n          case 10: days+=30;\r\n          case 9: days+=31;\r\n          case 8: days+=31;\r\n          case 7: days+=30;\r\n          case 6: days+=31;\r\n          case 5: days+=30;\r\n          case 4: days+=31;\r\n          case 3: days+=30;\r\n          case 2: days+=31;\r\n       }"
                },
                {
                    "Question":"Consider the following program.\r\nint main() {\r\nint a = 13, b = 5, c = 7;\r\nfloat x; int y; char z;\r\nx = 4*4\/3*a\/b;\r\nprintf(\"X=%3.2f\",x);    (A)\r\ny = 3.0*b\/c\/a;\r\nprintf(\"Y = %d\",y);    (B)\r\na += a*a%2; a %= 2;\r\n(a)? printf(\"Good\") : printf(\"Nice\");    (C)\r\nreturn (0);\r\n}\r\nWhat value the program will print at (A), (B) and (C)?\r\n",
                    "Answer":" (A) X= 13.00\r\n(B) Y= 0\r\n(C) Nice\r\n"
                },
                {
                    "Question": "Write a program that reads three points, (x1, y1), (x2, y2), and (x3, yy3) and determines \nwhether they represent the vertices of a right-angled triangle. If so, \nthe program must identify the hypotenuse, and print the value of one of the angles in radians. \nYou may use appropriate library functions, but please include the necessary header files. \nYour program should have only the main() function.",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\nint main()\r\n{\r\n    int x1, y1, x2, y2, x3, y3;\r\n    printf(\"Enter coordinates of points: \\n\");\r\n    scanf(\"%d %d %d %d %d %d\", &x1, &y1, &x2, &y2, &x3, &y3);\r\n    \/\/ math -check lenght fo each side if a2 +b2 = c2\r\n    \/\/ c is hypotenuse\r\n\r\n    int a, b, c;\r\n    a = sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n    b = sqrt((x3 - x2) * (x3 - x2) + (y3 - y2) * (y3 - y2));\r\n    c = sqrt((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1));\r\n\r\n    if (c > b && c > a)\r\n    {\r\n        if (a * a + b * b == c * c)\r\n        {\r\n            printf(\"The hypotenuse is side between points 1 and 3, length %lf\", c);\r\n            printf(\"One angle is %lf\", asin((double)a \/ c));\r\n        }\r\n        else\r\n        {\r\n            printf(\"Not a right-angled triangle\");\r\n        }\r\n    }\r\n    else if (b > c && b > a)\r\n    {\r\n        if (c * c + a * a == b * b)\r\n        {\r\n            printf(\"Hypotenuse is between points 2 and 3, length %lf\", b);\r\n            print(\"One angle is %lf\", asin(a \/ b));\r\n        }\r\n        else\r\n        {\r\n            printf(\"Not a right angled triangle\");\r\n        }\r\n    }\r\n    else\r\n    {\r\n        if (b * b + c * c == a * c)\r\n        {\r\n            printf(\"Hypotenuse is between points 1 and 2, length %lf\", a);\r\n            printf(\"One angle is %lf\", asin(b \/ a));\r\n        }\r\n        else\r\n        {\r\n            printf(\"Not a right angled triangle\");\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"A giant is a person who is simultaneously the tallest and heaviest among a set of people. \nWrite a program that, given the heights and weights of 3 people (h1, h2, h3, W1, W2, W3), \noutputs whether any of them is a giant. The i-th person is a giant if h, 2 h, and w, >w, \nfor all je {1,2,3}, ji. Assume all heights and weights are positive floating point numbers. \nYour program should use only the ternary conditional operator?: and contain no if-else statements. \nYour program should have only the main() function. Do not use any library functions other than standard input and output.\n\nSample Output \n1 Heights of persons 1,2,3 : 4.5 5.8 5.7\n Weights of persons 1,2,3 : 50 90 100 There is no giant.",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    float h1, h2, h3, w1, w2, w3;\r\n    int check = 0;\r\n    printf(\"Heights of persons 1,2,3: \");\r\n    scanf(\"%f %f %f\", &h1, &h2, &h3);\r\n    printf(\"Weights of persons 1,2,3: \");\r\n    scanf(\"%f %f %f\", &w1, &w2, &w3);\r\n\r\n    (h1 >= h2 && h1 >= h3 && w1 >= w2 && w1 >= w3) ? (check = 1) : (check = 0);\r\n\r\n    (h2 >= h1 && h2 >= h3 && w2 >= w1 && w2 >= w3) ? (check = 2) : (check = 0);\r\n\r\n    (h3 >= h1 && h3 >= h2 && w3 >= w1 && w3 >= w2) ? (check = 2) : (check = 0);\r\n\r\n    (check) ? (printf(\"Person %d is giant\", check)) : (printf(\"No giant exists\"));\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program to compute and print the mean and variance of \n3n integers read 3 at a time. The program must read n and then the n triples sequentially \nusing only a constant number of variables, no arrays. After reading a triple, \nthe program must print the mean and variance for that triple. After all 3n integers are read, \nthe program should print the mean and variance of all the integers. \nThere should be only one main() function and no other function.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    int a,b,c,n;\r\n    float sum=0,sqr=0;\r\n    printf(\"Enter n:\");\r\n    scanf(\"%d\",&n);\r\n    for(int i=0; i<n,i++){\r\n        printf(\"Enter triplet\");\r\n        scanf(\"%d%d%d\",&a,&b,&c);\r\n        sum+ =a+b+c;\r\n        sqr+ =a*a+b*b+c*c;\r\n        printf(\"Mean of 3:%lf\",(a+b+c)\/3.0);\r\n        printf(\"\\nVariance of 3:%lf\",(a*a+b*b+c*c)\/3.0 - (a+b+c)*(a+b+c)\/9.0);\r\n        printf(\"Mean of all:%lf\",sum\/(3*n));\r\n        printf(\"\\nVariance of all:%lf\",sqr\/(3*n)-sum*sum\/(9*n*n));\r\n        return 0;\r\n    }\r\n\r\n}"
                } 
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question": "Part-I\r\nSubmit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\n1. Define a structure Player that will contain the following information of a cricket player (assume that\r\nthey are all currently playing): players name, country, date of birth, date of debut first class match,\r\nnumber of tests played, number of one day internationals (ODIs) played, number of centuries\r\nscored, number of half centuries scored, total runs scored in tests, total runs made in ODIs, number\r\nof wickets taken in test cricket, number of wickets taken in ODIs, etc. (you may add some more\r\nfields).\r\n2. Write a menu-based program to do the following to a list L of n elements of type Player. You may\r\ndecide how to store the list L, and you may store L in more than one data structures if required:\r\n    i) Given a list of Players, sort the structures according to the dictionary order of the player\r\n       names.\r\n       Take an input integer as the new number of elements for the list. If the new number is larger\r\n       than the old number by m, then the data of m new players have to be inserted and the final\r\n       list should be in dictionary order of the player names.\r\n       If the new size is less than the old size by m, then the last m player information have to be\r\n       deleted.\r\n       If the new size is equal to the old size, then no changes are needed.\r\n   ii) Write a recursive function to take as input a positive integer, and return the number of players\r\n       who have played at least those many one day internationals.\r\n   iii) Write a function to take as input a positive integer, and print the number of players who have\r\n       played at least those many one day internationals.\r\n  iv) Print (with proper indentation) the current list sorted in dictionary order of player names.\r\n       Depending on what is chosen by the user, the required operation is executed by the main function.\r\n\r\nYou can write your own functions wherever necessary, but proper commenting is required to explain\r\nthe purpose of the function.\r\nAlways minimize the time complexity of the program. Keep in mind that the list can be edited at any\r\ntime and may require recomputation unless stored smartly.\r\nFunctions from string.h can be used.",
                    "Answer": "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\n\/\/declaring the player structure with its members\r\nstruct Player {\r\n    char name[100];\r\n    char country[100];\r\n    char dob[9];\r\n    char date_debut[9];\r\n    int n_tests;\r\n    int n_odi;\r\n    int n_cent;\r\n    int n_half_cent;\r\n    int tot_test;\r\n    int tot_odi;\r\n    int wicket_test;\r\n    int wicket_odi;\r\n    struct Player* next;\r\n};\r\n\r\n\/\/function to take input new number of players in the list and modifying the list accordingly\r\nstruct Player* input(struct Player* r){\r\n    int k;\r\n    printf(\"Enter the new number of elements of the list: \");\r\n    scanf(\"%d\",&k);\r\n    int n = 0; \/\/n stores the number of elements in the original list\r\n    struct Player* p = r;\r\n    \/\/calculating n\r\n    while(p!=NULL){\r\n        n++;\r\n        p = p->next;\r\n    }\r\n\r\n    \/\/checking if elements need to be added or deleted\r\n    if(k>n){\r\n        \/\/if we need addition\r\n        printf(\"Enter the new elements:\\n\");\r\n        for(int i=0;i<k-n;i++){\r\n            \/\/new node\r\n            struct Player* node = (struct Player*) malloc(sizeof(struct Player));\r\n            printf(\"\\n\");\r\n            \/\/taking input new player details\r\n            printf(\"Enter the name of the player : \");\r\n            scanf(\"%s\", node->name);\r\n            printf(\"Enter the country of the player : \");\r\n            scanf(\"%s\", node->country);\r\n            printf(\"Enter the date of birth of the player : \");\r\n            scanf(\"%s\", node->dob);\r\n            printf(\"Enter the date of debut first class match of the player : \");\r\n            scanf(\"%s\", node->date_debut);\r\n            printf(\"Enter the number of tests played by the player : \");\r\n            scanf(\"%d\", &(node->n_tests));\r\n            printf(\"Enter the number of one day internationals (ODIs) played by the player : \");\r\n            scanf(\"%d\", &(node->n_odi));\r\n            printf(\"Enter the number of centuries scored by the player : \");\r\n            scanf(\"%d\", &(node->n_cent));\r\n            printf(\"Enter the number of half centuries scored the player : \");\r\n            scanf(\"%d\", &(node->n_half_cent));\r\n            printf(\"Enter the total runs scored in tests by the player : \");\r\n            scanf(\"%d\", &(node->tot_test));\r\n            printf(\"Enter the total runs made in ODIs by the player : \");\r\n            scanf(\"%d\", &(node->tot_odi));\r\n            printf(\"Enter the number of wickets taken in test cricket by the player : \");\r\n            scanf(\"%d\", &(node->wicket_test));\r\n            printf(\"Enter the number of wickets taken in ODIs by the player : \");\r\n            scanf(\"%d\", &(node->wicket_odi));\r\n            if(r==NULL){\r\n                \/\/if this node is the first node\r\n                r = node;\r\n                r->next = NULL;\r\n            }else{\r\n                p = r;\r\n                struct Player* prev;\r\n                while(p!=NULL){\r\n\r\n                    \/\/changing upperCase to lowerCase for comparison\r\n                    char name1[100];\r\n                    char name2[100];\r\n                    int i = 0;\r\n                    while(p->name[i]!='\\0'){\r\n                        if(p->name[i] >='A' && p->name[i]<='Z'){\r\n                            name1[i] = p->name[i]-'A'+'a';\r\n                        }else{\r\n                            name1[i] = p->name[i];\r\n                        }\r\n                        i++;\r\n                    }\r\n                    name1[i] = '\\0';\r\n                    i = 0;\r\n                    while(node->name[i]!='\\0'){\r\n                        if(node->name[i] >='A' && node->name[i]<='Z'){\r\n                            name2[i] = node->name[i]-'A'+'a';\r\n                        }else{\r\n                            name2[i] = node->name[i];\r\n                        }\r\n                        i++;\r\n                    }\r\n                    name2[i] = '\\0';\r\n                    if(strcmp(name1, name2)>0){\r\n                        break;\r\n                    }\r\n                    prev = p;\r\n                    p = p->next;\r\n                }\r\n                \/\/new node needs to added between prev and p\r\n                if(p==r){\r\n                    \/\/addition at start\r\n                    r = node;\r\n                    r->next = p;\r\n                }else if(p==NULL){\r\n                    \/\/addition at end\r\n                    prev->next = node;\r\n                    node->next = NULL;\r\n                }else{\r\n                    \/\/addition in between\r\n                    prev->next = node;\r\n                    node->next = p;\r\n                }\r\n            }\r\n        }\r\n    }else if(k<n){\r\n        \/\/deleting extra nodes at the end\r\n        int counter = 0;\r\n        struct Player* prev;\r\n        p = r;\r\n        while(counter!=k){\r\n            prev = p;\r\n            p = p->next;\r\n            counter++;\r\n        }\r\n        while(prev->next!=NULL){\r\n            prev->next = p->next;\r\n            free(p);\r\n            p = prev->next;\r\n        }\r\n        printf(\"Done deleting extra player records\\n\");\r\n    }else{\r\n        printf(\"The list already contains this many players\\n\");\r\n    }\r\n    return r;\r\n}\r\n\r\n\/\/this function counts required ODIs more than or equal to n\r\nint one_day_counter(int n, struct Player* node, int odi){\r\n    if(node!=NULL){\r\n        if(node->n_odi >= n){\r\n            return(one_day_counter(n, node->next, odi+1)); \/\/recursive call with odi+1\r\n        }\r\n        return(one_day_counter(n, node->next, odi));\r\n    }\r\n    return odi;\r\n}\r\n\r\n\/\/this function calls the previous one and just prints the value\r\nvoid one_day_printer(int n, struct Player* r){\r\n    struct Player* p = r;\r\n    printf(\"The number of players who have played atleast %d one day internationals are: %d\\n\", n, one_day_counter(n,p,0));\r\n}\r\n\r\n\/\/this function prints details of all players\r\nvoid printer(struct Player* r){\r\n    struct Player* p = r;\r\n    printf(\"The player informations are:\\n\\n\");\r\n    while(p!=NULL){\r\n        printf(\"The name of the player is: %s\\n\", p->name);\r\n        printf(\"The country of the player is: %s\\n\", p->country);\r\n        printf(\"The date of birth of the player is: %s\\n\", p->dob);\r\n        printf(\"The date of debut first class match of the player is: %s\\n\", p->date_debut);\r\n        printf(\"The number of tests played by the player is: %d\\n\", p->n_tests);\r\n        printf(\"The number of one day internationals (ODIs) played by the player is: %d\\n\", p->n_odi);\r\n        printf(\"The number of centuries scored by the player is: %d\\n\", p->n_cent);\r\n        printf(\"The number of half centuries scored the player is: %d\\n\", p->n_half_cent);\r\n        printf(\"The total runs scored in tests by the player is: %d\\n\", p->tot_test);\r\n        printf(\"The total runs made in ODIs by the player is: %d\\n\", p->tot_odi);\r\n        printf(\"The number of wickets taken in test cricket by the player is: %d\\n\", p->wicket_test);\r\n        printf(\"The number of wickets taken in ODIs by the player is: %d\\n\", p->wicket_odi);\r\n        printf(\"\\n\");\r\n        p = p->next;\r\n    }\r\n}\r\n\r\nint main(){\r\n    \/\/declaring head\r\n    struct Player* head = (struct Player*) malloc(sizeof(struct Player));\r\n    head = NULL;\r\n    \/\/driver code\r\n    while(1){\r\n        int choice;\r\n        printf(\"\\nDo you want to proceed? Press 1 for yes and 2 for no: \");\r\n        scanf(\"%d\",&choice);\r\n        if(choice == 1){\r\n            printf(\"Choose one of the following operations to perform :\\n\");\r\n            printf(\"1. To change the size of the list of players\\n\");\r\n            printf(\"2. To print the number of players who have played at least a certain number of ODIs\\n\");\r\n            printf(\"3. To print the list of all players present\\n\");\r\n            printf(\"Enter your choice: \");\r\n            int n;\r\n            scanf(\"%d\",&n);\r\n            switch(n) {\r\n                case 1: head = input(head);\r\n                break;\r\n\r\n                case 2: printf(\"Enter the minimum number of ODIs you want: \");\r\n                int num;\r\n                scanf(\"%d\",&num);\r\n                one_day_printer(num, head);\r\n                break;\r\n\r\n                case 3: printer(head);\r\n                break;\r\n\r\n                default: printf(\"Enter a correct choice!!\\n\");\r\n            }\r\n        }else if(choice == 2){\r\n            printf(\"Thank You!!\");\r\n            break;\r\n        }else{\r\n            printf(\"Please enter 1 or 2\\n\");\r\n        }\r\n    }\r\n    return 0;\r\n}"
                }
            ]
        }
    ],
    "loops": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question": "A user executes a program and it asks to enter an integer. \nWhen s(he) enters 7 then the program prints the following 7*7 square matrix. \nWrite a C program which can read any positive integer (<=7) and perform this. \nUse loop to execute this operation and achieve proper alignment.\r\n\r\n1   2   3     4     5.      6.        7\r\n2   4 12   48 240 1440 10080\r\n3   6 18   72 360 2160 15120\r\n4   8 24   96 480 2880 20160\r\n5 10 30 120 600 3600 25100\r\n6 12 36 144 720 4320 30240\r\n7 14 42 168 840 5040 35280",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    \/\/ This a program to form a square matrix of order n (which is a positive integer less than 7)\r\n    int n,i,k,j;\r\n    scanf(\"%d\",&n);\r\n    for(i=1;i<=n;i++)\r\n    {\r\n        printf(\"%7d  \",i);\r\n    }\r\n    printf(\"\\n\");\r\n    for(k=2;k<=n;k++)\r\n    {\r\n        j=1;\r\n        for(i=k;j<=n;i=i*j)\r\n        {\r\n            printf(\"%7d  \",i);\r\n            j++;\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n}"
                },
                {
                    "Question":"Compute the following function given a value of x ( a real number) with the accuracy of 10^-6\r\n:f(x)= 1-x^2\/2! + x^4\/4! \u2013x^6\/6!+.....\r\n\r\nProvide outputs for x= 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9 and 1.0.\r\nFor each value of x print also the number of iterations required to converge with the said accuracy.\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n  double x, sum=0.0, n=1.0;\r\n   scanf(\"%lf\",&x);\r\n   int i;\r\n   for(i=1;n>0.000001||n<-0.000001;i++){\r\n        sum+= n;\r\n       n=-n*x*x\/(2*i)\/(2*i-1);\r\n\r\n   }\r\n   printf(\"iterations: %d\\n\",i);\r\n   printf(\"sum: %lf\\n\\n\",sum);\r\n\r\n}\r\n"
                },
                {
                    "Question" : "Submit one (single) C program. \r\n    Definitions \r\n\r\n        1. A positive integer is called a PDS number if \nthe number is equal to the sum of the factorial of its digits. \nFor example, 1 (1 = 1!), 2 (2 = 2!), 145 (145 = 1! + 4! + 5!) are IIT numbers. \r\n\r\n        2. A positive integer is called a LAB number if \nthe number is equal to the sum of its divisor except itself. \nFor example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are KGP numbers. \r\n\r\n        3. An n-bow pattern is a pattern of height 2n-1, where \nthe first row has n stars, \nsecond row has n\u2014 1 stars, etc., n-1th row has 2 stars, nth row has 1 star, \nn+1th row has 2 stars, etc., and 2n-1th row has n stars.\r\n        ***\r\n        **\r\n        *\r\n        **\r\n        ***\r\n        The above pattern is a 3-bow pattern. \r\n\r\n      Write a C program to perform the following tasks. \r\n      1. Take as input an integer n. \r\n      2. Print all PDS numbers from 1 to n. \r\n      3. Print all LAB numbers from 1 to n. \r\n      4. If the number n is both a PDS number and a LAB number then print an n-bow pattern.\r\n    You may need to use math library function : #include <math.h> \r\n    If you want to compile useing the terminal then use the command gcc.\/program.c -lm \r\nProper commenting, indentation and output commands carry marks.",
                    "Answer" : "#include <stdio.h>\r\n#include<math.h>\r\nint main ()\r\n{\r\n  \r\nlong int num, n, a, b, i, j, prod, sum = 0, lab, k, t, l;\t\/\/ variable define\r\n  printf (\"Enter Number: \");\r\n  \r\nscanf (\"%ld\", &num);\t\t\/\/ taking input\r\n  if (num == 0)\r\n    \r\n    {\r\n      \r\nprintf (\"Enter valid number\");\r\n    \r\n}\r\n  \r\n\/\/loop 1 for 1 to N\r\n    else\r\n    {\r\n      \r\nfor (b = 1; b <= num; b++)\r\n\t\r\n\t{\r\n\t  \r\nn = b;\t\t\/\/ since we want changes for a specific loop only\r\n\t  sum = 0;\t\t\/\/ redefine when the loop starts again\r\n\t  lab = 0;\t\t\/\/ redefine when the loop starts again\r\n\t  \/\/loop for finding pds number\r\n\t  for (i = n; n > 0; n = n \/ 10)\r\n\t    \r\n\t      \/\/ reverse loop because number will keep on decreasing, n\/10 because then no need to worry about number of digits in the number\r\n\t    {\r\n\t      \r\nprod = 1;\t\/\/ for product\r\n\t      for (j = 1; j <= n % 10; j++)\r\n\t\t\r\n\t\t  \/\/n%10 to take last digit of the number\r\n\t\t  \/\/factorial loop\r\n\t\t{\r\n\t\t  \r\nprod = prod * j;\r\n\t\t\r\n}\r\n\t      \r\nsum = sum + prod;\t\/\/ for summing of factorial of digits\r\n\t    \r\n}\r\n\t  \r\n\/\/ print pds number\r\n\t    if (sum == b)\r\n\t    \r\n\t    {\r\n\t      \r\nprintf (\" PDS number : %ld\\n\", b);\r\n\t    \r\n}\r\n\t\r\n}\r\n      \r\nfor (b = 1; b <= num; b++)\r\n\t\r\n\t{\r\n\t  \r\n\/\/ loop for finding lab number\r\n\t    lab = 0;\r\n\t  \r\nfor (a = 1; a < b; a++)\r\n\t    \r\n\t    {\r\n\t      \r\nif (b % a == 0)\r\n\t\t\r\n\t\t{\t\t\/\/ ch\r\n\t\t  lab = lab + a;\r\n\t\t\r\n}\r\n\t    \r\n}\r\n\t  \r\n\/\/print lab number\r\n\t    if (lab == b)\r\n\t    \r\n\t    {\r\n\t      \r\nprintf (\"LAB number : %ld\\n\", b);\r\n\t    \r\n}\r\n\t\r\n \r\n}\r\n      \r\n\t\/\/loop for n-star pattern\r\n\/\/ running only for  checking if n is pds and lab number or not, because it is to be printed for n only\r\n\t\r\nl = num;\r\n      \r\nfor (i = l; l > 0; l = l \/ 10)\r\n\t\r\n\t  \/\/ reverse loop because number will keep on decreasing, n\/10 because then no need to worry about number of digits in the number\r\n\t{\r\n\t  \r\nprod = 1;\r\n\t  \r\nfor (j = 1; j <= l % 10; j++)\r\n\t    \r\n\t      \/\/n%10 to take last digit of the number\r\n\t      \/\/factorial loop\r\n\t    {\r\n\t      \r\nprod = prod * j;\r\n\t    \r\n}\r\n\t  \r\nsum = sum + prod;\t\/\/ for summing of digits\r\n\t\r\n}\r\n      \r\n\/\/ print pds number\r\n\tif (sum == num)\r\n\t\r\n\t{\r\n\t  \r\nprintf (\"pds number : %ld\\n\", b);\r\n\t\r\n}\r\n      \r\n \r\n \r\n\/\/ loop for finding lab number\r\n\tfor (a = 1; a < num; a++)\r\n\t\r\n\t{\r\n\t  \r\nif (num % a == 0)\r\n\t    \r\n\t    {\r\n\t      \r\nlab = lab + a;\t\/\/ sum of divisors\r\n\t    }\r\n\t\r\n}\r\n      \r\n\/\/print lab number\r\n\tif (lab == num)\r\n\t{\r\n\t  \r\nprintf (\"lab number : %ld\\n\", b);\r\n\t\r\n}\r\n      \r\n\t\/\/ check if n is lab and pds number\r\n\tif (lab == num && sum == num)\r\n\t\r\n\t{\r\n\t  \r\n \r\nfor (int t = 0; t < b; t++)\r\n\t    \r\n\t    {\r\n\t      \r\n\/\/for decreasing star\r\n\t\tfor (int k = 1; k <= num - t; k++)\r\n\t\t\r\n\t\t{\r\n\t\t  \r\nprintf (\"*\");\r\n\t\t\r\n} \r\n\t\t\/\/ to move to next line after printing set of stars\r\n\t\t\r\nprintf (\"\\n\");\r\n\t    \r\n} \r\n\t    \/\/ for increasing star\r\n\t    for (int t = 1; t < num; t++)\r\n\t    \r\n\t    {\r\n\t      \r\n \r\nfor (int k = 1; k <= t + 1; k++)\r\n\t\t\r\n\t\t{\r\n\t\t  \r\nprintf (\"*\");\r\n\t\t\r\n} \r\n\t\t\/\/ to move to next line after printing set of stars\r\n\t\tprintf (\"\\n\");\r\n\t\r\n}}\r\n    \r\n} \r\nreturn 0;\r\n\r\n \r\n \r\n \r\n}\r\n"
                },
                {
                    "Question":"Given a numerator and a denominator as input,\r\nyour program has to print the sequence representing the continued fraction for as shown in the\r\nexamples. You can use one extra integer variable, say ; use of more extra variables will attract penalty.\r\nYou should use a loop because the sequence may be arbitrarily long.",
                    "Answer":"\/\/ Continued fraction for a\/b.\r\n\r\n#include<stdio.h>\r\n\r\nint main(){\r\n  int a, b, c=0; \r\n  \r\n  printf(\"Enter a and b: \"); \r\n  scanf(\"%d%d\", &a, &b);\r\n  \r\n  do{\r\n    if(c==0)\r\n      printf(\"Continued fraction = [%d; \", a\/b); \r\n    else  \r\n      printf(\"%d, \", a\/b); \r\n    c = a%b; \r\n    a = b, b = c;\r\n  }while(a>1 && b>0);\r\n  \r\n  printf(\"\\b\\b].\\n\");\r\n  return 0;\r\n}"
                },
                {
                    "Question": "Note that\r\n(1)4^2mod23=16;\r\n(2)4^3mod23=18;\r\n(3)4^4mod23=3;\r\n(4)4^5mod23=12;\r\n(5)4^6mod23=2;\r\n(6)4^7mod23=8;\r\n(7)4^8mod23=9;\r\n(8)4^9mod23=13;\r\n(9)4^10mod23=6; and\r\n(10) 4^11mod23=1\r\nbut no power of 4 covers integers 4, 5, 7, 10, 11, 14, 15, 17, 19, 20, 21, 22 modulo 23.\r\nHere 23 is a prime number.\r\nHowever,\r\n(1)5^2mod23=2;\r\n(2)5^3mod23=10;\r\n(3)5^4mod23=4;\r\n(4)5^5mod23=20;\r\n(5)5^6mod23=8;\r\n(6)5^7mod23=17;\r\n(7)5^8mod23=16;\r\n(8)5^9mod23=11;\r\n(9)5^10mod23=9;\r\n(10)5^11mod23=22;\r\n(11)5^12mod23=18;\r\n(12)5^13mod23=21;\r\n(13)5^14mod23=13;\r\n(14)5^15mod23=19;\r\n(15)5^16mod23=3;\r\n(16)5^17mod23=15;\r\n(17)5^18mod23=6;\r\n(18)5^19mod23=7;\r\n(19)5^20mod23=12;\r\n(20)5^21mod23=14;\r\n(21)5^22mod23=1;\r\nWe say that the \u2018generator\u2019 for prime number n=23 is r=5, \nwhere the generator r raised to integral powers generates all the 21 integers \nfrom 2 through 22, including r^1=5^1=5^23mod23=5.\r\n\r\nSo, given a prime number n in the input, we require to compute the smallest integer r < n, \ncalled the \u2018generator\u2019, such that integral powers of r modulo n will span \nall integers 1 through n\u22121. \nWrite a C program to compute the \u2018generator\u2019 of a given prime number n \nby first checking whether the given integer is a prime number and rejecting if it is not so.\r\n",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n\t\/* Taking input for the prime number *\/\r\n\tint n;\r\n\tprintf(\"Enter a prime number: \");\r\n\tscanf(\"%d\", &n);\r\n\r\n\t\/* Checking whether the number is really prime or not *\/\r\n\tint isPrime = 1;\r\n\tif (n == 0 || n == 1){\r\n    isPrime = 0;\r\n\t}\r\n\r\n\tfor (int i = 2; i <= n \/ 2; i++) {\r\n\t\tif (n % i == 0) {\r\n\t\tisPrime = 0;\r\n\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\tif (isPrime == 0){\r\n    \tprintf(\"%d is not a prime number.\\n\", n);\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t\/* Finding the generator for n *\/\r\n\tint r , checker ;\r\n\tint k = 1 ;\r\n\r\n\tunsigned long long int power = 1, p;\r\n\r\n\t\tfor (r = 2; r < n; r ++){\r\n\t\t\tprintf(\"Checking for r = %d\\n\", r);\r\n\t\t\tfor ( ; ; ){\r\n\t\t\t\tint init_k = k;\r\n\t\t\t\tfor (int i = 1; i <= n-1; i++) {\r\n\t\t\t\t\tpower = power * r;\r\n\t\t\t\t\tp = (power)%n;\r\n\t\t\t\t\tprintf(\"%llu - power\\n\", p);\r\n\t\t\t\t\tif (p == k){\r\n\t\t\t\t\t\tprintf(\"%llu found\\n\", p);\r\n\t\t\t\t\t\tk++;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif( k == init_k){\r\n\t\t\t\t\tchecker = 0;\r\n\t\t\t\t\tk = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tpower = 1;\r\n\r\n\t\t\t\tif(k > n -1 ){\r\n\t\t\t\t\tchecker = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tif (checker == 1){\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\r\n\tif (checker == 1){\r\n\t\tprintf(\"The generator for %d is: %d\\n\", n, r);\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n"
                },
                {
                    "Question":"An integer point means its coordinates are integers. Given as the input the coordinates of two\r\ndistinct integer points, and your program has to find the number of integer points on the straight\r\nline segment and has to print the coordinates of these points. You should use only integer variables\r\nand integer computations in your program.",
                    "Answer":"\/\/ Integer points on a straight line segment with integer endpoints.\r\n\r\n#include <stdio.h>\r\n\r\nint main(){\r\n  int x1, y1, x2, y2;\r\n  int a, b, c, i, x, y, dx, dy;\r\n  printf(\"Enter (x,y) coordinates of Point p: \");\r\n  scanf(\"%d%d\", &x1, &y1);\r\n  printf(\"Enter (x,y) coordinates of Point q: \");\r\n  scanf(\"%d%d\", &x2, &y2);\r\n  \r\n  a = x2 - x1; \r\n  b = y2 - y1;\r\n  if (a<0) a = -a;\r\n  if (b<0) b = -b;\r\n  \r\n  while(b!=0){ \/\/ find GCD(a,b)\r\n    c = b; \r\n    b = a%b;\r\n    a = c; \r\n  } \r\n  \/\/ The variable a finally contains the GCD - it's so cute! Right?\r\n  \r\n  printf(\"Number of integer points on the line segment pq = %d.\\n\", a+1); \r\n  \r\n  dx = (x2 - x1)\/a, dy = (y2 - y1)\/a;\r\n  \r\n  printf(\"Integer points on the line segment pq:\\n\"); \r\n  for(x=x1, y=y1, i=0; i<a+1; i++){\r\n    printf(\"%4d: (%d,%d)\\n\", i+1, x, y);\r\n    x += dx, y+= dy;\r\n  }\r\n  \r\n  return 1;\r\n}"
                },
                {
                    "Question":"In this problem, you will scan a poem (along with its name and its poet) and do some computations as\r\nfollows.\r\n\uE00C Take a poem as input through the keyboard and store it in a string variable. Assume that the\r\npoem has at most 1000 characters in total. Use scanf(\"%[^#]s\", P) for scanning the\r\nwhole text at once in the character array P.\r\nThe poem has the following form.\r\n\u25CF Line 1 contains the name of the poem.\r\n\u25CF Line 2 is blank (= a single newline character).\r\n\u25CF Line 3 contains the poet\u2019s name.\r\n\u25CF Line 4 is blank.\r\n\u25CF The poem starts from Line 5.\r\n\u25CF There are no two consecutive blank lines anywhere.\r\n\u25CF Stanzas are separated by exactly one blank line.\r\n\u25CF After the last line of the poem, the character \u2018#\u2019 appears in a new line to mark the end.\r\n\u25CF There is exactly one space or a punctuation mark or a newline after each word.\r\n\u25CF There is no unnecessary space anywhere.\r\n\u25CF A punctuation mark is immediately preceded by a word, and immediately followed by\r\neither a space or a newline.\r\n\u25CF A hyphenated word is counted as a single word (ex: fast-paced, I-). A hyphen is not\r\ncounted as a punctuation mark.\r\n\u25CF Following are to be counted as punctuation marks: \u2018.\u2019, \u2018,\u2019, \u2018:\u2019, \u2018;\u2019, \u2018!\u2019, \u2018?\u2019.\r\n\u25CF A word with apostrophe is counted as a single word (ex: we\u2019ve, there\u2019s).\r\n\uE00C Print the name of the poem and its poet [2 marks], and the number of lines [2 marks], words\r\n[2 marks], stanzas [2 marks], and punctuation marks [2 marks] in the main body of poem.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n  char P[1000];\r\n  int line=0, word=0, stanza=0, punc=0, i=0;\r\n  printf(\"Enter a poem with its name and poet: \\n\");\r\n  scanf(\"%[^#]s\", P);\r\n  \r\n  printf(\"\\nPoem name: \");\r\n  do\r\n    printf(\"%c\", P[i++]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  printf(\"\\nPoet name: \");\r\n  do\r\n    printf(\"%c\", P[++i]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  do{    \r\n    if(P[i]=='\\n'){\r\n      i++, stanza++;\r\n      continue;\r\n    }\r\n    \r\n    do{ \/\/scan a word\r\n      i++; \r\n    } while(!(P[i] == ' ' || P[i] == '\\n'));\r\n    \r\n    word++;\r\n    \r\n    if(P[i] == '\\n')\r\n      line++;\r\n    \r\n    if(P[i-1]=='.' || P[i-1]==',' || P[i-1]==':' || P[i-1]==';' || P[i-1]=='!' || P[i-1]=='?')\r\n      punc++;\r\n    \r\n    i++;\r\n  } while(P[i]!='\\0');\r\n  \r\n  printf(\"\\nLines: %d\\nWords: %d\\nStanzas: %d\\nPunctuation marks: %d\\n\", line, word, stanza, punc);\r\n  \r\n  return 0;\r\n}"
                },
                {
                    "Question":"Given a numerator and a denominator as input,\r\nyour program has to print the sequence representing the continued fraction for as shown in the\r\nexamples. You can use one extra integer variable, say ; use of more extra variables will attract penalty.\r\nYou should use a loop because the sequence may be arbitrarily long.",
                    "Answer":"\/\/ Continued fraction for a\/b.\r\n\r\n#include<stdio.h>\r\n\r\nint main(){\r\n  int a, b, c=0; \r\n  \r\n  printf(\"Enter a and b: \"); \r\n  scanf(\"%d%d\", &a, &b);\r\n  \r\n  do{\r\n    if(c==0)\r\n      printf(\"Continued fraction = [%d; \", a\/b); \r\n    else  \r\n      printf(\"%d, \", a\/b); \r\n    c = a%b; \r\n    a = b, b = c;\r\n  }while(a>1 && b>0);\r\n  \r\n  printf(\"\\b\\b].\\n\");\r\n  return 0;\r\n}"
                },
                {
                    "Question":"An integer point means its coordinates are integers. Given as the input the coordinates of two\r\ndistinct integer points, and your program has to find the number of integer points on the straight\r\nline segment and has to print the coordinates of these points. You should use only integer variables\r\nand integer computations in your program.",
                    "Answer":"\/\/ Integer points on a straight line segment with integer endpoints.\r\n\r\n#include <stdio.h>\r\n\r\nint main(){\r\n  int x1, y1, x2, y2;\r\n  int a, b, c, i, x, y, dx, dy;\r\n  printf(\"Enter (x,y) coordinates of Point p: \");\r\n  scanf(\"%d%d\", &x1, &y1);\r\n  printf(\"Enter (x,y) coordinates of Point q: \");\r\n  scanf(\"%d%d\", &x2, &y2);\r\n  \r\n  a = x2 - x1; \r\n  b = y2 - y1;\r\n  if (a<0) a = -a;\r\n  if (b<0) b = -b;\r\n  \r\n  while(b!=0){ \/\/ find GCD(a,b)\r\n    c = b; \r\n    b = a%b;\r\n    a = c; \r\n  } \r\n  \/\/ The variable a finally contains the GCD - it's so cute! Right?\r\n  \r\n  printf(\"Number of integer points on the line segment pq = %d.\\n\", a+1); \r\n  \r\n  dx = (x2 - x1)\/a, dy = (y2 - y1)\/a;\r\n  \r\n  printf(\"Integer points on the line segment pq:\\n\"); \r\n  for(x=x1, y=y1, i=0; i<a+1; i++){\r\n    printf(\"%4d: (%d,%d)\\n\", i+1, x, y);\r\n    x += dx, y+= dy;\r\n  }\r\n  \r\n  return 1;\r\n}"
                },
                {
                    "Question":"In this problem, you will scan a poem (along with its name and its poet) and do some computations as\r\nfollows.\r\n\uE00C Take a poem as input through the keyboard and store it in a string variable. Assume that the\r\npoem has at most 1000 characters in total. Use scanf(\"%[^#]s\", P) for scanning the\r\nwhole text at once in the character array P.\r\nThe poem has the following form.\r\n\u25CF Line 1 contains the name of the poem.\r\n\u25CF Line 2 is blank (= a single newline character).\r\n\u25CF Line 3 contains the poet\u2019s name.\r\n\u25CF Line 4 is blank.\r\n\u25CF The poem starts from Line 5.\r\n\u25CF There are no two consecutive blank lines anywhere.\r\n\u25CF Stanzas are separated by exactly one blank line.\r\n\u25CF After the last line of the poem, the character \u2018#\u2019 appears in a new line to mark the end.\r\n\u25CF There is exactly one space or a punctuation mark or a newline after each word.\r\n\u25CF There is no unnecessary space anywhere.\r\n\u25CF A punctuation mark is immediately preceded by a word, and immediately followed by\r\neither a space or a newline.\r\n\u25CF A hyphenated word is counted as a single word (ex: fast-paced, I-). A hyphen is not\r\ncounted as a punctuation mark.\r\n\u25CF Following are to be counted as punctuation marks: \u2018.\u2019, \u2018,\u2019, \u2018:\u2019, \u2018;\u2019, \u2018!\u2019, \u2018?\u2019.\r\n\u25CF A word with apostrophe is counted as a single word (ex: we\u2019ve, there\u2019s).\r\n\uE00C Print the name of the poem and its poet [2 marks], and the number of lines [2 marks], words\r\n[2 marks], stanzas [2 marks], and punctuation marks [2 marks] in the main body of poem.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n  char P[1000];\r\n  int line=0, word=0, stanza=0, punc=0, i=0;\r\n  printf(\"Enter a poem with its name and poet: \\n\");\r\n  scanf(\"%[^#]s\", P);\r\n  \r\n  printf(\"\\nPoem name: \");\r\n  do\r\n    printf(\"%c\", P[i++]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  printf(\"\\nPoet name: \");\r\n  do\r\n    printf(\"%c\", P[++i]);\r\n  while(P[i]!='\\n');\r\n  i++; \/\/skip the blank line\r\n  \r\n  do{    \r\n    if(P[i]=='\\n'){\r\n      i++, stanza++;\r\n      continue;\r\n    }\r\n    \r\n    do{ \/\/scan a word\r\n      i++; \r\n    } while(!(P[i] == ' ' || P[i] == '\\n'));\r\n    \r\n    word++;\r\n    \r\n    if(P[i] == '\\n')\r\n      line++;\r\n    \r\n    if(P[i-1]=='.' || P[i-1]==',' || P[i-1]==':' || P[i-1]==';' || P[i-1]=='!' || P[i-1]=='?')\r\n      punc++;\r\n    \r\n    i++;\r\n  } while(P[i]!='\\0');\r\n  \r\n  printf(\"\\nLines: %d\\nWords: %d\\nStanzas: %d\\nPunctuation marks: %d\\n\", line, word, stanza, punc);\r\n  \r\n  return 0;\r\n}"
                },
                {
                    "Question":"1. Write a program that takes an integer between I and 9 as input, \nand prints out on the terminal a pattern similar to the following. The example display shown is for input 5.\r\n1                1\r\n22            22\r\n333        333\r\n4444    4444\r\n5555555555",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\n    int n, i = 1;\r\n    printf(\"Enter any integer between 1 to 9__\\n\");\r\n    scanf(\"%d\", &n);\r\n    if (n >= 1 && n <= 9)\/\/condition check\r\n    {\r\n        while (i <= n)\r\n        {\r\n            for (int k = 1; k <= i; k++)\/\/This for loop prints the number 'i' i times \r\n            {\r\n                printf(\"%d\", i);\r\n            }\r\n            for (int l = 1; l <= 2 * (n - i); l++)\/\/ this for loop enters the spaces between the two sequence of i's\r\n            {\r\n                printf(\" \");\r\n            }\r\n            for (int m = 1; m <= i; m++)\/\/This for loop prints the number 'i' i times \r\n            {\r\n                printf(\"%d\", i);\r\n            }\r\n            printf(\"\\n\");\r\n            i++;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        printf(\"The entered no. must be between 1 to 9 only.\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"2. Write a program that will prompt the user to enter a sequence of positive integer values. At any time,\r\nyour program should display the two largest values entered so far and also the two smallest values. When the\r\nuser has entered only one value, for the second largest and second smallest numbers your program should\r\ndisplay \"Value h as not yet been entered\". Your program should terminate when the user enters any negative\r\nnumber.\r\nFor example:\r\nEnter numbers: 1\r\nLargest number: 1\r\nSecond largest number: Value Not yet entered\r\nSmallest number:1\r\nSecond smallest number: Value Not yet entered\r\nEnter numbers: 1 2 5 4\r\nLargest number: 5\r\nSecond largest number: 4\r\nSmallest number: I\r\nSecond smallest number: 2\r\nEnter numbers: 1 2 5 4 8 2\r\nLargest number: 8\r\nSecond largest number:5\r\nSmallest number: 1\r\nSecond smallest number: 2\r\nEnter numbers: 1 2 5 4 8 2 1 1\r\nLargest number: 8\r\nSecond largest number: 5\r\nSmallest number: 1\r\nSecond smallest number: 2\r\nEnter numbers: 1 2 5 4 8 2 1 1  -10\r\n<Program terminates>\r\n",
                    "Answer":"#include <stdio.h>\r\nint main()\r\n{\r\n    int n, n1 = 1, max, max1, min, min1;\r\n    printf(\"Enter any positive integer numbers__\\n\");\r\n    scanf(\"%d\", &n);\r\n    if (n < 0)\r\n    {\r\n        return 0;\r\n    }\r\n    printf(\"\\nlargest number: %d\\n second largest number: not enetred yet\\n\", n);\r\n    printf(\"smallest number: %d\\n second smallest number: not enetred yet\\n\\n**********\\n\", n);\r\n    max = n;\r\n    min = n;\r\n    printf(\"Enter any positive integer numbers__\\n\");\r\n    scanf(\"%d\", &n1);\r\n    while (1)\r\n    {\r\n        if (n1 < 0)\r\n        {\r\n            return 0; \/\/closes the program for negative values\r\n        }\r\n        if (n1 > max)\r\n        { \/\/switches the variables\r\n            max1 = max;\r\n            max = n1;\r\n        }\r\n        else if (n1 < max && n1 > max1)\r\n        { \/\/switches the variables\r\n            max1 = n1;\r\n        }\r\n        if (n1 < min)\r\n        { \/\/switches the variables\r\n            min1 = min;\r\n            min = n1;\r\n        }\r\n        else if (n1 > min && n1 < min1)\r\n        { \/\/switches the variables\r\n            min1 = n1;\r\n        }\r\n        printf(\"\\nlargest number: %d\\n second largest number:%d\\n\", max, max1);\r\n        printf(\"smallest number: %d\\n second smallest number:%d \\n\\n**********\\n\", min, min1);\r\n        printf(\"Enter any positive integer numbers__\\n\");\r\n        scanf(\"%d\", &n1); \/\/enters new value for n1 for the next loop\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"Write a program that takes a positive integer n and displays the first n terms of the following series: \r\n1, -1, 2, -3, >, -8, ...\r\nYou need to handle cases when the user enters or negative numbers by giving appropriate messages.",
                    "Answer":"#include<stdio.h>\r\nint main(){\r\n    int n,n1=1, n2=-1,n3;\r\n    printf(\"Enter the number of terms to be printed\\n\");\r\n    scanf(\"%d\", &n);\r\n    if(n==1){\r\n        printf(\"The series is 1, \");\r\n        return 0;\r\n    }\r\n    else if(n==2){\r\n        printf(\"The series is 1, -1, \");\r\n        return 0;\r\n    }\r\n    else if(n==0 || n<0){\r\n        printf(\"invalid entry!! The entered number must be a natural number.\");\r\n        return 0;\r\n    }\r\n    else{\r\n    printf(\"The series is 1, -1, \");\r\n    for(int i=3; i<= n; i++){\/\/ The count i begins from 3 as the first two elements are printed already.\r\n        n3= n1 - n2;\r\n        printf(\" %d,\", n3);\r\n        n1= n2;\/\/Changing the variables for the next loops\r\n        n2=n3;\/\/Changing the variables for the next loops\r\n\r\n    }\r\n\r\n}\r\nreturn 0;\r\n}" 
                },
                {
                    "Question":"4. Write a program to ask the user how many random numbers to generate. Generate that many random\r\nnumbers between 0 and 100. Display the random numbers. Display the percentage of random numbers that\r\nwere generated between 0-9, 10-19,20-29,., and 90-100.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int n,sum=0;\r\n    float c[10];\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        c[i] = 0;\r\n    }\r\n    srand(time(0));\r\n    printf(\"Enter the no of random nos needed__\\n\");\r\n    scanf(\"%d\", &n);\r\n    int arr[n];\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        arr[i] = rand() % 100;\r\n    }\r\n    printf(\"The nos are___\\n\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d\\n\", arr[i]);\r\n    }\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        arr[i] = arr[i] \/ 10;\r\n        switch (arr[i])\r\n        {\r\n        case 0:\r\n            c[0]++;\r\n            break;\r\n        case 1:\r\n            c[1]++;\r\n            break;\r\n        case 2:\r\n            c[2]++;\r\n            break;\r\n        case 3:\r\n            c[3]++;\r\n            break;\r\n        case 4:\r\n            c[4]++;\r\n            break;\r\n        case 5:\r\n            c[5]++;\r\n            break;\r\n        case 6:\r\n            c[6]++;\r\n            break;\r\n        case 7:\r\n            c[7]++;\r\n            break;\r\n        case 8:\r\n            c[8]++;\r\n            break;\r\n        case 9:\r\n            c[9]++;\r\n            break;\r\n        }\r\n    }\r\n    for(int i=0; i<10; i++){\r\n        sum +=c[i];\r\n    }\r\n    for(int i=0; i<10; i++){\r\n        printf(\"%d-%d = %.2f percent\\n\", i*10, i*10 + 9, (c[i]\/sum)*100);\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question": "The infinite series for cos(x):\r\ncos(x) = 1 \u2013 x2 \/2! + x4 \/4! \u2013 x6 \/6! + ............;\r\nwhere x is a floating point number.\r\nWrite a C program which does the following:\r\n\r\n1. (a) Takes in 3 floating point numbers x,y,z and a positive integer n.\r\n    (b) The program then keeps reading floating point numbers from the keyboard till it gets a floating point\r\n          number a, -1 < a <1,\r\n    (c) It then continues to read floating point numbers till it gets a floating point number b, -0.5 < b < 0.5.\r\n2. (a) The program then computes cos(x), cos(y), cos(z) upto n terms of the infinite series.\r\n    (b) It also computes cos(a) and cos(b) using the infinite series, upto terms having magnitude 10-5, and\r\n         remembers for each a and b the number of terms that had to be computed.\r\n3. (a) The program then prints cos(x), cos(y), cos(z) calculated upto n terms.\r\n    (b) It also prints cos(a), cos(b) calculated upto terms with magnitude 10-5, as well as the number of\r\n         terms that had to be calculated for each of a and b.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n    float x,y,z;\r\n    int n;\r\n\r\n    \/\/ Part 1(a) where we take x,y,z,n as input from user\r\n    printf(\"Enter the value of three floating point numbers x,y,z one by one side by side with a space between them: \");\r\n    scanf(\"%f%f%f\",&x,&y,&z);\r\n    printf(\"Enter the value of n which is a positive integer: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    float a,b;\r\n\r\n    \/\/ Part 1(b) where we take a as input from user till user gives a such that -1<a<1\r\n    printf(\"Enter the value of a which should be such that -1<a<1: \");\r\n    scanf(\"%f\",&a);\r\n    while(a<=-1 || a>=1){\r\n        printf(\"Value of a is not in the specified range. Please enter the value of a once again: \");\r\n        scanf(\"%f\",&a);\r\n    }\r\n\r\n    \/\/ Part 1(c) where we take b as input from user till user gives b such that -0.5<b<0.5\r\n    printf(\"Enter the value of b which should be such that -0.5<b<0.5: \");\r\n    scanf(\"%f\",&b);\r\n    while(b<=-0.5 || b>=0.5){\r\n        printf(\"Value of b is not in the specified range. Please enter the value of b once again: \");\r\n        scanf(\"%f\",&b);\r\n    }\r\n\r\n    float term=1.0,cosx=0.0,cosy=0.0,cosz=0.0,cosa=0.0,cosb=0.0; \/\/ term variable is used to find the value of each term of the cos series\r\n    \/* Here term variable is always positive since its multiplied by twice in each iteration\r\n       we just add or subtract this positive value of term variable as required in the series\r\n    *\/\r\n    int fac=1; \/\/ fac variable is used to find the value of the factorial of 2,4,6,8,... as the series progresses\r\n\r\n    \/*Part 2(a)*\/\r\n\r\n    \/\/ Computing cos(x) upto n terms of the infinite series\r\n    for(int i=1;i<=n;i++){\r\n        if(i%2!=0){\r\n            cosx+=term;\r\n            term*=x\/(fac);\r\n            fac++;\r\n            term*=x\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosx-=term;\r\n            term*=x\/(fac);\r\n            fac++;\r\n            term*=x\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n\r\n    \/\/ Computing cos(y) upto n terms of the infinite series\r\n    for(int i=1;i<=n;i++){\r\n        if(i%2!=0){\r\n            cosy+=term;\r\n            term*=y\/(fac);\r\n            fac++;\r\n            term*=y\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosy-=term;\r\n            term*=y\/(fac);\r\n            fac++;\r\n            term*=y\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n\r\n    \/\/ Computing cos(z) upto n terms of the infinite series\r\n    for(int i=1;i<=n;i++){\r\n        if(i%2!=0){\r\n            cosz+=term;\r\n            term*=z\/(fac);\r\n            fac++;\r\n            term*=z\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosz-=term;\r\n            term*=z\/(fac);\r\n            fac++;\r\n            term*=z\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n    int counter_a=0; \/\/ this variable is used to keep record of the number of terms used to find cos(a)\r\n\r\n    \/*Part 2(b)*\/\r\n\r\n    \/\/Computing cos(a) using the infinite series, upto terms having magnitude 10^-5\r\n    while(term>=pow(10,-5)){\r\n        counter_a++;\r\n        if(counter_a%2!=0){\r\n            cosa+=term;\r\n            term*=a\/(fac);\r\n            fac++;\r\n            term*=a\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosa-=term;\r\n            term*=a\/(fac);\r\n            fac++;\r\n            term*=a\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/\/ Resetting fac and term for reuse\r\n    term=1.0;\r\n    fac=1;\r\n    int counter_b=0; \/\/ this variable is used to keep record of the number of terms used to find cos(b)\r\n\r\n    \/\/Computing cos(b) using the infinite series, upto terms having magnitude 10^-5\r\n    while(term>=pow(10,-5)){\r\n        counter_b++;\r\n        if(counter_b%2!=0){\r\n            cosb+=term;\r\n            term*=b\/(fac);\r\n            fac++;\r\n            term*=b\/(fac);\r\n            fac++;\r\n        }else{\r\n            cosb-=term;\r\n            term*=b\/(fac);\r\n            fac++;\r\n            term*=b\/(fac);\r\n            fac++;\r\n        }\r\n    }\r\n\r\n    \/*Part 3(a)*\/\r\n    \/\/Printing cos(x), cos(y), cos(z) calculated upto n terms\r\n    printf(\"The value of cos(x) calculated upto %d terms is: %f\\n\",n,cosx);\r\n    printf(\"The value of cos(y) calculated upto %d terms is: %f\\n\",n,cosy);\r\n    printf(\"The value of cos(z) calculated upto %d terms is: %f\\n\",n,cosz);\r\n\r\n    \/*Part 3(b)*\/\r\n    \/\/Printing cos(a) value\r\n    printf(\"The value of cos(a) calculated upto terms with magnitude 10^-5 is: %f\\n\",cosa);\r\n    \/\/Printing number of terms of the infinite series that had to be calculated to find cos(a)\r\n    printf(\"The number of terms that had to be calculated to find cos(a) are: %d\\n\",counter_a);\r\n    \/\/Printing cos(b) value\r\n    printf(\"The value of cos(b) calculated upto terms with magnitude 10^-5 is: %f\\n\",cosb);\r\n    \/\/Printing number of terms of the infinite series that had to be calculated to find cos(b)\r\n    printf(\"The number of terms that had to be calculated to find cos(b) are: %d\\n\",counter_b);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Part-I\r\nA positive integer is called an IIT number if the number is equal to the sum of factorial of its digits. For\r\nexample, 1 (1 = 1!), 2 (2 = 2!), 145 (145 = 1! + 4! + 5!) are IIT numbers.\r\nWrite a C program to perform the following tasks.\r\n1. To check if a given positive number x is an IIT number.\r\n2. To print all IIT numbers from 1 to a given input number n.\r\n\r\nPart-II\r\nA positive integer is called a KGP number if the number is equal to the sum of its divisor except itself.\r\nFor example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are KGP numbers.\r\nWrite a C program to perform the following tasks.\r\n1. To check if a given positive number x is a KGP number.\r\n2. To print all KGP numbers from 1 to a given input number n.\r\n\r\n                                        *  *  *  *  *\r\n                                        *  *  *  *\r\n                                        *  *  *\r\n                                        *  *\r\n                                        *\r\n                                        *  *\r\n                                        *  *  *\r\n                                        *  *  *  *\r\n                                        *  *  *  *  *\r\n                         Table 1: Star K of height 9.\r\n\r\nPart-III\r\n\r\nWrite a C program to perform the following tasks.\r\n1. Take a positive integer n as input and output a K of height 2n - 1 stars. A star K of height 9 is the\r\nfollowing.\r\nSubmit one (single) C program.\r\n\r\n\r\nSample Output\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out .\/a.out\r\nWrite number x: 145\r\n145 is an IIT number\r\nWrite number n: 1000\r\nThe IIT numbers between 1 and 1000: 1, 2, 145,\r\nWrite number x: 28\r\n28 is a KGP number\r\nWrite number n: 1000\r\nThe KGP numbers between 1 and 1000: 6, 28, 496,\r\nWrite a positive integer n: 2\r\nStar K of height 3 is\r\n*  *\r\n*\r\n*  *\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    \/*Part I*\/\r\n\r\n    \/\/Task 1\r\n    int x,n,k,sum=0;\r\n    printf(\"Write number x: \");\r\n    scanf(\"%d\",&x);\r\n    k=x; \/\/k is used to store value of x so that x is preserved for later comparison with sum\r\n    while(k>0){\r\n        int d=k%10; \/\/d stores last digit of the number k\r\n        int prod=1; \/\/prod stores value of factorial of each digit\r\n        for(int i=2;i<=d;i++){\r\n            prod*=i;\r\n        }\r\n        sum+=prod;\r\n        k\/=10; \/\/k is divided by 10 to make second last digit as last digit for furthur use in loop\r\n    }\r\n    if(sum==x){\r\n        printf(\"%d is an IIT number\\n\",x);\r\n    }else{\r\n        printf(\"%d is not an IIT number\\n\",x);\r\n    }\r\n\r\n    \/\/Task 2\r\n    printf(\"Write number n: \");\r\n    scanf(\"%d\",&n);\r\n    printf(\"The IIT numbers between 1 and %d: \",n);\r\n    for(int i=1;i<=n;i++){\r\n        int num=i; \/\/num stores value of i so that i is not affected in the process as its reserved for the for-loop\r\n        sum=0;\r\n        while(num>0){\r\n            int d=num%10; \/\/this d has same use as that in Task 1\r\n            int prod=1; \/\/this prod has same use as in Task 1\r\n            for(int i=2;i<=d;i++){\r\n                prod*=i;\r\n            }\r\n            sum+=prod;\r\n            num\/=10; \/\/same concept as in Task 1\r\n        }\r\n        if(sum==i){\r\n            printf(\"%d, \",i);\r\n        }\r\n    }\r\n    printf(\"\\n\"); \/\/Changing the line for input of next part\r\n\r\n\r\n\r\n    \/*Part II*\/\r\n\r\n    \/\/Task 1\r\n    printf(\"Write number x: \");\r\n    scanf(\"%d\",&x); \/\/variable x is reused from Part I\r\n    sum=0; \/\/variable sum is reused from Part I\r\n    for(int i=1;i<=x\/2;i++){ \/\/checking till x\/2 is fine because largest divisor of x which is not x itself will be <=x\/2\r\n        if(x%i==0){\r\n            sum+=i;\r\n        }\r\n    }\r\n    if(sum==x){\r\n        printf(\"%d is a KGP number\\n\",x);\r\n    }else{\r\n        printf(\"%d is not a KGP number\\n\",x);\r\n    }\r\n\r\n    \/\/Task 2\r\n    printf(\"Write number n: \");\r\n    scanf(\"%d\",&n);  \/\/variable n is reused from Part I\r\n    printf(\"The KGP numbers between 1 and %d: \",n);\r\n    for(int i=6;i<=n;i++){  \/\/i starts from 6 since there exits no KGP number smaller than 6\r\n        sum=0; \/\/variable sum is reused from Part I\r\n        int num=i; \/\/same concept as in Part I Task 2\r\n        for(int j=1;j<=num\/2;j++){\r\n            if(i%j==0){\r\n                sum+=j;\r\n            }\r\n        }\r\n        if(sum==i){\r\n            printf(\"%d, \",i);\r\n        }\r\n    }\r\n    printf(\"\\n\"); \/\/Changing the line for input of next part\r\n\r\n\r\n\r\n    \/*Part III*\/\r\n    printf(\"Write a positive integer n: \");\r\n    scanf(\"%d\",&n);  \/\/variable n is reused from Part I\r\n    printf(\"Star K of height %d is\\n\",2*n-1);\r\n    for(int i=0;i<2*n-1;i++){ \/\/variable i takes care of all 2*n-1 rows of the pattern\r\n        if(i<n){              \/\/ takes care of the upper halve of the pattern including the middle single star\r\n            for(int j=n-i;j>=1;j--){ \/\/variable j takes care of number of * in each row\r\n                printf(\"* \");\r\n            }\r\n        }else{                 \/\/ takes care of the lower halve of the pattern after the middle single star\r\n            for(int j=1;j<=i-n+2;j++){ \/\/ j goes from 1 till i-n+2 because as i changes from n to 2*n-2 this upper limit changes from 2 to n\r\n                printf(\"* \");\r\n            }\r\n        }\r\n        printf(\"\\n\"); \/\/ changing line after printing each row to move to the next row\r\n    }\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Consider the movement of a particle starting at x = 0. The particle can move\r\n                either in forward (towards +x), or backward (towards \u2212x), which is randomly\r\n                selected (like obtaining head or tail in coin tossing). This is a typical observation\r\n                in several random real life phenomena (e.g. motion of atoms, Brownian motion,\r\n                etc).\r\n                Assume that each step of the particle is equal to one unit of distance (i.e.\r\n                +1 or -1). We wish to compute the expected distance of the particle from\r\n                the starting point (or how far does the particle travel on the average) after n\r\n                number of steps. Although apparently it might seem that the average progress\r\n                will be zero, but actually as n increases, the total distance also increases. You\r\n                have to write a code to simulate n number of random steps and calculate the\r\n                final distance dn from the initial step, repeat this process for a large number\r\n                of iterations (k) and add the square of distance dn in each iteration to get the\r\n                total distance D. That is, D =\r\n                Pk\r\n                n=1 d\r\n                2\r\n                n\r\n                . Finally the expected distance DE\r\n                is computed as, DE =\r\n                p\r\n                D\/k. Eventually you will see that the total distance\r\n                covered is approximately the square root of the number of steps. Of course\r\n                the answer will vary little bit in every execution of the program due to the\r\n                randomness.\r\n                For your convenience, the random step generator code is provided as follows.\r\n                Include the following headers in your code:\r\n                #include<time.h>, #include<stdlib.h>\r\n                Add this at the beginning of main( ) function: srand(time(NULL)); Then the\r\n                following line of code generates +1 or -1 randomly and assigns to variable p:\r\n                p = rand() & 1 ? -1 : 1;\r\n                Example:\r\n                Input: n = 25, k = 100000\r\n                Output: 5.00119\r\n                Input: n = 100, k = 100000\r\n                Output: 10.0023\r\n                Input: n = 50, k = 100000\r\n                Output: 7.0903",
                    "Answer": "#include <stdio.h>\r\n            #include <stdlib.h>\r\n            #include<time.h>\r\n            \r\n            int main()\r\n            {\r\n                srand(time(NULL));\r\n                int n;\r\n                int k;\r\n                printf(\"n= \");\r\n                scanf(\"%d\",&n);\r\n                printf(\"k= \");\r\n                scanf(\"%d\",&k);\r\n            \r\n                int D =0;\r\n                int p;\r\n                for(int i=0;i<k;i++){\r\n                    int d =0;\r\n                    for(int j=0;j<n;j++){\r\n                        p = rand() & 1 ? -1 : 1;\r\n                        d=d+p;\r\n                    }\r\n                    D+=d*d;\r\n            \r\n            \r\n                }\r\n                printf(\"%f\\n\",sqrt(((float)D)\/k));\r\n                return 0;\r\n            }"
                },
                {
                    "Question":"Consider that n number of machines in the CSE department are broken that\r\n                needs to be fixed. Suppose each machine has different configuration, and the\r\n                department is planning to assign each machine to an individual vendor for repairing, \n                and there are total n number of vendors. Now each of these vendors\r\n                are demanding different prices for fixing different machines. The price for each\r\n                machine demanded by each vendor is put in an array. To keep things simple, consider n = 4. \n                For example, the price list of machine1 is stored as int\r\n                m1[4] = {8200, 8300, 6900, 9200}. This means for machine1, the price quote of\r\n                vendor1 is 8200, vendor2 it is 8300, vendor3 it is 6900, and vendor4 it is 9200.\r\n                Similarly m2[ ], m3[ ], and m4 [ ] stores the price quotations of other machines\r\n                for the 4 vendors.\r\n                Now the goal is to assign one machine to each vendor so that all tasks are\r\n                completed with the smallest total cost. In order to do this, you have to consider\r\n                all possible combinations of machines and vendors, and find the smallest cost\r\n                and the corresponding combination of machine and vendor. Note that each\r\n                vendor will be assigned exactly one machine.\r\n                Your program should output the total cost, as well as the assigned vendors\r\n                to the machines. You may initialize the arrays m1, m2, m3, and m4 in the code\r\n                (no need to take user input).\r\n                Example:\r\n                Input:\r\n                m1 \u2192 8200, 8300, 6900, 9200\r\n                m2 \u2192 7700, 3700, 4900, 9200\r\n                m3 \u2192 1100, 6900, 500, 8600\r\n                m4 \u2192 800, 900, 9800, 2300\r\n                Output:\r\n                Total cost = 14000\r\n                Machine1 - Vendor3\r\n                Machine2 - Vendor2\r\n                Machine3 - Vendor1\r\n                Machine4 - Vendor4",
                    "Answer":"#include <stdio.h>\r\n            #include <stdlib.h>\r\n            \r\n            int main()\r\n            {\r\n                int arr[24][4]={\r\n            {1,2,3,4},\r\n            {1,2,4,3},\r\n            {1,3,2,4},\r\n            {1,3,4,2},\r\n            {1,4,2,3},\r\n            {1,4,3,2},\r\n            {2,1,3,4},\r\n            {2,1,4,3},\r\n            {2,3,1,4},\r\n            {2,3,4,1},\r\n            {2,4,1,3},\r\n            {2,4,3,1},\r\n            {3,1,2,4},\r\n            {3,1,4,2},\r\n            {3,2,1,4},\r\n            {3,2,4,1},\r\n            {3,4,1,2},\r\n            {3,4,2,1},\r\n            {4,1,2,3},\r\n            {4,1,3,2},\r\n            {4,2,1,3},\r\n            {4,2,3,1},\r\n            {4,3,1,2},\r\n            {4,3,2,1}};\r\n            \r\n            int m[4][4]={\r\n            {8200, 8300, 6900, 9200},\r\n            {7700, 3700, 4900, 9200},\r\n            {1100, 6900, 500, 8600},\r\n            {800, 900, 9800, 2300}\r\n            };\r\n            \r\n            int cost[16] = { 0 };\r\n            \r\n            \r\n            for(int i=0;i<16;i++){\r\n                cost[i]+=m[arr[i][0]-1][0];\r\n                cost[i]+=m[arr[i][1]-1][1];\r\n                cost[i]+=m[arr[i][2]-1][2];\r\n                cost[i]+=m[arr[i][3]-1][3];\r\n            \r\n            }\r\n            int ind;\r\n            for(int j=0;j<16;j++){\r\n            \r\n                    int flag=0;\r\n                for(int k=0;k<16;k++){\r\n                    if(cost[j]<=cost[k]){\r\n                        flag++;\r\n                    }\r\n                }\r\n                if(flag==16){\r\n                    ind = j;\r\n                }\r\n            }\r\n            printf(\"Total cost is : %d\\n\",cost[ind]);\r\n            printf(\"vendor 1 repairs machine %d \\n vendor 2 repairs machine %d \\n vendor 3 repairs machine %d \\n vendor 4 repairs machine %d\",arr[ind][0],arr[ind][1],arr[ind][2],arr[ind][3]);\r\n            \r\n            \r\n                return 0;\r\n            }"
                },
                {
                    "Question": "Write a C program which does the following:\r\n- Take an integer n as the input from the user\r\n- The program then keeps on reading floating-point numbers from the\r\nuser until the input value is within -1 < x < +1; this value is assigned\r\nto a floating-point variable x\r\nThen the program keeps on reading another set of floating-point\r\nnumbers from the user until the input value is within -0.5 < a < 0.5;\r\nthis value is assigned to a floating-point variable a.\n\nNow compute the followings:\r\nsin(x) with the value of x up to n terms. Print the value of sin(x)\r\nsin(a) up to k terms such that the result is accurate up to 10-4 approximation.\r\nThis indicates that the value of sin(a) remains same up to the 4 decimal\r\nposition for k and (k+1) terms. Print the value of sin(a) and k (the number of\r\nterms) to achieve that value.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main(int argc, char const *argv[])\r\n{\r\n    int n, check = 1, check2 = 1;\r\n    float x, a, sinx = 0;\r\n    printf(\"enter the no. of terms :\");\r\n    scanf(\"%d\", &n);\r\n\r\n    while (check == 1)\r\n    {\r\n        printf(\"\\nenter the integer between -1 to 1\\n\");\r\n        scanf(\"%f\", &x);\r\n        if (x < 1 && x > (-1))\r\n        {\r\n            check = 0;\r\n        }\r\n        else\r\n        {\r\n            printf(\"\\ninvalid input enter again\");\r\n        }\r\n    }\r\n    while (check2 == 1)\r\n    {\r\n        printf(\"\\nenter the integer between -0.5 to 0.5\\n\");\r\n        scanf(\"%f\", &a);\r\n        if (a < .5 && a > (-.5))\r\n        {\r\n            check2 = 0;\r\n        }\r\n        else\r\n        {\r\n            printf(\"\\ninvalid input enter again\");\r\n        }\r\n    }\r\n\r\n    \/\/ part 2\r\n    \/\/ sinx calculation\r\n\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n\r\n        float fac = 1.0;\r\n        for (int j = 1; j <= (2 * i - 1); j++)\r\n        {\r\n            fac = fac * j;\r\n        }\r\n        if (i % 2 == 0)\r\n        {\r\n            sinx -= x \/ fac;\r\n        }\r\n        else\r\n        {\r\n            sinx += x \/ fac;\r\n        }\r\n        x *= x * x;\r\n    }\r\n    printf(\"sinx = %f\", sinx);\r\n\r\n    \/\/ sin(a) calculations\r\n    int k = 1;\r\n    while (1)\r\n    {\r\n\r\n        float y = a, z = a;\r\n        float sina = 0, sinb = 0, sinat, sinbt;\r\n        for (int i = 1; i <= k; i++)\r\n        {\r\n\r\n            float fac = 1.0;\r\n            for (int j = 1; j <= (2 * i - 1); j++)\r\n            {\r\n                fac = fac * j;\r\n            }\r\n            if (i % 2 == 0)\r\n            {\r\n                sina -= y \/ fac;\r\n            }\r\n            else\r\n            {\r\n                sina += y \/ fac;\r\n            }\r\n            y *= y * y;\r\n        }\r\n        for (int i = 1; i <= k + 1; i++)\r\n        {\r\n\r\n            float fac = 1.0;\r\n            for (int j = 1; j <= (2 * i - 1); j++)\r\n            {\r\n                fac = fac * j;\r\n            }\r\n            if (i % 2 == 0)\r\n            {\r\n                sinb -= z \/ fac;\r\n            }\r\n            else\r\n            {\r\n                sinb += z \/ fac;\r\n            }\r\n            z *= z * z;\r\n        }\r\n        sinat = sina * 10000;\r\n        int sa = (int)sinat;\r\n        sinbt = sinb * 10000;\r\n        int sb = (int)sinbt;\r\n        if (sa == sb)\r\n        {\r\n            printf(\"\\nsina = %0.4f\\nk=%d\", sina, k);\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            ++k;\r\n            continue;\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program that will read in a set of at most 10 positive integers. However, if an integer 0 or less is read\r\nsomewhere, then that means that no more integers are to be read. Now among the positive integers read, find out if\r\nthe sum of those which are divisible by either 2 or 3 or 5 is greater than the sum of those which are not divisible by\r\nany one of 2 or 3 or 5, or whether the two sums are equal. (Loop CAN be used and will help to write a shorter program,\r\nthough it is not absolutely necessary to use loops. Arrays are NOT to be used) \r\nSave the file as A04_<Roll Number>.c (example A04_21AG10002.c). Build, Run for and test it for the given data. Then \r\nupload the .c file for the Assignment. \r\nIn particular, you will do the following:\r\n1. Read in integers one by one and print them till either you read 10 positive numbers or read a 0 or negative\r\nnumber. (Print only the positive numbers). Create a new line after they are printed.\r\n2.\r\nIn a new line, Print the sum (Sum1) of numbers divisible by any one of 2 or 3 or 5 as \u2013 Sum1 (Divisible) = <Value>\r\n3.\r\nIn a new line, Print the sum (Sum2) of numbers not divisible by any of 2 or 3 or 5 as \u2013 Sum2 (Not Divisible) =\r\n<Value>\r\n4.\r\nIn a new line, Print which sum is larger or whether they are equal. \r\nTest Data: (Inputs will be given one after another without commas)\r\na) 2    3    5    7    15    11    7    0\r\nb) 8   12    23    17   19    18    -4\r\nc) 11   23   18    16    29    31   9   12    16    7 ",
                    "Answer" : "\r\n#include <stdio.h>\r\nmain()\r\n{\r\n   int num,sum1=0,sum2=0,i;\r\n   for(i=1;i<=10;i++)\r\n   {\r\n       \/*receiving numbers*\/\r\n       printf(\"Enter a no:\\n\");\r\n       scanf(\"%d\",&num);\r\n       if (num>0)\r\n       {\r\n           printf(\"No entered:%d \\n\",num);\r\n           \/*nos divisible by 2,3,5*\/\r\n           if (num%2==0 || num%3==0 || num%5==0)\r\n           {\r\n               sum1=sum1+num;\r\n           }\r\n           \/*nos not divisible by 2,3,5*\/\r\n           else if(num%2!=0 && num%3!=0 && num%5!=0)\r\n           {\r\n               sum2=sum2+num;\r\n           }\r\n       }\r\n\r\n       else break;\r\n\r\n   }\r\n   \/*Printing the details*\/\r\n   printf(\"  \\n\");\r\n   printf(\"\\nSum1(divisible)=%d \\n\",sum1);\r\n   printf(\"  \\n\");\r\n   printf(\"\\nSum2(Not divisible)=%d \\n\",sum2);\r\n   printf(\"  \\n\");\r\n   if (sum1==sum2)\r\n   {\r\n       printf(\"BOTH SUMS ARE EQUAL\");\r\n\r\n   }\r\n   else if (sum1>sum2)\r\n   {\r\n       printf(\"SUM 1(DIVISIBLE) is larger\");\r\n   }\r\n   else printf(\"SUM 2(NOT DIVISIBLE) is larger\");\r\n   printf(\"  \\n\");\r\n\r\n}"
                },
                {
                    "Question": "Write a C Program to evaluate the series\r\nf(x) = 1 - 2x\/1! + 3x\r\n2\r\n\/2! - 4x\r\n3\r\n\/3! + 5x\r\n4\r\n\/4!\r\n-\r\n\u2026.\r\nfor 0 < x \u2264 1 (x is a floating point number)\r\nup to a given integer number n (n > 0) of terms.\r\nSave the file as A05_<Roll Number>.c (example A05_21AG10002.c). Build, Run for and test it for the given data\r\nas well as your own data. Then upload the .c file for the Assignment.\r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in the value of x and an integer n and print them in a single line depicting which is x and which is n\r\n2.\r\nIf  any one of the values entered is invalid, that is, either x does not satisfy 0 < x \u2264 1, or n is \u2264 0, print a\r\nmessage saying invalid input and ask the user to enter BOTH the values again, and read the values again\r\n(must use a while loop) and print them\r\n3. Continue the above two steps until values entered satisfy both 0 < x \u2264 1 and n is positive\r\n4. Now compute the value of f(x) up to n terms. Print the interim values of sum and term in every iteration\r\ninside the loop and then the final values at the end. Do not use any mathematical function like pow, etc.\r\nTest Data: \r\na) 0.6 10\r\nb) 0.97 25\r\nc) 1.3 12\r\nfollowed by       0.5\r\n0     followed by     1.0 20",
                    "Answer": "#include<stdio.h>\r\nmain()\r\n{   float x,sum=0.0,term=1.0,t=1.0;\r\n    int n,i;\r\n    \/*reading values of x and n*\/\r\n    printf(\"Enter a floating point value of x and integer n\\n\");\r\n    scanf(\"%f\",&x);scanf(\"%d\",&n);\r\n    while(x<=0||x>1||n<=0)\r\n    { printf(\"Invalid input\\n\");\r\n      printf(\"Enter a floating point value of x and integer n\\n\");\r\n       scanf(\"%f\",&x);scanf(\"%d\",&n);\r\n    }\r\n    printf(\"Value of x=%f and n=%d\\n\",x,n);\r\n    \/*calculating the series*\/\r\n    for(i=1;i<=n;i++)\r\n    { printf(\"Interim sum=%f and interim term =%f\\n\",sum,term);\r\n      sum+=term;\r\n      t*=-(x\/i);\r\n      term=(i+1)*t;\r\n    }\r\n    printf(\"Final value of sum=%f\\n\",sum);\r\n}"
                },
                {
                    "Question": "Write a C Program that reads in a positive integer n, n > 100, and then finds all three digit numbers formed by\r\nconsecutive digits of n. It then finds the largest prime number among these three digit numbers and prints it. \nIt prints\u201CNone is Prime\u201D if no such primes exist.\r\nFor example, if the number read is 5713271 then the program will print 571, 713, 132, 327, 271  and then say that the\r\nlargest prime among them is 571.  Again if the number read is 668844 then it prints  668, 688, 884, 844 and then prints\r\n\u201CNone is Prime\u201D\r\nSave the file as A06_<Roll Number>.c (example A06_21AG10002.c). Build, Run for and test it for the given data. Then\r\nupload the .c file for the Assignment.\r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in an integer n. (Assume a valid input will be given.) Print it. Create a new line after the print statement.\r\n2. Print all three digit numbers of n as required above, one after another, in the same line, each number followed bya comma. \nAfter that, when all are printed, make a new line.\r\n3. Print the largest primes number among these three digit numbers or state \u201CNone is Prime\u201D. (Write the code for\r\nchecking for primes in the main program itself and do not write a separate function for detection of primes)\r\nTest Data: \r\na) 5713271 \r\nb) 6688441\r\nc) 1122335",
                    "Answer": "#include <stdio.h>\r\n\r\nmain()\r\n{\r\n    int given;\r\n    printf(\"Give a number of 3 digits at least(ie greater than 100)\\n\");\r\n    scanf(\"\\n%d\",&given);\r\n    printf(\"\\n\");\r\n    int num=given;\r\n    printf(\"%d\\n\",given);\r\n    int term;\r\n    int prime;\r\n    int lprime=0;\/\/largest prime\r\n    int i;\r\n    while (num>99)\r\n    {\r\n        term=num%1000;\r\n        prime=1;\r\n        printf(\"%d, \",term);\r\n        for (i=2;i<=term\/2;++i)\r\n        {\r\n            if (term%i==0) prime=0;\r\n        }\r\n        if (prime==1)\r\n        {\r\n            if(term>lprime) lprime=term;\r\n        }\r\n\r\n        num=num\/10;\r\n    }\r\n    if (lprime==0) printf(\"\\nNo prime numbers\");\r\n    else printf(\"\\nLargest prime=%d\", lprime);\r\n}"
                },
                {
                    "Question":"You have \u2018n\u2019 number of balls numbered from 1 through n (1,2,3,.......,n). You are playing a game\r\nwhere you select any two cards each of which has some integer number printed over it. Your\r\ntask is to choose only those balls whose associated numbers are a multiple of either of the two\r\nnumbers printed on the cards that you have selected (i.e any one or both the card numbers).\r\nWrite a program for this. Your input should be three integer numbers, \u2018n\u2019 representing the\r\nnumber of balls and \u2018x\u2019 and \u2018y\u2019, each representing one of the two numbers on the cards that\r\nyou select. Your output should be those balls (i.e the number associated with the balls) that\r\nsatisfy the game criteria. Print \u201CGame Lost\u201D in case no balls can be selected. You can assume\r\nall positive integer values including 1 but excluding 0 for \u2018n\u2019, \u2018x\u2019 and \u2018y\u2019.\r\n\r\nExample 1:\r\nInput:\r\nn = 20\r\nx = 4\r\ny = 7\r\n\r\nOutput:\r\n4\r\n7\r\n12\r\n14\r\n16\r\n20\r\n\r\n[Reason: The numbers on the output balls all satisfy the condition that they are either a multiple of 4 or 7 or both.]",
                    "Answer":"\/* You have \u2018n\u2019 number of balls numbered from 1 through n (1,2,3,.......,n). You are playing a game\r\nwhere you select any two cards each of which has some integer number printed over it. Your\r\ntask is to choose only those balls whose associated numbers are a multiple of either of the two\r\nnumbers printed on the cards that you have selected (i.e any one or both the card numbers).\r\nPrint \u201CGame Lost\u201D in case no balls can be selected. You can assume\r\nall positive integer values including 1 but excluding 0 for \u2018n\u2019, \u2018x\u2019 and \u2018y\u2019.*\/\r\n\r\n#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/taking the number of balls as input\r\n    int n;\r\n    printf(\"enter the number of balls:\");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/the number that is printed on the two cards that we have picked are taken as input\r\n    int x,y;\r\n    printf(\"enter the number on the first card:\");\r\n    scanf(\"%d\",&x);\r\n    printf(\"enter the number on the second card:\");\r\n    scanf(\"%d\",&y);\r\n\r\n    \/*in order to check if we can select any ball at all or\r\n    not,we are initializing the count variable which will count the\r\n    number of balls that we can pick.*\/\r\n    int count=0;\r\n\r\n    \/\/finding the ball whose number is either a multiple of x or y\r\n    for (int i=1;i<=n;i++)\r\n    {\r\n        \/\/checking if the number on the ball is a multiple of x\r\n        if (i%x==0)\r\n        {\r\n            printf(\"%d \\n\",i);\r\n            count+=1;\r\n        }\r\n\r\n        \/\/checking if the number on the ball is a multiple of y\r\n        else if(i%y==0)\r\n        {\r\n            printf(\"%d \\n\",i);\r\n            count+=1;\r\n        }\r\n    }\r\n\r\n    \/\/if count==0,there are no balls to be selected\r\n    if (count==0)\r\n    {\r\n        printf(\"Game Lost \\n\");\r\n    }\r\n    else\r\n    {\r\n\r\n    }\r\n\r\n}"
                },
                {
                    "Question":"Take input 3 numbers from the keyboard. Find out the number of digits of each of the three\r\nnumbers. Hence find out whether you can construct a triangle whose three sides have length\r\nequal to the number of digits of the three numbers. Also if a triangle is possible, then comment\r\non its type based on the length of its side, i.e whether it is a scalene, isosceles or equilateral\r\ntriangle. You should display i) the number of digits of each of the three numbers that you\r\nhave taken as input, ii) print \u2018Yes\u2019 if you can form a triangle with sides equal to the number of\r\ndigits, \u2018No\u2019 otherwise and iii) display \u2018Equilateral\u2019, \u2018Isosceles\u2019 or \u2018Scalene\u2019 based on the nature of\r\ntriangle, if you can form the triangle, else print \u2018Triangle not possible\u2019. To include more digits\r\nwithin a given number, you can assume \u2018long int\u2019 type data while taking input. You may further\r\nassume that the input numbers will always fall within the range of \u2018long int\u2019.\r\n\r\nExample 1:\r\nInput:\r\n52\r\n286325\r\n74523\r\nOutput:\r\n2\r\n6\r\n5\r\nYes\r\nScalene\r\n[Reason: The first three outputs show the number of digits of the three input numbers. You can\r\nform a triangle with sides 2,6 and 5, which is a scalene triangle.]\r\n\r\nExample 2:\r\nInput:\r\n1\r\n23\r\n7564\r\nOutput:\r\n1\r\n2\r\n4\r\nNo\r\nTriangle not possible",
                    "Answer":"\/\/program to input a number and find the number of digits and check whether a triangle is possible using those numbers\r\n#include <stdio.h>\r\n\/\/declaring i as a global variable\r\nint i;\r\n\/\/defining a funtion calculate to find the number of digits\r\nlong int calculate (long int x)\r\n{\r\n  i = 0;\r\n  while (x > 0)\r\n    {\r\n      x = x \/ 10;\r\n      i++;\r\n    }\r\n  return i;\r\n}\r\n\r\nint main ()\r\n{\r\n  long int a, b, c;\r\n  printf (\"enter the three numbers \\n\");\r\n  \/\/accepting values from the user\r\n  scanf (\"%ld %ld %ld\", &a, &b, &c);\r\n  long int x = calculate (a);\r\n  long int y = calculate (b);\r\n  long int z = calculate (c);\r\n  printf(\"%ld \\n %ld \\n %ld \\n \",x,y,z);\r\n  \/\/checking whether the following triangle is possible or not\r\n  if (x + y > z && y + z > x && z + x > y)\r\n    {\r\n      printf (\"triangle is possible \\n\");\r\n      if (x == y && y == z)\r\n\tprintf (\"equilateral \\n\");\r\n      else if ((x == y && y != z) || (y == z && z != x) || (z == x && x != y))\r\n\tprintf (\"isosceles \\n\");\r\n      else\r\n\tprintf (\"scalene \\n\");\r\n\r\n    }\r\n  else\r\n    printf (\"triangle not possible\");\r\n  return 0;\r\n}"
                },
                {
                    "Question":"Consider the following series of numbers, 4,8,14,22,32 . . . . This series follows a specific pattern.\r\nFind out the pattern. Hence take a number \u2018k\u2019 as input and print the first k terms of the series\r\naccording to the rules of the pattern. Also take another integer \u2018n\u2019 as input and print the\r\ndifference between the (n+1)\u2019th term and the n\u2019th term of the series. You must write the\r\nlogic of the pattern as well as the general formula for its n\u2019th term as comments\r\nbelow your code. You can assume that n starts from 1.",
                    "Answer":"\/*Consider the following series of numbers, 4,8,14,22,32 . . . . This series follows a specific pattern.\r\nFind out the pattern. Hence take a number \u2018k\u2019 as input and print the first k terms of the series\r\naccording to the rules of the pattern. Also take another integer \u2018n\u2019 as input and print the\r\ndifference between the (n+1)\u2019th term and the n\u2019th term of the series*\/\r\n\r\n#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/taking k as input\r\n    int k;\r\n    printf(\"enter the value of k:\");\r\n    scanf(\"%d\",&k);\r\n\r\n    \/*IMPORTANT OBSERVATION:IF WE LOOK AT THE DIFFERENCE BETWEEN THE SUCCESIVE TERMS,THE DIFFERENCES ARE IN AP.\r\n    SINCE IN AN A.P. THE GENERAL TERM IS A LINEAR EXPRESSION IN N,THE GENERAL TERM IN THIS SERIES WILL BE OF THE FORM:\r\n    A*N^2 +B*N+C.AFTER CALCULATING THE VALUE OF A,B AND C, THE GENERAL TERM(NTH TERM IS)=(N^2 +N +2) *\/\r\n\r\n    \/\/printing the first k terms as input\r\n    for (int i=1;i<=k;i++)\r\n    {\r\n        int j=(i*i+i+2);\r\n        printf(\"%d \\n\",j);\r\n    }\r\n\r\n    \/\/taking n as input\r\n    int n;\r\n    printf(\"enter the value of n as input:\");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/to find the difference between the nth and (n+1)th term of the series\r\n    int ta=n*n+n+2;\r\n    int tb=(n+1)*(n+1)+(n+1)+2;\r\n    int dif=tb-ta;\r\n    printf(\"the difference between the %dth and %dth term is:%d\",n,(n+1),dif);\r\n\r\n}"
                },
                {
                    "Question":"Consider the infinite summation formula for calculating the value of \u2018x\u2019 as given below. Take\r\ntwo integer numbers \u2018n\u2019 and \u2018k\u2019 as inputs. Find out the value of \u2018x\u2019 by summing the first \u2018n\u2019\r\nterms according to the formula correct to three decimal places. Hence, multiply the value of x\r\nwith \u2018k\u2019 and consider the floor of the result, i.e the integer value immediately lower than the\r\nmultiplication value, and check whether the floor value is a prime number or not. You have to\r\ndisplay the value of \u2018x\u2019 correct up to three decimal places and print \u2018Prime\u2019 or \u2018Not prime\u2019 based\r\non the primality of floor(x*k). You can calculate the floor value by any way you feel like. Also\r\nmake sure to take appropriate variable data types. Read the question clearly, you will get all\r\nthe necessary details about data types.\r\n\r\nx =\r\n(1 \u00D7 2)3\r\n((1 \u00D7 2)(1 + 2))2 +\r\n\r\n(2 \u00D7 3)3\r\n((2 \u00D7 3)(2 + 3))2 +\r\n\r\n(3 \u00D7 4)3\r\n((3 \u00D7 4)(3 + 4))2 + \u00B7 \u00B7 \u00B7 (1)\r\n\r\nExample 1:\r\nInput:\r\nn=2\r\nk=677\r\nOutput:\r\n0.462\r\nNot prime\r\n[Reason: As n=2, the value of \u2018x\u2019 as per the given formula considering only the first two terms\r\ncorrect upto three decimal places is 0.462. Now 0.462 x k=0.462 x 677=312.774. Consider the\r\nfloor of the answer, i.e 312, which is not a prime number.]",
                    "Answer":"\/*program to find the sum of infinite series and multiplying\r\nthe sum with k with a random number k and checking whether it is\r\na prime number or not*\/\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\nint main()\r\n{\r\n    \/\/varible declaration\r\n    int n,k,c=0,p, FLAG=1,i;\r\n    float x=0.0,d=0.0;\r\n\r\n    \/\/taking input from the user\r\n    printf(\"INPUT:\\n\");\r\n    printf(\"n=\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"k=\");\r\n    scanf(\"%d\",&k);\r\n\r\n    \/\/calculation of the sum of series and printing it\r\n    for(int i=1;i<=n;i++)\r\n    {\r\n        d=(i*(i+1))*(i+(i+1));\r\n        x=x+(pow((i*(i+1)),3))\/(pow(d,2));\r\n    }\r\n    printf(\"\\nOUTPUT:\\n\");\r\n    printf(\"%0.3f\\n\",x);\r\n\r\n    x = floorf(x * 1000) \/ 1000;\r\n    printf(\"%0.3f*k=%0.3f\\n\",x,(x*k));\r\n    \/\/to multiply and round of the value\r\n\r\n    p=floor(x*k);\r\n    printf(\"Floor(%0.3f)=%d\\n\",(x*k),p);\r\n    \/\/checking for prime number and printing the same\r\n    for(i=2;i<=sqrt(p);i++)\r\n   {\r\n      if(p%i == 0)\r\n      {\r\n         FLAG = 0;\r\n         break;\r\n      }\r\n   }\r\n   if(FLAG == 1)\r\n      printf(\"Prime Number\",p);\r\n   else\r\n      printf(\"Not Prime\",p);\r\n\r\n    return 0;\r\n\r\n    \/\/program completed\r\n}"
                },
                {
                    "Question":"Write a program to perform the following tasks,\r\n(A) Take input two positive integer numbers \u2018n\u2019 and \u2018k\u2019.\r\n(B) Hence successively keep on taking positive integer numbers as input until you encounter\r\n\u2018k\u2019 multiples of \u2018n\u2019, i.e all the various different multiples of \u2018n\u2019 appearing for a total of \u2018k\u2019\r\ntimes in the input stream.\r\n(C) Find out the maximum and the minimum among those \u2018k\u2019 multiples of \u2018n\u2019 and display\r\nthem.\r\nYou have to use a do-while loop for this question and cannot use arrays. Do not\r\nconsider 0 or negative numbers as inputs anywhere.\r\nInitial Input:\r\nn=5\r\nk=3\r\nSuccessive Inputs:\r\n34\r\n23\r\n25\r\n78\r\n100\r\n32\r\n11\r\n85\r\n(STOP HERE, NO MORE INPUT)\r\nOutput:\r\nMaximum multiple: 100\r\nMinimum multiple: 25\r\n[Reason: As n=5 and k=3, you would need to stop taking successive integers as input once you\r\nencounter any 3 multiples of 5. In the given input stream, the 3 multiples of 5 are 25, 100 and\r\n85, in that order. You stop taking further input once you encounter a total of 3 multiples of 5,\r\ni.e 85 in this case. Among the three multiples, 25, 100 and 85, 25 is the minimum and 100 is\r\nthe maximum]",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/ Variable Declaration\r\n    \/\/ count : To keep track of number of multiples of n; num : To store user inputed numbers\r\n    \/\/ max : To store maximum multiple of n; min : To store minimum multiple of n\r\n    int n, k, count = 0, num, max = 0, min;\r\n\r\n    \/\/ Prompting user for input and accepting input.\r\n    printf(\"Enter 2 positive integers (n & k).\\n\");\r\n    scanf(\"%d%d\", &n, &k);\r\n\r\n    min = 2000000000;\r\n\r\n    \/\/ Loops continues until k multiples of n have been entered\r\n    do\r\n    {\r\n        \/\/ Prompting user for input and accepting input\r\n        printf(\"Enter another positive integer.\\n\");\r\n        scanf(\"%d\",&num);\r\n\r\n        \/\/ If num is not a multiple of n, it skips all succeeding statements and goes to next iteration.\r\n        if (num % n != 0)\r\n            continue;\r\n\r\n        \/\/ If num is greater than max, num replaces max\r\n        max = (max < num) ? num : max;\r\n        \/\/ If num is less than min, num replaces min\r\n        min = (min > num) ? num : min;\r\n\r\n        \/\/ If num is a multiple of n, it doesn't enter if condition (continue statement) and reaches this statement for increasing count of number of multiples of n.\r\n        count++;\r\n    }\r\n    while(count < k);\r\n\r\n    \/\/ Printing output for user.\r\n    printf(\"\\nMaximum multiple of (n) %d is %d\", n, max);\r\n    printf(\"\\nMinimum multiple of (n) %d is %d\", n, min);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program to read an integer n, and then print the value of factorial n \r\n(i.e., n!). Assume that n < 10. For example, if n = 5, then the program should print \r\n120.",
                    "Answer": "#include<stdio.h>\r\n\r\n\/\/it is given that n will not be greater than 10\r\n\r\nint main()\r\n{\r\n    int n,i,fact;\r\n    \/\/scanning value of n\r\n    printf(\"Please enter n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    fact=1;\r\n\r\n    \/\/loop for calculating factorial\r\n    for(i=2;i<=n;++i)\r\n    {\r\n        fact=fact*i;\r\n    }\r\n\r\n    \/\/printing value of factorial\r\n    printf(\"The factorial of %d is: \\t%d\\n\",n,fact);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C program which reads an integer n and then prints the sum of digits of n. \r\nFor example, if n is 2020 it should print 4.",
                    "Answer": "#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    int n,i,sum;\r\n    sum=0;\r\n\r\n    \/\/scanning value of n\r\n    printf(\"Please enter n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    i=n;        \/\/copying value of n to i so that we can conserve the value of n\r\n\r\n    \/\/loop for finding sum of digits\r\n    while(i>0)\r\n    {\r\n        sum=sum+i%10;  \/\/extracting last digit of n\r\n        i=i\/10;\r\n    }\r\n    printf(\"The sum of digits of %d is:\\t%d\\n\",n,sum);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Cosine function can be expressed as the following infinite series form:\r\n cosine(x) = 1 - (1\/2!)x2 + (1\/4!)x4\r\n- (1\/6!)x6+\u2026..\r\nWrite a C program which shall take a floating-point variable x and evaluate the \r\nabove cosine series to the 5th term of the series and print the approximate value \r\nof cosine(x). Do not call the factorial function.",
                    "Answer": "#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    float x;\r\n    double sum, term;\r\n    int i;\r\n    int k=5; \/\/value of k can be any natural number. it is 5 for the sake of assignment.\r\n\r\n    \/\/scanning value of x\r\n    printf(\"Please enter x:\\n\");\r\n    scanf(\"%f\",&x);\r\n\r\n    \/\/loop for finding value of cosine\r\n    for(i=1,sum=1,term=1;i<k;++i)\r\n    {\r\n        term*=-1*x*x\/(2*i*(2*i-1));\r\n        sum+=term;\r\n    }\r\n\r\n    printf(\"The sum of cosine series upto 5 terms is:\\t%lf\\n\",sum);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a program which reads the month number of a leap year as an integer m. \r\nWith January as 1, and December as 12. The program should then print the \r\nnumber of days in the month. Use the case-switch statement.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int m;\r\n    printf(\"Enter the number of month: \");\r\n    scanf(\"%d\",&m);     \/\/reading integer m\r\n\r\n    switch(m)\r\n    {\r\n        case 1: printf(\"There are 31 days in January.\\n\");\r\n                break;\r\n        case 2: printf(\"There are 29 days in February.\\n\");     \/\/it is given that months are from a leap year.\r\n                break;\r\n        case 3: printf(\"There are 31 days in March.\\n\");\r\n                break;\r\n        case 4: printf(\"There are 30 days in April.\\n\");\r\n                break;\r\n        case 5: printf(\"There are 31 days in May.\\n\");\r\n                break;\r\n        case 6: printf(\"There are 30 days in June.\\n\");\r\n                break;\r\n        case 7: printf(\"There are 31 days in July.\\n\");\r\n                break;\r\n        case 8: printf(\"There are 31 days in August.\\n\");\r\n                break;\r\n        case 9: printf(\"There are 30 days in September.\\n\");\r\n                break;\r\n        case 10: printf(\"There are 31 days in October.\\n\");\r\n                break;\r\n        case 11: printf(\"There are 30 days in November.\\n\");\r\n                break;\r\n        case 12: printf(\"There are 31 days in December.\\n\");\r\n                break;\r\n        default: printf(\"Not a valid month number.\\n\");         \/\/if any input other than 1-12 is given, then an error message is displayed\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "A Ramanujan number is a positive integer that is expressible as the sum of two \r\ncubes in two different ways. Write a program that takes an integer n as input and \r\nprints all integers less than or equal to n that can be expressed as the sum of two \r\ncubes in two different ways, i.e., find distinct positive integers a, b, c, and d such \r\nthat a3 + b3 = c3 + d3 <= n. Use four nested for loops. The smallest Ramanujan \r\nnumber is 1729, since 103 + 93 = 123 + 13 = 1729. (Please read the 3's as cubes)",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n,a,b;  \/\/a and b are integers, sum of whose cubes wil be calculated\r\n    int count;  \/\/count is the number of ways in which i can be represented as sum of two cubes\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    for(int i=1;i<=n;i++)       \/\/loop for iterating all integers till n\r\n    {\r\n        count=0;\r\n\r\n        for(a=1;(a*a*a)<i;a++)\r\n        {\r\n            for(b=a+1;(a*a*a+b*b*b)<=i;b++) \/\/b starts from a+1 so as to avoid repetition\r\n            {\r\n                if((a*a*a+b*b*b)==i)      \/\/checking condition for ramanujan number\r\n                {\r\n                  count++;\r\n                }\r\n            }\r\n        }\r\n        if(count==2)\r\n        {\r\n            printf(\"%d is a Ramanujan number.\\n\",i);\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a program that reads an integer N and prints a (2N + 1)-by-(2N + 1) \r\ndiamond like the one below. \r\n. . . . * . . . . \r\n. . . * * * . . . \r\n. . * * * * * . . \r\n. * * * * * * * . \r\n* * * * * * * * * \r\n. * * * * * * * . \r\n. . * * * * * . . \r\n. . . * * * . . . \r\n. . . . * . . . .",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);     \/\/reading integer n\r\n\r\n    \/\/loop for upper half of diamond\r\n    for(int row=0;row<n+1;row++)\r\n    {\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots before stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        for(int stars=0;stars<2*row+1;stars++)  \/\/loop for printing stars\r\n        {\r\n            printf(\"*\");\r\n        }\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots after stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    \/\/loop for lower half of diamond\r\n    for(int row=n-1;row>=0;row--)\r\n    {\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots before stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        for(int stars=0;stars<2*row+1;stars++)  \/\/loop for printing stars\r\n        {\r\n            printf(\"*\");\r\n        }\r\n        for(int dots=0;dots<n-row;dots++)       \/\/loop for printing dots after stars\r\n        {\r\n            printf(\".\");\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read the value of an integer number N, and compute\r\nthe sum S.\r\nS = 1 +1\/2+ 2\/3 + 3\/4 +4\/5+ 5\/6 + ... to N terms\r\nNote that the sum S must be a floating-point number\r\n(float or double). Provide outputs for N=5, 10, 15 and 20.",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    float term=1;\r\n    float sum=0;\r\n\r\n    for(int count=1;count<=n;count++){\r\n        sum+=term;\r\n        term=(float)count\/(count+1);\r\n    }\r\n\r\n    printf(\"The sum is: %.2f\\n\",sum);\r\n    printf(\"\\n\");\r\n\r\nreturn 0;\r\n}"
                },
                {
                    "Question":"Write a program, which reads an integer N and prints N\r\nrows in the form of triangle with \u2018*\u2019 in the following\r\nmanner (shown for N=10) , such that i th row (i=1,2, ..N)\r\nprints i \u2018*\u2019 consecutively.\r\n*\r\n**\r\n***\r\n****\r\n*****\r\n******\r\n*******\r\n********\r\n*********\r\n**********\r\n\r\nProvide outputs for N=6, and 15.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    for(int i=1;i<=n;i++){\r\n        for(int j=1;j<=i;j++){\r\n            printf(\"*\");\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a program that reads an integer N, and prints the\r\nsum of prime numbers, which are less than N. Compute\r\nthe values for N=2, 4, 8, 16, 32, 64 and 128, and provide\r\nthe result in a separate output file (named result.txt).\r\nUse standard output redirection feature to generate the\r\noutput file.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of n:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    int sum=0;\r\n\r\n    for(int i=2;i<n;i++){\r\n        int j;\r\n        for(j=2;j<i;j++){\r\n            if(i%j==0){\r\n                break;\r\n            }\r\n        }\r\n        if(j==i){\r\n            sum+=i;\r\n        }\r\n    }\r\n\r\n    printf(\"The sum of all prime numbers less than %d = %d\\n\\n\",n,sum);\r\n\r\n    return 0;\r\n}"
                }    
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question": "What is printed by the following program when the input N is the number formed by the last two \r\ndigits of your roll number? Explain the execution.\r\n\r\n#include <stdio.h>\r\nint main() \r\n{\r\n    int i, j, N, count=0;\r\n    scanf(\"%d\", &N);\r\n    printf(\"%d\\n\", N); \r\n    N += 10;\r\n    for (i=0; i< N; i++) \r\n          for (j=i; j>=0; j--) \r\n                count++;\r\n    printf(\"%d\\n\", count); \r\n}",
                    "Answer": "Let N = 22. N+=10 makes N=32. For the for loop the variable i starts from 0.\r\nWhen i = 0, the inner loop j = 0 is initialised and as j>=0, count = count+1 = 1\r\nand j decreases to -1. Again i = 1, j = 1 initialises and the loop runs two times\r\nand count = count + 2. For i=2, j=2 initialises and inner loop runs three times.\r\nThis goes on till i=31 and j=31 and inner loop runs 32 times.\r\nSo count = 0+1+...+32 = 528\r\n\r\nOutput:\r\n22\r\n528"
                },
                {
                    "Question": "Write a C program which reads a sequence of positive integers till the user types -1. \nIt counts the lengths of the non-decreasing sub-sequences, and prints the maximum among them. \nFor example, for a given input {6, 7, 2, 29, 17, 5, 5, 11, 6, 7, 8, -1), the non-decreasing sub sequences are: \n{6,7}, {2, 29}, {17}, {5, 5, 11} and {6, 7, 8]. Thus, the answer should be 3. \nDo not use an array. Assume that the first integer read is not - 1 and a single integer is a sequence of length 1",
                    "Answer": "#include <stdio.h>\r\n\r\nint main(){\r\n    int prevno, curno, curlength, maxlength;\r\n    scanf(\"%d\",&prevno);\r\n    scanf(\"%d\",&curno);\r\n    curlength = maxlength = 1;\r\n    while(curno!=-1){\r\n        if(curno>=prevno){\r\n            curlength++;\r\n        }else{\r\n            if(curlength>maxlength){\r\n                maxlength = curlength;\r\n            }\r\n            curlength = 1;\r\n        }\r\n        prevno = curno;\r\n        scanf(\"%d\",&curno);\r\n    }\r\n    if(curlength>maxlength){\r\n        maxlength = curlength;\r\n    }\r\n    printf(\"Maximum length is %d\\n\",maxlength);\r\n    return 0;\r\n}"
                },
                {
                    "Question":"We are given eight integers in the input to a C program, out of which all except a single one is distinct. \nWe wish to print the value of the unique distinct integer and also determine the variable in the input order\n corresponding to the distinct value. Use a single scanf statement to read all the eight integers, \nsay, a, b, c, d, e.f, g and h. Do not use arrays. \nFor example, if the sequence is 1 1 1 1 1 2 1 1 then we must print that 2 is the unique distinct value\r\n",
                    "Answer":
                    "#include<stdio.h>\r\nint main() {\r\n    int a,b,c,d,e,f,g,h;\r\n    scanf(\"%d %d %d %d %d %d %d %d\", &a, &b, &c, &d, &e, &f, &g, &h );\r\n    if (a+b==c+d) {\r\n        if (e==f) {\r\n            if (e==g) printf (\"8th number (%d) is distinct\\n\",h);\r\n            else printf(\"7th number (%d) is distinct\\n\",g);\r\n        }\r\n        else {\r\n            if (e==g) printf (\"6th number (%d) is distinct\\n\",f);\r\n            else printf(\"5th number (%d) is distinct\\n\",e);\r\n        }\r\n    }\r\n    else {\r\n        if (a==b) {\r\n            if (c==a) printf (\"4th number (%d) is distinct\\n\",d);\r\n            else printf(\"3rd number (%d) is distinct\\n\",c);\r\n        }\r\n        else {\r\n            if (a==c) printf (\"2nd number (%d) is distinct\\n\",b);\r\n            else printf(\"1st number (%d) is distinct\\n\",a);\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question":"Write a C program to read in a positive integer n and find the digit \nwhich occurs the maximum number of times in n along with its frequency. \nFor example, if the input is 567755, then the answer is 5 and its frequency is 3. \nDo not use arrays or any library functions other than standard input and output. \nThere should be only one main function and no other functions defined by you.\r\n",
                    "Answer":
                    "#include<stdio.h>\r\nmain()\r\n{\r\n    int m, n, maxdigit, maxfreq, tempfreq, i, j;\r\n    scanf(\"%d\", &n);\r\n    printf(\"n = %d \\n\", n);\r\n    maxdigit = -1;\r\n    maxfreq = 0;\r\n    for (i = 0; i < 10; i++)\r\n    {\r\n        m = n;\r\n        tempfreq = 0;\r\n        while (m > 0)\r\n        {\r\n            if (m%10 == i) tempfreq++;\r\n            m = m\/10;\r\n        }\r\n        if (tempfreq > maxfreq)\r\n        {\r\n            maxfreq = tempfreq;\r\n            maxdigit = i;\r\n        }\r\n    }\r\n    printf(\"Digit %d has maximum frequency of %d \\n\", maxdigit, maxfreq);\r\n}\r\n"
                },
                {
                    "Question":"Write a program which reads a list of 10 numbers in ascending order. It then prints the \npairs of consecutive numbers having maximum and minimum differences respectively. \nYour program should have only one main() function and no other functions\r\n",
                    "Answer":
                    "#include <stdio.h>\r\nint main(){\r\n    int i, diff, maxdiff = 0, mindiff, k1, k2, mink1, mink2, maxk1, maxk2;\r\n    scanf(\"%d\", &k1);\r\n    scanf(\"%d\", &k2);\r\n    mindiff = diff = k2 - k1;\r\n    maxk1 = mink1 = k1;\r\n    maxk2 = mink2 = k2;\r\n    for(i=2; i<10; i++){\r\n        k1 = k2;\r\n        scanf(\"%d\", &k2);\r\n        diff = k2 - k1;\r\n        if(diff < mindiff){\r\n            mindiff = diff;\r\n            mink1 = k1;\r\n            mink2 = k2;\r\n        }\r\n        if(diff > maxdiff){\r\n            maxdiff = diff;\r\n            maxk1 = k1;\r\n            maxk2 = k2;\r\n        }\r\n    }\r\n    printf(\"Pair with minimum difference: %d %d\\n\", mink1, mink2);\r\n    printf(\"Pair with maximum difference: %d %d\\n\", maxk1, maxk2);\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "A number is an Armstrong number,if the sum of the cubes of its digits is equal to the number\r\nitself.For example,157=13 +53+73 and 371=3\u00B3+73+1\u00B3,etc. are Armstrong numbers.\r\nThe following program is intended to determine whether an input numbernis an Armstrong\r\nnumber.Fill the blanks to complete the statements so that it does the job.Explain the\r\nstatements you add.\r\nint main(){\r\n intn,temp,x,sum;\r\n scanf(\"%d\",&n);\r\n temp=n;\r\n while(n>0){\r\n  X\r\n   sum+=\r\n                           (A)\r\n                           (B)\r\n                           (C)n=\r\n }\r\n (temp == sum)?printf(\"Yes\"):printf(\"No\");\r\n return0;\r\n}",
                    "Answer": "a) x = n%10\r\nThis statement stores the left-most digit of n in variable x\r\nb) sum += x*x*x;\r\nSince we need to see if the numbers  is the sum of cubes of digits, we need to increment sum by x*x*x, that is x^3.\r\n\r\nAlso, this means sum  has to be initialised to 0. so first line should be   int n, temp,x,sum=0;\r\nc) n = n\/10;\r\nThis statement would divide n by 10 and return an integer value (i.e. floor division), thus removing the digit already considered in the sum above. This iterates to give sum of cubes of digits."
                },
                {
                    "Question":"We need to sort in non-decreasing order), an input unsorted array A of n integers \nwhere n is a power of 2. First we compare n\/2 mutually disjoint (consecutive pairs), \nand set cach such pair in right order. \nIf n = 8 and A = 8, 7, 6,5,1,3,2,1} was the input then we have A= {7,8,5,6,3, 1, 1, 2} after the first iteration. \nWe will have exactly k iterations where n = 2. In iteration 2, A will become A = {5,6,7,8,1,2,3,1} \nbecause we will process 1 = n\/2 = 8\/2 pairs of sequences of length two \u2013 \ne.g., {7,8} and {5,6}, to get {5,6,7,8} and {3,1} and {1,2} to get {1,2,3,4} resulting in A= {5,6,7,8,1,2,3,}. \nFinally, in the third iteration, we will merge only one pair of length four sequences {5,6,7,8} and {1,2,3,4} \nto get the sorted A = {1, 2, 3, 4, 5, 6, 7, 8). \nWrite an iterative C program with arrays but no recursive function for doing this job. \nPrint the inputs n and A and the sorted array A. Assume that n < 210.\r\n\r\n",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\/\/ Merges two subarrays of arr[].\r\n\/\/ First subarray is arr[l..m]\r\n\/\/ Second subarray is arr[m+1..r]\r\nvoid merge(int arr[], int l, int m, int r)\r\n{\r\n\tint i, j, k;\r\n\tint n1 = m - l + 1;\r\n\tint n2 = r - m;\r\n\r\n\t\/* create temp arrays *\/\r\n\tint L[n1], R[n2];\r\n\r\n\t\/* Copy data to temp arrays L[] and R[] *\/\r\n\tfor (i = 0; i < n1; i++)\r\n\t\tL[i] = arr[l + i];\r\n\tfor (j = 0; j < n2; j++)\r\n\t\tR[j] = arr[m + 1 + j];\r\n\r\n\t\/* Merge the temp arrays back into arr[l..r]*\/\r\n\ti = 0; \/\/ Initial index of first subarray\r\n\tj = 0; \/\/ Initial index of second subarray\r\n\tk = l; \/\/ Initial index of merged subarray\r\n\twhile (i < n1 && j < n2) {\r\n\t\tif (L[i] <= R[j]) {\r\n\t\t\tarr[k] = L[i];\r\n\t\t\ti++;\r\n\t\t}\r\n\t\telse {\r\n\t\t\tarr[k] = R[j];\r\n\t\t\tj++;\r\n\t\t}\r\n\t\tk++;\r\n\t}\r\n\r\n\t\/* Copy the remaining elements of L[], if there\r\n\tare any *\/\r\n\twhile (i < n1) {\r\n\t\tarr[k] = L[i];\r\n\t\ti++;\r\n\t\tk++;\r\n\t}\r\n\r\n\t\/* Copy the remaining elements of R[], if there\r\n\tare any *\/\r\n\twhile (j < n2) {\r\n\t\tarr[k] = R[j];\r\n\t\tj++;\r\n\t\tk++;\r\n\t}\r\n}\r\n\r\n\/* l is for left index and r is right index of the\r\nsub-array of arr to be sorted *\/\r\nvoid mergeSort(int arr[], int l, int r)\r\n{\r\n\tif (l < r) {\r\n\t\t\/\/ Same as (l+r)\/2, but avoids overflow for\r\n\t\t\/\/ large l and h\r\n\t\tint m = l + (r - l) \/ 2;\r\n\r\n\t\t\/\/ Sort first and second halves\r\n\t\tmergeSort(arr, l, m);\r\n\t\tmergeSort(arr, m + 1, r);\r\n\r\n\t\tmerge(arr, l, m, r);\r\n\t}\r\n}\r\n\r\n\/* UTILITY FUNCTIONS *\/\r\n\/* Function to print an array *\/\r\nvoid printArray(int A[], int size)\r\n{\r\n\tint i;\r\n\tfor (i = 0; i < size; i++)\r\n\t\tprintf(\"%d \", A[i]);\r\n\tprintf(\"\\n\");\r\n}\r\n\r\n\/* Driver code *\/\r\nint main()\r\n{\r\n\tint arr[] = { 12, 11, 13, 5, 6, 7 };\r\n\tint arr_size = sizeof(arr) \/ sizeof(arr[0]);\r\n\r\n\tprintf(\"Given array is \\n\");\r\n\tprintArray(arr, arr_size);\r\n\r\n\tmergeSort(arr, 0, arr_size - 1);\r\n\r\n\tprintf(\"\\nSorted array is \\n\");\r\n\tprintArray(arr, arr_size);\r\n\treturn 0;\r\n}"
                },
                {
                    "Question": "A wordsis calledx-ish if every letter ofxis contained insin some position.  \nWrite a programthat, given two wordssandx(read as strings), detects ifsisx-ish or not.  \nFor example, ifx=“elf”, then the word “tasteful” isx-ish (or elf-ish) whereas \nthe word “malfunction” is not elf-ish.\nAssume that the two input strings will have lengths at most 49.  \nAlso, assume that the inputstrings contain only lowercase letters.  \nYou are not allowed to use any library functions otherthan strlen and standard input/output.  \nYour program should have only themain() function.",
                    "Answer": "null"
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question":"Write a C program to perform the following:\r\n(a) Take two binary numbers (as long long int) of equal length as input. You have to check if\r\nthe inputted numbers are binary or not, i.e each digit of both the numbers should be either\r\n1 or 0. Also count the number of bits in both the numbers. Display an error message if\r\nany one of the numbers is not a binary number or the two numbers are not of the same bit\r\nlength, and exit the program.\r\n(b) If both the numbers are valid binary numbers and they are of the same bit length, then,\r\nperform bitwise XOR operation of the two binary numbers from the least significant bit\r\n(i.e the rightmost bit) onwards. Display the bit by bit XOR output on the screen as you\r\n\r\nprocess each bit of the two numbers from right to left. You cannot use any bitwise oper-\r\nators available in the C library.\r\n\r\nNOTE:- The bitwise XOR output that you will display will actually be in the reverse format\r\nof the correct bitwise XOR. That is okay, do not worry. Also you do not need to generate any\r\n\r\nnumber or such for the bitwise XOR operation, simply print \u20181\u2019 or \u20180\u2019 side by side as per the cor-\r\nrect operation. You can assume that the most significant bit of both the input numbers will be 1.\r\n\r\n[ Bitwise XOR rules:\r\n0 XOR 0 = 0\r\n0 XOR 1 = 1\r\n1 XOR 0 = 1\r\n1 XOR 1 = 0 ] [30 Marks]\r\nExample 1:\r\nInput:\r\n10010\r\n11001\r\nOutput:\r\n11010 [Note that this is the reverse of the actual bitwise XOR]\r\nExample 2:\r\nInput:\r\n10010\r\n1101\r\nOutput:\r\nError\r\nExample 3:\r\nInput:\r\n10230\r\n11011\r\nOutput:\r\nError",
                    "Answer":"\/* Take two binary numbers as input.Check if\r\nthe inputted numbers are binary or not.Also count the number of bits in both the numbers.*\/\r\n\r\n\/* If both the numbers are valid binary numbers and they are of the same bit length, then,\r\nperform bitwise XOR operation of the two binary numbers from the least significant bit onwards.*\/\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main()\r\n{\r\n    \/\/initializing the variables\r\n    long int n1,n2;\r\n\r\n    \/\/taking the numbers as input\r\n    printf(\"enter the binary number1:\");\r\n    scanf(\"%ld\",&n1);\r\n    printf(\"enter the binary number2:\");\r\n    scanf(\"%ld\",&n2);\r\n\r\n    \/*NOTE:IN THE PROCESS OF FINDING THE NUMBER OF DIGITS OF N1 AND N2,\r\n    THE ORIGINAL VALUE OF N1 AND N2 GETS MODIFIED DURING THE UPDATE EXPRESSSION\r\n    OF THE WHILE LOOP.TO ENSURE THAT THE VALUE DOESN'T GETS LOST,I AM COPYING THEIR VALUES\r\n    IN AUXULLARY VARIBALES TEMP1 AND TEMP2*\/\r\n    int temp1=n1;\r\n    int temp2=n2;\r\n\r\n    \/\/count variables are used to count the number of digits\r\n    int count1=0,count2=0;\r\n\r\n    \/\/checking if the number1 is binary and finding its number of digits\r\n    while (n1>0)\r\n    {\r\n        if (n1%10!=0 && n1%10!=1)\r\n        {\r\n            \/\/if there is any digit other than 1 or 0,break the loop\r\n            printf(\"the number1 is not a binary number.\\n\");\r\n            count1=0;\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            \/\/counter is updated\r\n            count1+=1;\r\n        }\r\n        n1=n1\/10;\r\n    }\r\n\r\n    \/\/checking if the number2 is binary and finding its number of digits\r\n    \/\/same process is again repeated\r\n    while (n2>0)\r\n    {\r\n        if (n2%10!=0 && n2%10!=1)\r\n        {\r\n            printf(\"the number2 is not a binary number.\\n\");\r\n            count2=0;\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            count2+=1;\r\n        }\r\n        n2=n2\/10;\r\n    }\r\n\r\n    \/\/checking if the binary numbers are of the same size and printing their size\r\n    \/\/counter==0 means that the numbers are not binary in nature\r\n    if(count1!=0 && count2!=0)\r\n    {\r\n        if (count1==count2)\r\n        {\r\n        printf(\"the numbers are of the same bit.\\n\");\r\n        printf(\"the size of each number is:%d \\n\",count1);\r\n        }\r\n        else\r\n        {\r\n        printf(\"the numbers are not of the same bit.ERROR!\\n\");\r\n        printf(\"the number of digits in number1:%d \\n\",count1);\r\n        printf(\"the number of digits in number2:%d \\n\",count2);\r\n        }\r\n    }\r\n\r\n    \/\/performing the bitwise XOR operation\r\n    \/\/variable t is the result of each bitwise XOR operation\r\n    int t;\r\n\r\n    \/\/we can perform the XOR operation iff both have same number of bits\r\n    if (count1==count2)\r\n    {\r\n        printf(\"the result after XNOR operation is:\");\r\n\r\n        \/\/iterating for both the numbers\r\n        while(temp1>0 && temp2>0)\r\n        {\r\n            \/*XOR IS A BINARY OPEATION.THE OUTPUT DEPENDS\r\n            ON THE VALUE OF EITHER OF THE TWO OPERAND.USING THIS IF ELSE CONSTRUCT\r\n            I AM CHECKING THE VALUE OF THE OPERANDS AND ASSIGNING THE RESULT TO VARIABLE T*\/\r\n\r\n            if(temp1%10==0 && temp2%10==0)\r\n            {\r\n                t=0;\r\n            }\r\n            else if(temp1%10==0 && temp2%10==1)\r\n            {\r\n                t=1;\r\n            }\r\n            else if(temp1%10==1 && temp2%10==0)\r\n            {\r\n                t=1;\r\n            }\r\n            else if(temp1%10==1 && temp2%10==1)\r\n            {\r\n                t=0;\r\n            }\r\n            \/\/printing the results one by one(rightmost bits at first)\r\n            printf(\"%d\",t);\r\n\r\n            \/\/update expression in the while loop\r\n            temp1=temp1\/10;\r\n            temp2=temp2\/10;\r\n        }\r\n    }\r\n}"
                },
                {
                    "Question":"Write a C program to read a sequence of positive integers to detect all possible non-decreasing\r\nsubsequences and print the total number of such non-decreasing subsequences and the length of\r\nthe longest non-decreasing subsequence. Within a series of integer numbers, a non-decreasing\r\nsubsequence is a contiguous sequence of numbers where all are in non-decreasing order. There\r\nmay be more than one non-decreasing subsequence within the entire sequence, your task is to\r\n\r\nprint the total number of such subsequences present and the length of the longest such subse-\r\nquence. You should continuously keep on taking inputs for the sequence until the user enters\r\n\r\nzero or a negative value. Your program must contain only one loop. Both scanning the next\r\ninteger and processing the scanned integer should be done in that loop. Write no functions other\r\nthan main(). Do not use any array.\r\n[Hint:- In order to get the length of longest subsequence, think of a counter variable and how\r\nit is incremented or decremented based on the new input and last input] [30 Marks]\r\nExample:\r\nSuppose you take input the following numbers one by one:-\r\n2, 4, 3, 5, 6, 1, 3, 4, 8, 9, 6, 7, 5, 3, 9, 0 [You stop taking input here]\r\nSo the entire valid sequence is: {2, 4, 3, 5, 6, 1, 3, 4, 8, 9, 6, 7, 5, 3, 9}\r\nList of non-decreasing subsequences: {2, 4}, {3, 5, 6}, {1, 3, 4, 8, 9}, {6,7}, {5},{3, 9}\r\nLongest non-decreasing subsequence: {1, 3, 4, 8, 9}\r\nSo, your output should be,\r\nTotal number of non-decreasing subsequences: 6\r\nLength of the longest non-decreasing subsequence: 5",
                    "Answer":"#include<stdio.h>\r\nint main()\r\n{\r\n    \/*Declaring variables for the number to be accepted, the longest non-decreasing subsequence,\r\n    the length of the current subsequence,the most recent input and the number of non-decreasing subsequences*\/\r\n    int input,longSeq,currentSeq,prevInput,seqNo;\r\n    currentSeq=1;\r\n    \/\/Accepting the value of the first member of the subsequence\r\n    scanf(\"%d\",&input);\r\n    seqNo=0;\r\n    for(longSeq=0;input>0;)\r\n    {\r\n        prevInput = input;\r\n        scanf(\"%d\",&input);\r\n        if(input>=prevInput)\r\n            currentSeq++;\r\n        \/\/Ending the current subsequence and checking if it was the longest\r\n        else\r\n        {\r\n            if(currentSeq>longSeq)\r\n                longSeq=currentSeq;\r\n            currentSeq=1;\r\n        }\r\n        if(currentSeq==1)\r\n            seqNo++;\r\n    }\r\n    printf(\"The number of non-decreasing subsequences is: %d\",seqNo);\r\n    printf(\"\\nThe longest non-decreasing subsequence is: %d\",longSeq);\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to take input a number \u2018n\u2019 and print the following pattern as shown,\r\nFor example,for n=3\r\n*******\r\n*  *  *\r\n* * * *\r\n** * **\r\n* * * *\r\n*  *  *\r\n*******\r\n\r\nFor n=4,\r\n*********\r\n*   *   *\r\n*  * *  *\r\n* *   * *\r\n**  *  **\r\n* *  * *\r\n*  * *  *\r\n*   *   *\r\n*********",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    \/\/ n : To store size of pattern as required by user\r\n    int n;\r\n\r\n    \/\/ Prompting user for input and storing it in n\r\n    printf (\"Enter a number for the size of pattern you want.\\n\");\r\n    scanf (\"%d\", &n);\r\n    printf(\"\\nThe pattern of size %d :\\n\\n\", n);\r\n\r\n    \/\/ To print the 1st row of stars (top edge of outer square)\r\n    for (int i = 0; i <= 2 * n; i++)\r\n        printf (\"* \");\r\n    printf (\"\\n\");\r\n\r\n    \/\/ looping to print rows 2 to n+1(e.g.5)\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        \/\/ To print the 1st column of stars (left edge of outer square)\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on TOP-LEFT part of pattern OUTSIDE the inner square\r\n        for (int j = n - 1; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print TOP-LEFT part of inner square\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on TOP-LEFT part of pattern INSIDE the inner square\r\n        for (int j = 0; j < i; j++)\r\n            printf ((i + j != 2 * n - 3) ? \"  \" : \"* \"); \/\/ i+j = 2n-3 only for the central point of pattern\r\n\r\n        \/\/ To print triangular blank space on TOP-RIGHT part of pattern INSIDE the inner square\r\n        for (int j = 1; j < i; j++)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print TOP-RIGHT part of inner square\r\n        printf ((i != 0) ? \"* \" : \"\"); \/\/ Exception on 2nd row : there is only one star\r\n\r\n        \/\/ To print triangular blank space on TOP-RIGHT part of pattern OUTSIDE the inner square\r\n        for (int j = n - 1; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print the last column of stars (right edge of outer square)\r\n        printf (\"*\\n\");\r\n    }\r\n\r\n    \/\/ looping to print rows n+2(e.g.6) to 2n(e.g.8)\r\n    for (int i = 1; i < n; i++)\r\n    {\r\n        \/\/ To print the 1st column of stars (left edge of outer square)\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-LEFT part of pattern OUTSIDE the inner square\r\n        for (int j = 0; j < i; j++)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print BOTTOM-LEFT part of inner square\r\n        printf (\"* \");\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-LEFT part of pattern INSIDE the inner square\r\n        for (int j = n - 1; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-RIGHT part of pattern INSIDE the inner square\r\n        for (int j = n - 2; j > i; j--)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print BOTTOM-RIGHT part of inner square\r\n        printf ((i != n - 1) ? \"* \" : \"\"); \/\/ Exception on penultimate row : there is only one star\r\n\r\n        \/\/ To print triangular blank space on BOTTOM-RIGHT part of pattern OUTSIDE the inner square\r\n        for (int j = 0; j < i; j++)\r\n            printf (\"  \");\r\n\r\n        \/\/ To print the last column of stars (right edge of outer square)\r\n        printf (\"*\\n\");\r\n    }\r\n\r\n    \/\/ To print the last row of stars (bottom edge of outer square)\r\n    for (int i = 0; i <= 2 * n; i++)\r\n        printf (\"* \");\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}"
                }
                
            ]
        }
    ],
    "ArrayAndStrings": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question": "Using array store N (taken as a user input) numbers (integer elements) that obeys the following equation.\r\nF(i) = F(i-1) + F(i-2), where i>=2 , F(0)=F(1)=1\r\nThen ask the user to tell a position and print the number at that position provided the position is <=N. \nIterate the process using user is exhausted and enters a negative number as position.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    int n,i,x;\r\n    printf(\"Enter no. of integers to be in array :\");\r\n    scanf(\"%d\",&n);\r\n    int f[100];\r\n    f[0]=1;\r\n    f[1]=1;\r\n    for(i=2;i<n;i++)\r\n    {\r\n        f[i]=(f[i-1]+f[i-2]);\r\n    }\r\n    printf(\"Enter the position required :\");\r\n    scanf(\"%d\",&x);\r\n    while(x>=0 && x<n)\r\n    {\r\n        printf(\"The required number at the position = %d \\n\",f[x]);\r\n        printf(\"Enter the position required :\");\r\n        scanf(\"%d\",&x);\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "In a department there are several faculty members who are most commonly known as by their short name. \nFor example, \"Abhijit Das\" is known as AD, \"Partha Pratim Das\" is known as PPD, \n\"Jayanta Mukhopadhyay\" is known as JM, etc. Here, \"Abhijit Das\", \"Partha Pratim Das\", and \n\"Jayanta Mukhopadhyay\" is full name of which AD, PPD, and JM is the short name respectively. \nStudents use to remember the faculty members by their short names only.\r\nWrite a C program that will read a short name first and then keep on asking the \nfull name of the faculty members and read the full name as an array of characters \n(use %c and loop, not %s) until it gets a full name of which short name was entered. \nThen print the full name and the short name (using %s not %c) of the faculty member and come out of the program. \nRead, store, and process the current full name. \nDo not store more than one full name to process later - in other words do not use 2D arrays.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    int len,len1,i,j;\r\n    char sn[10];\r\n    printf(\"Enter a short name :\");\r\n    len=0;\r\n    scanf(\"%c\",&sn[len]);\r\n    while(sn[len]!='\\n')\r\n    {\r\n        len++;\r\n        scanf(\"%c\",&sn[len]);\r\n    }\r\n    len++;\r\n    sn[len]='\\0';\r\n    while(1)\r\n    {\r\n        char fn[50];\r\n        printf(\"Enter full name :\");\r\n        len1=0;\r\n        scanf(\"%c\",&fn[len1]);\r\n        while(fn[len1]!='\\n')\r\n        {\r\n            len1++;\r\n            scanf(\"%c\",&fn[len1]);\r\n        }\r\n        len1++;\r\n        fn[len1]='\\0';\r\n        \r\n        j=0;\r\n        \r\n        for(i=0;i<len1-1;i++)\r\n        {\r\n            if(i==0 && fn[i]!=sn[0])\r\n            {\r\n                break;\r\n            }\r\n            \r\n            if(fn[i]==' ') \r\n            {                \r\n                if(fn[i+1]==sn[j+1])\r\n                {\r\n                    j++;\r\n                }\r\n                \r\n            }\r\n        }\r\n        if((j+1)==(len-1))\r\n        {\r\n            printf(\"Full name :%s\",fn);\r\n            printf(\"Short name :%s\",sn);\r\n            break;\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question" : "4A. Write a C program which does the following:\r\n    1. Declare an array A of integers of size 100. \r\n    2. Read an integer n (n \u2264 100) \r\n    3. Populate the array A with n random integer numbers between -100 and 100 \r\n    4. You need to find the position x to split the array so that the sum of elements on both sides A[0..x] and A[x + 1..n-1] are as close as possible. \n   Print the value of i and the sums of both the subarrays \r\n    5. Print one of the closet pair of elements in the array. The distance between a pair of elements A[i] and A[j] is the absolute value of A[i] - A[j]. \r\nEx1 : If A=[5, 1, 12, 7, 9, 11, 34, 22, 15], the following will be the output : \r\n    Array split position is 5 \r\n    The sums of the left and right subarrays are 45 and 81 \r\n    One closest pair is 5 and 7 \r\nEx2 : If A=[-5, 1, 12, -7, 9, 11, -24, 22, -15], the following will be the output : \r\n    Array split position is 3 \r\n    The sums of the left and right subarrays are 1 and 1 \r\n    One closest pair is 9 and 11 \r\n\r\n4B. Given two strings S and Q, you need to check if Q can be formed from the letters in the string S. \r\nWrite a C program which does the following : \r\n    1. Read a string S as given by the user on a single line (length of the string must be less than 100). \r\n    2. In a loop, do the following : \r\n            a) Read a query string Q comprising of the characters a..z only \r\n            b) If Q is \"end\", quit the program, otherwise print whether Q can be formed from S. \r\nExample : Suppose S is \"the lanes and bylanes of Kolkata\" \r\n        Q=\"baall\" - Q can be formed from S. \r\n        Q=\"balloon\" - Q cannot be formed from S. \r\n        Q=\"bybykk\" - Q cannot be formed from S. \r\n        Q=\"bookin\" - Q cannot be formed from S.",
                    "Answer" : "4A.\r\n\r\n#include <stdio.h>\r\n#include <time.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n    int a[n];\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        a[i]=((rand()%201)-100);\r\n    }\r\n    int sumf,sumb;\r\n    int pos;\r\n    int sf,sb;\r\n    int min=n*200;\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        sumf=0;\r\n        sumb=0;\r\n        for(int j=0;j<=i;j++)\r\n        {\r\n            sumf+=a[j];\r\n        }\r\n        for(int j=i+1;j<n;j++)\r\n        {\r\n            sumb+=a[j];\r\n        }\r\n        int sd=sumf-sumb;\r\n        if(sd<0) sd*=-1;\r\n        if(sd<=min)\r\n        {\r\n            min=sd;\r\n            pos=i+1;\r\n            sf=sumf;\r\n            sb=sumb;\r\n        }\r\n    }\r\n    printf(\"The array elements are : \\n\");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        printf(\"%d  \",a[i]);\r\n    }\r\n    printf(\"\\n\");\r\n    printf(\"Array split position is %d.\\n\",pos);\r\n    printf(\"The sums of the left and right subarrays are %d and %d.\\n\",sf,sb);\r\n\r\n    int m=200;\r\n    int n1,n2;\r\n    n1=a[0];\r\n    for(int i=0;i<n-1;i++)\r\n    {\r\n        for(int j=i+1;j<n;j++)\r\n        {\r\n            int dif=a[i]-a[j];\r\n            if(dif<0) dif*=-1;\r\n            if(dif<m)\r\n            {\r\n                m=dif;\r\n                n1=a[i];\r\n                n2=a[j];\r\n            }\r\n        }\r\n    }\r\n    printf(\"One closest pair is %d and %d\\n\",n1,n2);\r\n    return 0;\r\n}\r\n\r\n4B. \r\n\r\n#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n    char S[100],Q[100];\r\n    printf(\"Enter string S\\n\");\r\n    scanf(\"%[^\\n]s\",S);\r\n    int l1;\/\/stores the length of S\r\n    for(l1=0;S[l1]!='\\0';l1++);\r\n    while(1>0)\r\n    {\r\n        printf(\"Enter string Q\\n\");\r\n    scanf(\"%s\",Q);\r\n    int l2;\r\n    for(l2=0;Q[l2]!='\\0';l2++);\r\n    int cnt=0;\r\n    for(int i=0;i<l2;i++)\r\n    {\r\n        int k=Q[i];\r\n        if(k<97 || k>122)\r\n            cnt=1;\r\n    }\r\n    if(cnt==1)\r\n     {printf(\"Enter string again\\n\");\r\n     continue;}\r\n     if(l2==3)\r\n     {\r\n         if(Q[0]=='e' && Q[1]=='n' && Q[2]=='d')\r\n         {\r\n             printf(\"Program complete\\n\");\r\n             break;\r\n         }\r\n     }\r\n     int cnt2=0;\r\n     for(int i=0;i<l2;i++)\r\n     {\r\n         int cnt3=0;\r\n         int cnt4=0;\r\n         for(int j=0;j<l2;j++)\r\n         {\r\n             if(Q[j]==Q[i])\r\n                cnt3++;\r\n         }\r\n         for(int m=0;m<l1;m++)\r\n         {\r\n             if(S[m]==Q[i])\r\n                cnt4++;\r\n         }\r\n         if(cnt3<=cnt4)\r\n         {\r\n             cnt2++;\r\n         }\r\n     }\r\n     if(cnt2==l2)\r\n     {\r\n         printf(\"Q can be formed from S\\n\");\r\n     }\r\n     else\r\n        printf(\"Q can not be formed from S\\n\");\r\n    }\r\n\r\n}\r\n\r\n"
                },
                {
                    "Question":"Write an interactive C program that converts a positive integer (to be read) , \nwhich is less than 500, to a Roman numeral. For example, 12 will be converted to XII, \n14 will be converted to XIV, 56 will be converted to LVI, and so on.\r\nYou should use only the following Roman numeral symbols: I - one, V - five, X - ten, L - fifty, C - 100. \nDesign the program so that it executes repeatedly, until a value of zero is read in from the keyboard.\r\n\r\nProvide the output for the following sequence of numbers:\r\n25, 48, 92, 243, 137, 337, 485, 7, 18, 50, 100, 200, 300, 400, 500, 0\r\n",
                    "Answer":
                    "#include <stdio.h>\r\n\r\nint main(){\r\n    int a;\r\n    while(1){\r\n        printf(\"Enter the number: \");\r\n        scanf(\"%d\", &a);\r\n        if (a==0) break;\r\n        printf(\"%d\\n\", a);\r\n        char roman_num[15], roman_letters[5]={'C', 'L', 'X', 'V', 'I'};\r\n        int digit=a\/100, pos=digit;\r\n        for (int i=0; i<digit; i++){\r\n            roman_num[i]=roman_letters[0];\r\n        }\r\n        digit=(a%100)\/10;\r\n        for (int i=1; i<4; i+=2){\r\n            if (digit==4 || digit==9){\r\n                roman_num[pos]=roman_letters[i+1];\r\n                switch (digit){\r\n                    case 4: roman_num[pos+1]=roman_letters[i]; break;\r\n                    case 9: roman_num[pos+1]=roman_letters[i-1]; break;\r\n                }\r\n                \/\/OR roman_num[pos+1]=roman_letters[i-(digit\/5)];\r\n                pos+=2;\r\n            }\r\n            else{\r\n                if (digit>=5){\r\n                    roman_num[pos]=roman_letters[i];\r\n                    pos+=1;\r\n                    digit-=5;\r\n                }\r\n                for (int j=pos; j<digit+pos; j++){\r\n                    roman_num[j]=roman_letters[i+1];\r\n                }\r\n                pos+=digit;\r\n            }\r\n            digit=a%10;\r\n        }\r\n        roman_num[pos]='\\0';\r\n        printf(\"%d in Roman Numerals: %s\\n\\n\", a, roman_num);\r\n    }\r\n}\r\n"
                },
                {
                    "Question": "Generate a database of three 4-digit account numbers and corresponding available balances \n(less than 1000 INR) using 1D-Arrays. Later a user should be able to withdraw money from their account. \nThe program should take the account number and withdrawal amount as input and check whether that is \na valid account number and if the withdrawal amount is less than the available balance. If that is the case, \nthen a transaction should take place and the program should update the available balance in the account. \nIn case of failure the program should output appropriate error messages like Invalid Account, Insufficient Balance. \r\nSample Output: Here is one sample output:\r\nDatabase:\r\nAccount Number of User 1: 1 2 3 4 Available Balance: 150\r\nAccount Number of User 2: 3 4 3 2 Available Balance: 78\r\nAccount Number of User 3: 5 6 3 2 Available Balance: 7800\r\nTransaction Time:\r\nPlease enter your Account Number: 3 4 3 2\r\nWithdraw amount: 10\r\nTransaction successful.\r\nDo you want to see your updated balance? [enter 1 for yes and 0 for no]: 1\r\nAvailable Balance updated:\r\nAccount Number: 3 4 3 2 Available Balance: 68\r\n",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n\t\/\/ Taking input for 3 pairs of account number and balance from the user\r\n\tint accounts[3];\r\n\tint balance[3];\r\n\r\n\tprintf(\"Data Entry:\\n\\n\");\r\n\tprintf(\"Enter 3 pairs account number and currosponding balance \\nEXAMPLE: 3456 234 \\n\");\r\n\tfor (int i = 0; i < 3; i++)\r\n\t{\r\n\t\tscanf(\"%d %d\", &accounts[i], &balance[i]);\r\n\r\n\t\t\/\/ Limiting the account numbers to 4-digit values\r\n\t\tif (accounts[i] < 1000 || accounts[i] > 9999)\r\n\t\t{\r\n\t\t\tprintf(\"\\nInvalid account entry.\\n\");\r\n\t\t\tprintf(\"Account number must be of 4-digits.\\n\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\t\/\/ Limiting the balance to less than 1000 INR\r\n\t\tif (balance[i] >= 1000)\r\n\t\t{\r\n\t\t\tprintf(\"\\nInvalid balance entry.\\n\");\r\n\t\t\tprintf(\"Balance must be less than 1000 INR.\\n\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\t\/\/ Making sure you don't enter same account number more than once!\r\n\tif (accounts[0] == accounts[1] || accounts[1] == accounts[2] || accounts[0] == accounts[2])\r\n\t{\r\n\t\tprintf(\"\\nUhh.. please enter 3 unique account number for the sake of god!\\n\");\r\n\t\treturn 0;\r\n\t}\r\n\r\n\t\/\/ Printing the databse from the bank system\r\n\tprintf(\"\\nDatabase:\\n\\n\");\r\n\r\n\tfor (int i = 0; i < 3; i++)\r\n\t{\r\n\t\tprintf(\"Account Number of User %d: %d Available Balance: %d\\n\", i + 1, accounts[i], balance[i]);\r\n\t}\r\n\r\n\t\/\/ Code for the transaction portal\r\n\tprintf(\"\\nTransaction Time:\\n\\n\");\r\n\tint account_number;\r\n\tint amount;\r\n\tint index;\r\n\tprintf(\"Please enter your Account Number: \");\r\n\tscanf(\"%d\", &account_number);\r\n\r\n\t\/\/ Checking if account number is valid or not\r\n\tint hai = 0;\r\n\tfor (int i = 0; i < 3; i++)\r\n\t{\r\n\t\tif (account_number == accounts[i])\r\n\t\t{\r\n\t\t\thai = 1;\r\n\t\t\tindex = i;\r\n\t\t\tbreak;\r\n\t\t}\r\n\t}\r\n\r\n\t\/\/ Quitting the code when the account number is invalid\r\n\tif (!hai)\r\n\t{\r\n\t\tprintf(\"\\nInvalid account!\\n\");\r\n\t\treturn 0;\r\n\t}\r\n\telse\r\n\t{\r\n\t\t\/\/ Taking the withdrawal amount\r\n\t\tprintf(\"Withdraw amount: \");\r\n\t\tscanf(\"%d\", &amount);\r\n\r\n\t\t\/\/ Checking if the withdrawal amount is more than available balance\r\n\t\tif (amount > balance[index])\r\n\t\t{\r\n\t\t\t\/\/ exiting if withdrawal amount is more than available balance\r\n\t\t\tprintf(\"\\nInsufficient Balance!\\n\");\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tprintf(\"Transaction successful.\\n\");\r\n\r\n\t\t\t\/\/ Asking the user whether to output the updated balance for the user or not\r\n\t\t\tint choice;\r\n\t\t\tprintf(\"Do you want to see your updated balance? [enter 1 for yes and 0 for no]: \");\r\n\t\t\tscanf(\"%d\", &choice);\r\n\t\t\tif (!choice)\r\n\t\t\t{\r\n\t\t\t\tprintf(\"\\nThanks for visiting our bank, Have a good day.\\n\");\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tprintf(\"\\nAvailable Balance updated:\\n\");\r\n\t\t\t\tprintf(\"Account Number: %d Available Balance: %d\\n\", account_number, balance[index] - amount); \/\/ avaialable balance calculation here\r\n\t\t\t\tprintf(\"\\nThanks for visiting our bank, Have a good day.\\n\");\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn 0;\r\n}\r\n"
                },
                {
                    "Question":"Read N (to be read) 2-D coordinate points in two different arrays for X and Y coordinates, respectively. \nIt then reads X and Y coordinates of a point p and compute its closest and furthest points in the list. \nPrint those pairs and their distances from p. It also prints the average distance of N points from p.\r\n\r\nProvide output for the following input data set.\r\n(i) N=4\r\n(1,1), (5.87,5), (1,10.45), (10,1)\r\np=(2.4, 3.8)\r\n(ii) N=8\r\n(-1,45.4), (5.8,5), (8,9.45), (-5.12,-67), (3,45.89), (-4,-4.6), (12,-50.12),(50,-50)\r\np=(-5.0, 4.7)\r\n",
                    "Answer":
                    "#include<stdio.h>\r\n#include<math.h>\r\nint main(){\r\n    int  N,j,k,a,b,max=0,min=0;\r\n    float x[N],y[N],d[N];\r\n    float px,py,sum=0,avg;\r\n    scanf(\"%d\",&N);\r\n    for(j=0;j<N;j++){\r\n        scanf(\"%f%f\",&x[j],&y[j]);\r\n    }\r\n    scanf(\"%f%f\",&px,&py);\r\nfor(k=0;k<N;k++){\r\n    d[k]= sqrt(pow((px-x[k]),2)+ pow((py-y[k]),2));\r\n    sum+=d[k];\r\n}\r\navg=sum\/N;\r\n\r\nfor(a=0;a<N;a++){\r\n    if(d[a]>d[max]) max=a;\r\n}\r\nfor(b=0;b<N;b++){\r\n    if(d[b]<d[min]) min=b;\r\n}\r\n    printf(\"max dist is of the point(%f,%f)\\n\",x[max],y[max]);\r\n    printf(\"min dist is of the point(%f,%f)\\n\",x[min],y[min]);\r\n    printf(\"average distance=%f\\n\\n\",avg);\r\n}\r\n"
                },
                {
                    "Question":"In the PDS laboratory there are four components as shown below:\r\nRegular Assignments (RA): 40\r\nLab Test-I (LT-I): 25\r\nLab Test-II (LT-II):25\r\nTA assessment (TA): 10\r\n\r\nWrite a program, which reads marks of every student in four components (ra,lt1,lt2,ta), such that \nre, lt1, lt2 and ta denote marks for RA (out of 100), LT-I (out of 100), LT-II (out of 100) and TA (out of 100) \nin four separate arrays. The program computes the total marks in the PDS laboratory and store it in another array. \nFinally it prints the total marks for every students rounded to the nearest integer, followed by their mean, \nstandard deviation, maximum and minimum. It also prints the number of students who got grades EX, A, B, C, D, P, and F. \nThe grading policy is provided below.\r\nEX >89, 90>A>79, 80>B>69, 70>C>59, 60>D>49, 50>P>34, F<35\r\n\r\nProvide output for the following input data set.\r\n(i) N=5\r\n(70,60,50,20), (90,80,70,100), (20,30,50,80), (60,80,95,65), (100,95,94,30)\r\n(ii) N=10\r\n(60,20,30,10), (80,90,70,38), (44,37,86, 78), (89,28,35,95), (91,24,80,83), (30,60,80,67), (90,20,10,100), (100,92,100,100), (25,59,80,82), (20,10,5,3)\r\n",
                    "Answer":
                    "#include <stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\nint i, n;\r\nscanf(\"%d\",&n);\r\nfloat ra[n],lt1[n],lt2[n],ta[n],score[n];\r\nint total_marks[n];\r\nfor(i=0;i<n;i++){\r\n    scanf(\"%f%f%f%f\",&ra[i],&lt1[i],&lt2[i],&ta[i]);\r\n    score[i]=(ra[i]*40+ lt1[i]*25+ lt2[i]*25+ ta[i]*10)\/100;\r\n\r\n    if((score[i]-(int)score[i])>=0.5)\r\n        total_marks[i]= (int)score[i]+1;\r\n    else\r\n        total_marks[i]= (int)score[i];\r\n\r\n    printf(\"Total marks scored by student %d = %d\\n\",i+1,total_marks[i]);}\r\n\r\n\r\nfloat avg,sum=0;\r\nint m;\r\nfor(m=0;m<n;m++){\r\n    sum+=score[m];\r\n}\r\n\r\navg=sum\/n;\r\nprintf(\"avg marks= %f\\n\",avg);\r\n\r\nfloat stddev, squares=0;\r\nint y;\r\nfor(y=0;y<n;y++){\r\n    squares+= pow((score[y]-avg),2);\r\n}\r\nstddev= sqrt(squares\/n);\r\nprintf(\"standard deviation = %f\\n\",stddev);\r\n\r\n float max=score[0], min=score[0];\r\nint j,k;\r\nfor(j=1;j<n;j++){\r\n    if(score[j]>max) max=score[j];\r\n}\r\nfor(k=1;k<n;k++){\r\n    if(score[k]<min) min=score[k];\r\n}\r\nprintf(\"max total score is %f\\n\", max);\r\nprintf(\"min total score is %f\\n\", min);\r\n\r\n\r\nint EX=0,A=0,B=0,C=0,D=0,P=0,F=0; int p;\r\nfor(p=0;p<n;p++){\r\nif(total_marks[p]>89) EX++;\r\nelse if (total_marks[p]>79) A++;\r\nelse if (total_marks[p]>69) B++;\r\nelse if (total_marks[p]>59) C++;\r\nelse if (total_marks[p]>49) D++;\r\nelse if (total_marks[p]>34) P++;\r\nelse if (total_marks[p]<35) F++;\r\n}\r\nprintf(\"No. of studennts who got EX= %d\\n\",EX);\r\nprintf(\"No. of studennts who got A= %d\\n\",A);\r\nprintf(\"No. of studennts who got B= %d\\n\",B);\r\nprintf(\"No. of studennts who got C= %d\\n\",C);\r\nprintf(\"No. of studennts who got D= %d\\n\",D);\r\nprintf(\"No. of studennts who got P= %d\\n\",P);\r\nprintf(\"No. of studennts who got F= %d\\n\\n\\n\",F);\r\n}\r\n"
                },
                {
                    "Question":"In this problem you will write a program that maintains a sorted list of distinct integers, by using a one-\r\ndimensional array. The following should be the input\/output behavior of your program. Your program\r\n\r\nshould also perfectly match the sample inputs and outputs given below.\r\n\uE00C The program should first output a menu listing five options numbered 1 through 5, and ask the\r\nuser to enter one of those options. See sample output.\r\n\uE00C If the user enters a number other than 1-5, the program prompts the user to enter a valid option\r\nnumber and displays the menu again.\r\n\uE00C If the user enters 1, the program asks the user for an integer. If the integer does not exist in the\r\nlist, it is now inserted into the list, and the currently there are less than 100 elements in the list.\r\nThe list should be sorted after the insertion. If the integer already exists in the list or there are\r\nalready 100 elements in the list before insertion, the program displays an appropriate message\r\n(see sample outputs). After that, the menu of options is displayed again.\r\n\uE00C If the user enters 2, the program asks the user to enter a range . The program should then\r\ndelete all integers in the list that are between and , including both. At the end of deletion, the\r\nlist should be sorted. If there is no integer in the list between and before deletion, a message\r\nshould be displayed. Finally, the menu of options should be displayed again.\r\n\uE00C If the user enters 3, the program asks for an input. The program then displays whether or not\r\nthat integer exists in the list. This operation should not alter the list. Finally, the menu of\r\noptions is displayed again.\r\n\uE00C If the user enters 4, the program displays all the integers currently in the list, each in a new\r\nline. This operation should not alter the list. Note that the integers are displayed in sorted order.\r\nFinally, the the menu of options is displayed again.\r\n\uE00C If the user enters 5, your program should terminate.",
                    "Answer":
                    "#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int choice, i, j, size=0, A[100], num, num_l, num_r, l, r, mid;\r\n  while(1)\r\n  {\r\n    printf(\"\\n1. Insert\\n2. Delete numbers in a range\\n3. Search\\n4. Display\\n5. Exit\\n\\nEnter an option: \");\r\n    scanf(\"%d\",&choice);\r\n    switch(choice)\r\n    {\r\n      case 1:\r\n\r\n        \/\/Is the database full?\r\n\r\n        if(size==100)\r\n        {\r\n          printf(\"Database full!\");\r\n          break;\r\n        } \r\n        printf(\"Enter number: \");\r\n        scanf(\"%d\", &num);\r\n\r\n        \/\/ Is the database empty?\r\n\r\n        if(size==0)\r\n        {\r\n          A[size++]=num;\r\n          break;\r\n        }\r\n\r\n        \/\/ Finding the first element that is at least the input (if such an element exists)\r\n\r\n        l=0;\r\n        r=size-1;\r\n        while(l<r)\r\n        {\r\n          mid=(l+r)\/2;\r\n          if(A[mid]<num)\r\n            l=mid+1;\r\n          else\r\n            r=mid;\r\n        }\r\n        \r\n        \/\/ Are all the elements less than the input?\r\n         \r\n        if(A[l]<num)\r\n        {\r\n           A[size++]=num;\r\n           break;\r\n        }        \r\n\r\n        \/\/ Does the input already exist in the database?\r\n\r\n        if(A[l]==num)\r\n        {\r\n          printf(\"Number exists!\\n\");\r\n          break;\r\n        }\r\n\r\n        \/\/ Insert input\r\n\r\n        for(i=size; i>l; i--)\r\n          A[i]=A[i-1];\r\n        A[l]=num;\r\n        size++;\r\n        break;\r\n\r\n      case 2: \r\n\r\n       \/\/Is the database empty?\r\n\r\n        if(size==0)\r\n        {\r\n          printf(\"Database empty!\\n\");\r\n          break;\r\n        }\r\n\r\n       \/\/Taking the range as input\r\n\r\n        printf(\"Enter lower limit: \");\r\n        scanf(\"%d\", &num_l);\r\n        printf(\"Enter upper limit: \");\r\n        scanf(\"%d\", &num_r);\r\n\r\n       \/\/ Finding the first number that is at least the lower limit (if such a number exists)\r\n\r\n        l=0;\r\n        r=size-1;\r\n        while(l<r)\r\n        {\r\n          mid=(l+r)\/2;\r\n          if(A[mid]<num_l)\r\n            l=mid+1;\r\n          else\r\n            r=mid;\r\n        }\r\n        i=l;\r\n\r\n        \/\/ Are all numbers less than the lower limit?\r\n\r\n        if(A[i]<num_l)\r\n        {\r\n          printf(\"No number in the given range\\n\");\r\n          break;\r\n        }\r\n\r\n        \/\/ Checking if the last element is in the range\r\n\r\n        if(A[size-1]<=num_r)\r\n        {\r\n          size=i;\r\n          break;\r\n        }\r\n\r\n        \/\/ Finding the first number strictly larger than the upper limit\r\n\r\n        l=0;\r\n        r=size-1;\r\n        while(l<r)\r\n        {\r\n          mid=(l+r)\/2;\r\n          if(A[mid]<=num_r)\r\n            l=mid+1;\r\n          else\r\n            r=mid;\r\n        }\r\n        j=l;\r\n\r\n        \/\/ Checking if it is an empty interval\r\n\r\n        if(j==i)\r\n        {\r\n          printf(\"No number in the given range\\n\");\r\n          break;\r\n        }\r\n\r\n        \/\/ Deleting numbers in the range\r\n\r\n        for(;j<size;i++,j++)\r\n          A[i]=A[j];\r\n        size-=j-i;\r\n        break;\r\n\r\n      case 3:\r\n        if(size==0)\r\n        {\r\n           printf(\"Database empty.\\n\");\r\n           break;\r\n        }\r\n        printf(\"Enter number: \");\r\n        scanf(\"%d\",&num);\r\n        l=0;\r\n        r=size-1;\r\n        while(l<r)\r\n        {\r\n          mid=(l+r)\/2;\r\n          if(A[mid]<num)\r\n            l=mid+1;\r\n          else\r\n            r=mid;\r\n        }\r\n        if(A[l]==num)\r\n          printf(\"Number exists.\\n\");\r\n        else\r\n          printf(\"Number does not exist.\\n\");\r\n        break;\r\n\r\n      case 4:\r\n        if(size==0)\r\n        {\r\n           printf(\"Database empty.\\n\");\r\n           break;\r\n        }\r\n        printf(\"Numbers in the database:\\n\");\r\n        for(i=0; i<size; i++)\r\n          printf(\"%d\\n\", A[i]);\r\n        break;\r\n\r\n      case 5: return 0;\r\n\r\n      default: printf(\"Enter a valid option\\n\");\r\n    }\r\n  }\r\n}"
                },
                {
                    "Question":"Write a C program to fill a single dimensional integer array of maximum size 50 with random\r\nintegral numbers in the range [10, 100] by appropriately calling the rand) library function. User will\r\nfirst enter the number of such random numbers to be generated (maximum 50).\r\nDisplay the array contents. Then, starting with the first (i.e., 0th element in the array), interchange pairs of\r\nnumbers present at consecutive even positions, only if the first is larger than the second. Count the number\r\nof interchanges made. Display the contents of the array after all the interchanges and the number of\r\ninterchanges.\r\nFor example, if the original array is [10,9,23,46,34,67,21], then the array alter the interchanges would be\r\n[10,9,23,46,21,67,34], number of interchanges =1.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int n, temp, count = 0;\r\n    printf(\"Enter the no. of random nos needed...\\n\");\r\n    scanf(\"%d\", &n);\r\n    if (n <= 50)\r\n    { \/\/condition check\r\n        int arr[n];\r\n        srand(time(0));\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            arr[i] = rand() % 100 + 10;\r\n            if (arr[i] > 100)\r\n            {\r\n                arr[i] = arr[i] - 10; \/\/ensures the no. is less than 100\r\n            }\r\n        }\r\n        printf(\"The ramdom nos generated are----\\n\");\r\n        printf(\"[\");\r\n        for (int i = 0; i <= n - 1; i++)\r\n        {\r\n            printf(\"%d ,\", arr[i]);\r\n        }\r\n        printf(\"]\\n\");\r\n        for (int i = 0; i < n - 2; i += 2)\r\n        { \/\/interchanges the elements\r\n            if (arr[i] > arr[i + 2])\r\n            {\r\n                temp = arr[i];\r\n                arr[i] = arr[i + 2];\r\n                arr[i + 2] = temp;\r\n                count++;\r\n            }\r\n        }\r\n        printf(\"The nos after rearrangement are----\\n\");\r\n        printf(\"[\");\r\n        for (int i = 0; i <= n - 1; i++)\r\n        {\r\n            printf(\"%d ,\", arr[i]);\r\n        }\r\n        printf(\"]\\n\");\r\n        printf(\"the no of interchanges are %d.\", count);\r\n    }\r\n    else\r\n    {\r\n        printf(\"The entered no. must be less than or equal to 50\"); \/\/condition check\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to fill a single dimensional integer array of size 50 with random integral numbers in\r\nthe range [10, 50J by appropriately calling the rand) library function. User will first enter the number of\r\nsuch numbers to be generated (maximum 50).\r\nDisplay the array contents. Then, determine all the triplets that add up to 60 and display the\r\ncorresponding array indices and the values stored in those locations.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int n, temp, count = 0;\r\n    printf(\"Enter the no. of random nos needed...\\n\");\r\n    scanf(\"%d\", &n);\r\n    if (n <= 50)\r\n    { \/\/condition check\r\n        int arr[n];\r\n        srand(time(0));\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            arr[i] = rand() % 100 + 10;\r\n            if (arr[i] > 50)\r\n            {\r\n                arr[i] = 10 + arr[i] \/ 10;\/\/ensures the no. is less than 100\r\n            }\r\n        }\r\n            printf(\"The ramdom nos generated are----\\n\");\r\n            printf(\"[\");\r\n        for (int i = 0; i <= n - 1; i++)\r\n        {\r\n            printf(\"%d ,\", arr[i]);\r\n        }\r\n        printf(\"]\\n\");\r\n        for (int i = 0; i < n - 2; i++)\r\n        {\r\n            for (int j = i + 1; j < n - 1; j++)\r\n            {\r\n                for (int k = j + 1; k < n; k++)\r\n                {\r\n                    if (arr[i] + arr[j] + arr[k] == 60)\/\/condition check\r\n                    {\r\n                        printf(\"The indices of the array elements is %d,%d,%d\\n\", i,j,k);\r\n                        printf(\"The triplet is - [%d, %d, %d]\\n\", arr[i], arr[j], arr[k]);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}\r\n" 
                },
                {
                    "Question":"Write a C program to read from keyboard the roll number (unsigned integer) and CGPA (float) of upp\r\nto 10 students. User will first enter the number of such students for which inputs will have to be taken\r\n(maximum 10). Use two arrays of maximum size of 10 each.\r\na. Display the details read, nicely formatted\r\nb. Display the average CGPA of the students.\r\nc. Display the roll numbers and CGPA of all students having identical CGPA (for checking equality\r\nof CGPA, consider two digit accuracy).",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the no of students..\\n\");\r\n    scanf(\"%d\", &n);\r\n    int rn[n];\r\n    float cg[n], sum = 0;\r\n    if (n <= 10)\r\n    {\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            printf(\"Enter the roll no of student %d...\\n\", i + 1);\r\n            scanf(\" %d\", &rn[i]);\r\n        }\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            printf(\"Enter the CGPA of student %d..\\n\", i + 1);\r\n            scanf(\" %f\", &cg[i]);\r\n        }\r\n        printf(\"*********************\\nRoll no.        CGPA\\n\");\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            printf(\"%d              %f\\n\", rn[i], cg[i]);\r\n        }\r\n        printf(\"********************\\n\");\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            sum = sum + cg[i];\r\n        }\r\n        printf(\"The average CGPA of the students is %f\\n\", sum \/ n);\r\n        for (int i = 0; i < n; i++)\r\n        {\r\n            for (int j = i + 1; j < n; j++)\r\n            {\r\n                if ((int)(cg[i] * 100) == (int)(cg[j] * 100))\/\/checks the CGPA upto 2 decimal places.\r\n                { \r\n                    printf(\"Roll no. %d and roll no. %d have same CGPA of %0.2f\\n\", rn[i], rn[j], cg[i]);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"Write a C program to read the roll number (integer), age (integer) and marks of 20 students admitted to a\r\ndepartment. Generate random roll numbers in the range [1000,2000], age in the range [15 to 25] and\r\nmarks in the range [0,100] and populate the respective arrays.. Please use three one dimensional arrays\r\nfor storing roll number, age, and mark.\r\na. Display the roll number, ages, and marks of all students having the same age.\r\nb. Display the roll number, ages, and marks of all students having identical marks.\r\nC. Sort the students according to their roll numbers and display the details nicely\r\nformatted.\r\nFor parts a,b,c make 3 seperate programs.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int rn[20], age[20], mark[20];\r\n    srand(time(0));\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        rn[i] = 1000 + rand() % 1000; \/\/ensures roll no is between 1000 and 2000\r\n        age[i] = 15 + rand() % 10;    \/\/ensures age is between 15 and 20\r\n        mark[i] = rand() % 100;       \/\/ensures marks are below 100\r\n    }\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        printf(\"Roll: %d     Age: %d    Mark: %d\\n\", rn[i], age[i], mark[i]);\r\n    }\r\n    printf(\"*****************\\n\");\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        for (int j = i + 1; j < 20; j++)\r\n        {\r\n            if (age[i] == age[j]) \/\/condition check\r\n            {\r\n                printf(\"Roll: %d Age: %d Mark: %d\\n\", rn[i], age[i], mark[i]);\r\n                printf(\"Roll: %d Age: %d Mark: %d\\n\", rn[j], age[j], mark[j]);\r\n                printf(\"\/\/\/\/\/\/\/\/\/\\n\");\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"Write a C program to read the roll number (integer), age (integer) and marks of 20 students admitted to a\r\ndepartment. Generate random roll numbers in the range [1000,2000], age in the range [15 to 25] and\r\nmarks in the range [0,100] and populate the respective arrays.. Please use three one dimensional arrays\r\nfor storing roll number, age, and mark.\r\na. Display the roll number, ages, and marks of all students having the same age.\r\nb. Display the roll number, ages, and marks of all students having identical marks.\r\nC. Sort the students according to their roll numbers and display the details nicely\r\nformatted.\r\nFor parts a,b,c make 3 seperate programs.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int rn[20], age[20], mark[20];\r\n    srand(time(0));\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        rn[i] = 1000 + rand() % 1000; \/\/ensures roll no is between 1000 and 2000\r\n        age[i] = 15 + rand() % 10;    \/\/ensures age is between 15 and 20\r\n        mark[i] = rand() % 100;       \/\/ensures marks are below 100\r\n    }\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        printf(\"Roll: %d     Age: %d    Mark: %d\\n\", rn[i], age[i], mark[i]);\r\n    }\r\n    printf(\"***************\\n\");\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        for (int j = i + 1; j < 20; j++)\r\n        {\r\n            if (mark[i] == mark[j])\r\n            { \/\/condition check\r\n                printf(\"Roll: %d Age: %d Mark: %d\\n\", rn[i], age[i], mark[i]);\r\n                printf(\"Roll: %d Age: %d Mark: %d\\n\", rn[j], age[j], mark[j]);\r\n                printf(\"\/\/\/\/\/\/\/\/\/\\n\");\r\n            }\r\n        }\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"Write a C program to read the roll number (integer), age (integer) and marks of 20 students admitted to a\r\ndepartment. Generate random roll numbers in the range [1000,2000], age in the range [15 to 25] and\r\nmarks in the range [0,100] and populate the respective arrays.. Please use three one dimensional arrays\r\nfor storing roll number, age, and mark.\r\na. Display the roll number, ages, and marks of all students having the same age.\r\nb. Display the roll number, ages, and marks of all students having identical marks.\r\nC. Sort the students according to their roll numbers and display the details nicely\r\nformatted.\r\nFor parts a,b,c make 3 seperate programs.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nint main()\r\n{\r\n    int rn[20], age[20], mark[20], temp;\r\n    srand(time(0));\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        rn[i] = 1000 + rand() % 1000;\r\n        age[i] = 15 + rand() % 10;\r\n        mark[i] = rand() % 100;\r\n    }\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        for (int j = i + 1; j < 20; j++)\r\n        {\r\n            if (rn[i] > rn[j])\/\/selection sort method\r\n            {\r\n                temp = age[i];\r\n                age[i] = age[j];\r\n                age[j] = temp;\r\n                temp = rn[i];\r\n                rn[i] = rn[j];\r\n                rn[j] = temp;\r\n                temp = mark[i];\r\n                mark[i] = mark[j];\r\n                mark[j] = temp;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < 20; i++)\r\n    {\r\n        printf(\"Roll: %d     Age: %d    Mark: %d\\n\", rn[i], age[i], mark[i]);\r\n    }\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"1. Two distinct numbers are said to be sum of digit preserving pair, if the sum of sum of their digits is\r\nthe same as the sum of digits of their sum.\r\nExample 1: 13 and 14 form a sum of digit preserving pair since sum of sum of the digits is (1+3) +\r\n(1+4)=9 and sum of digits of their sum 27 is also 2+7=9.\r\nExample 2: 13 and 18 do not form a sum of digit preserving pair since sum of sum of the digits is\r\n(1+3) + (1+8)= 13 and sum of digits of their sum 31 is 3+1=4.\r\nWrite a C program that displays all sum of digit preserving pairs between 13 and 23 (both included).\r\nAlso display the total number of sum of digit preserving pairs between 13 and 23 (both included).\r\nExample display:\r\nSum of digits of 13 and 14 equals sum of digits of 27\r\nSum of digits of 13 and 15 equals sum of digits of 28\r\n**\r\nNote 1: If you have printed 13 and 14, you should not print 14 and 13 again.\r\nNote 2: The program does not take any input from the user",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int a = 13, b, c = 0;\r\n    int s, s1, s2, s3;\r\n    printf(\"\\n***********\\n\");\r\n    for (a; a < 23; a++)\r\n    {\r\n        for (b = a + 1; b < 24; b++)\r\n        {\r\n            s1 = (a \/ 10) + (a % 10);\/\/sums digits of a\r\n            s2 = (b \/ 10) + (b % 10);\/\/sums digits of b\r\n            s = a + b;\r\n            s3 = (s \/ 10) + (s % 10);\/\/sums digits of a+b\r\n            if ((s1 + s2) == s3)\/\/condition check\r\n            {\r\n                printf(\"Sum of digits of %d and %d equals sum of digits of %d.\\n\", a, b, s);\r\n                c++;\/\/ Counts the number of pairs\r\n            }\r\n        }\r\n    }\r\n    printf(\"\\n***********\\n\");\r\n    printf(\"The total number of sum of digit preserving pairs between 13 and 23 are %d.\", c);\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a program that reads a scale factor s (S is a number between 1 and 8) and number of lines n (n is a\r\nnumber between I and 10). Based on the scale factor, it will display the digits between 1 to (3+s)\r\nrepeatedly with (2+s) digits in each line. The remaining digits will be printed at the start of the next line\r\nand this will continue. A total of n lines will be printed.\r\n\r\nExplanation: If s=1 and n=6, we have to repeatedly print the digits between 1 to (3+1), i.e., the digits 1,\r\n2, 3 and 4. In each line, (2+1), 1.e., only 3 digits will be printed. The remaining digits will be printed at\r\nthe start of the next line. A total of 6 lines will be printed since n=6.\r\n\r\nExample 1:\r\nInput\r\nEnter scale factor: 1\r\nEnter number of lines: 6\r\nOutput\r\n123\r\n412\r\n341\r\n234\r\n412\r\n\r\nExample 2:\r\nInput\r\nEnter scale factor: 2\r\nEnter number of lines: 5\r\nOutput\r\n1234\r\n5123\r\n4512\r\n3451\r\n2345\r\n\r\nExample 3:\r\nInput\r\nEnter scale factor: 3\r\nEnter number of lines: 3\r\nOutput\r\n12345\r\n61234\r\n56123",
                    "Answer":"#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int s, n;\r\n    int k = 1, j;\r\n    printf(\"Enter the scale factor(1 to 8)..\\n\");\r\n    scanf(\"%d\", &s);\r\n    printf(\"Enter the number of lines(1 to 10)..\\n\");\r\n    scanf(\"%d\", &n);\r\n    if(s>0 && s<9 && n>0 && n<11){\r\n    printf(\"\\nThe desired result is...\\n\");\r\n    for (int i = 0; i < n; i++) \/\/ Loop runs for n number of lines\r\n    {\r\n        j = 0;\/\/ Initialising the loop counter from 0.\r\n\r\n        while (j < 2 + s) \/\/ Loop runs for only (2+s) digits in a single line\r\n        {\r\n            if (k > (3 + s)) \/\/ If the digit is greater than (3+s), assignment of the digit to 1.\r\n            {\r\n                k = 1;\r\n            }\r\n            printf(\"%d\", k);\r\n            k++;\r\n            j++;\r\n        }\r\n\r\n        printf(\"\\n\");\/\/ Enters the numbers in the next line\r\n    }\r\n    }\r\n    else{\r\n        printf(\"\\nThe numbers you entered are not in the described range.\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"1. Write a program to read a full line of text from the keyboard and display the different words\r\nin it, one word per line. (Hint: The format for reading a full line of text from keyboard is\r\n%[^\\n]).\r\nExample:\r\nEntered input string: India    is a          great country\r\nDisplay: India\r\n              is\r\n              a\r\n              great\r\n              country",
                    "Answer":"#include <stdio.h>\r\n#include<string.h>\r\n\r\nint main()\r\n{\r\n    char c[200];\r\n    int k;\r\n    printf(\"Enter the text\\n\");\r\n    \/\/gets(c);\r\n    scanf(\"%[^\\n]s\", c);\r\n    k= strlen(c);\r\n    for(int i=0; i<k; i++){\r\n        if(c[i]==' '){\/\/when a space is found, the data is printed to the next line\r\n            printf(\"\\n\");\r\n            continue;\r\n        }\r\n        printf(\"%c\", c[i]);\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Part-I\r\nSubmit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\n1. Ask for input positive integers n and m.\r\n2. Construct 2 arrays A and B of type int. A should store n positive integers taken in as input, while\r\nB should store m positive integers taken in as input. Note that the numbers taken into A, or into B\r\nneed not be distinct - two numbers in A can be the same.\r\n3. Construct an array C that only stores the distinct numbers of A and B. In an array D, in the\r\ncorresponding indices store the frequency of these distinct numbers across A and B. Eg. if C[0] = 1,\r\nand 1 appears 2 times in A and 2 times in B, then D[0] = 4.\r\n4. Without using another array, you have to do the following:\r\n    a) If there are n1 distinct even numbers and n2 distinct odd numbers, then the even numbers\r\n        should be sorted in ascending order and stored in the cells C[0] - C[n1 - 1]\r\n    b) In array C the odd numbers should be sorted in descending order and stored in the cells\r\n        starting from cell C[n1].\r\n    c) The frequencies in D should be rearranged such that the indices correspond to the final indices\r\n        of the number in array C. Continuing from the example in part 3, if finally after the required\r\n        sorting C[4] = 1, then finally it should be that D[4] = 4.\r\n5. Print the numbers of C and their corresponding frequencies as shown in the sample output.\r\n\r\nSample Output\r\n\r\nEnter positive integer n: 5\r\nEnter positive integer m: 6\r\nEnter 5 positive integers for array A: 2 2 1 3 4\r\nEnter 6 positive integers for array B: 1 2 26 14 6 6\r\nThe required sorting of the distinct numbers of A and B are:\r\n2 (3)\r\n4 (1)\r\n6 (2)\r\n14 (1)\r\n26 (1)\r\n3 (1)\r\n1 (2)",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    \/*Step 1*\/\r\n    \/\/Taking input of array A and B sizes\r\n    int n,m;\r\n    printf(\"Enter positive integer n: \");\r\n    scanf(\"%d\",&n);\r\n    printf(\"Enter positive integer m: \");\r\n    scanf(\"%d\",&m);\r\n\r\n    \/*Step 2*\/\r\n    int a[100],b[100]; \/\/maximum size of array A and B are taken 100 each and these two integer arrays are declared\r\n    \/\/Taking input in A\r\n    printf(\"Enter %d positive integers for array A: \",n);\r\n    for(int i=0;i<n;i++){\r\n        int k;\r\n        scanf(\"%d\",&k);\r\n        a[i]=k;\r\n    }\r\n    \/\/Taking input in B\r\n    printf(\"Enter %d positive integers for array B: \",m);\r\n    for(int i=0;i<m;i++){\r\n        int k;\r\n        scanf(\"%d\",&k);\r\n        b[i]=k;\r\n    }\r\n\r\n    \/*Step 3*\/\r\n    int c[200],d[200]; \/\/maximum size of array C and D are taken 200 each\r\n    \/\/C stores the distinct elements in A and B and D stores frequency of each element in C at corresponding indices\r\n\r\n    \/*Step 4*\/\r\n    \/\/In this step we first swap even and odd elements of the array\r\n    \/\/This is done so that even elements accumulate at the beginning of the array and odd elements at the end\r\n    int count,size=0;\r\n    \/\/count ensures if an element is array A or B is already present in C so that repeated elements dont go in C\r\n    \/\/size maintaines the size of the array C which increases with each new element insertion in it\r\n    for(int i=0;i<n;i++){ \/\/checking for distinct elements in array A\r\n        count=0;\r\n        for(int j=0;j<size;j++){\r\n            if(c[j]==a[i]){\r\n                count=1;\r\n                d[j]++; \/\/frequency of the already present elements are incresed by one in array D if they are encountered again\r\n            }\r\n        }\r\n        if(count==0){\r\n            c[size]=a[i]; \/\/new distinct element gets appended at end of C\r\n            d[size]=1;\r\n            size++;\r\n        }\r\n    }\r\n    for(int i=0;i<m;i++){ \/\/checking for distinct elements in array B\r\n        count=0;\r\n        for(int j=0;j<size;j++){\r\n            if(c[j]==b[i]){\r\n                count=1;\r\n                d[j]++;\r\n            }\r\n        }\r\n        if(count==0){\r\n            c[size]=b[i];\r\n            d[size]=1;\r\n            size++;\r\n        }\r\n    }\r\n\r\n    \/\/This segment deals with the process of swapping even and odd elements\r\n    int l=0,u=size-1; \/\/l searches for odd elements from front and u for even elements from end\r\n    \/\/once found elements at l and u are swapped\r\n    while(1){\r\n        while(c[l]%2==0 && l<size && l<u){\r\n            l++;\r\n        }\r\n        while(c[u]%2!=0 && u>0 && l<u){\r\n            u--;\r\n        }\r\n        if(l>=u){\r\n            break; \/\/once l>=u is satisfied we need to stop swapping so that already placed elements dont get again swapped\r\n        }else{\r\n            \/\/swapping elements at l and u along with their corresponding frequencies\r\n            int temp=c[l];\r\n            c[l]=c[u];\r\n            c[u]=temp;\r\n            temp=d[l];\r\n            d[l]=d[u];\r\n            d[u]=temp;\r\n        }\r\n    }\r\n    \r\n    \/\/Now in this part we sort the even and odd elements using bubble sort technique \r\n    \/\/Sorting even elements in ascending order\r\n    \/*Actually here l obtained is the number of even elements in the array C\r\n    and u indicates the index from where odd elements begin to appear*\/\r\n    for(int i=0;i<l-1;i++){\r\n        for(int j=0;j<l-i-1;j++){\r\n            if(c[j]>c[j+1]){\r\n                int temp=c[j];\r\n                c[j]=c[j+1];\r\n                c[j+1]=temp;\r\n                temp=d[j];\r\n                d[j]=d[j+1];\r\n                d[j+1]=temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    \/\/sorting odd elements in descending order\r\n    for(int i=0;i<size-l-1;i++){\r\n        for(int j=u;j<size-i-1;j++){\r\n            if(c[j]<c[j+1]){\r\n                int temp=c[j];\r\n                c[j]=c[j+1];\r\n                c[j+1]=temp;\r\n                temp=d[j];\r\n                d[j]=d[j+1];\r\n                d[j+1]=temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    \/*Step 5*\/\r\n    \/\/Here we print the numbers in array C and their corresponding frequencies \r\n    printf(\"The required sorting of the distinct numbers of A and B are: \\n\");\r\n    for(int i=0;i<size;i++){\r\n        printf(\"%d (%d)\\n\",c[i],d[i]);\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Submit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\nDefinition of Hamming distance of two strings: Let there be 2 strings s1, s2 with respective lengths\r\nl1, l2 such that l1 <= l2 (wlog). Assuming the strings start with index 0, let the number of indices\r\n0 <= i <= l2 - 1 where the two strings differ be t. All indices between l1 - 1 and l2 - 1 will be considered\r\nto be diferring. Then the Hamming distance of the two strings is t. Eg: The two strings abcd and\r\nbbdefgh are of respective lengths 4 and 7 and among the indices between 0 and 6, they differ in indices\r\n0, 2, 3, 4, 5, 6. Therefore, the Hamming distance of the two strings is 6.\r\n1. Define a structure user which stores 2 strings corresponding to the username and password of a\r\nuser. Assume that a username or password can be of at most 100 characters.\r\n2. In the main program, take as input a positive integer n.\r\n3. Then take as input the details of n structures of type user. When taking the input for the ith\r\nstructure, make sure that the ith username hs Hamming distance at least 1 from the previous i-1\r\nusernames.\r\n4. Ask a user to input their username and password.\r\n   i) If the username does not match with any of the n usernames, output a message asking the\r\n      user to register this username, and ask for a username and password again. If the username\r\n      does not match after 3 attempts, write an error message \u201DYou have used up all your attempts.\u201D\r\n   ii) If the username matches with one of the n usernames but the corresponding password s does\r\n      not, then output an error message, and request for a new password.\r\n      Let s' be the string entered as a new password. Now you have to make two checks with s and\r\n      s':\r\n         (a) If the s' has at least 1 vowel,\r\n         (b) If the Hamming distance of s and s' is at most length(s.s')\/3.\r\n      Until both the conditions are satisfied, you have to keep asking for a suitable new password.\r\n      Finally, replace s in the structure with s0 and output a message saying that the password has\r\n      been reset.\r\n   iii) If both username and password match, then output a message that the login was successful.\r\n\r\nYou can write your own functions wherever necessary, but proper commenting is required to explain\r\nthe purpose of the function. Functions from string.h can be used.\r\n\r\n\r\nPart-II\r\n\r\nSample Output\r\n\r\nEnter positive integer: 2\r\nEnter the username of user 1: userone\r\nEnter the password of user 1: pass\r\nEnter the username of user 2: userone\r\nThis username is already taken. Enter the username of user 2: usertwo\r\nEnter the password of user 2: word\r\nEnter your username to login: user\r\nEnter your password to login: word\r\nThis username is not registered!\r\nEnter your username to login: userone\r\nEnter your password to login: word\r\nYour password does not match, please enter a new password: word\r\nThank you, your password has been reset.",
                    "Answer": "#include<stdio.h>\r\n#include<string.h>\r\n\r\n\/\/Function to calculate the hamming distance between two strings\r\nint hamming(char *a, char *b){\r\n    \/\/l1 and l2 are lengths of the two strings found using the string.h function strlen()\r\n    int l1 = strlen(a);\r\n    int l2 = strlen(b);\r\n    \/\/h_len is the required hamming distance and is calculated according to the rules given in the question and then returned\r\n    int h_len=0;\r\n    if(l1>l2){\r\n        for(int i=0; i<l2; i++){\r\n            if(a[i]!=b[i]) h_len++;\r\n        }\r\n        h_len = h_len + (l1-l2);\r\n    }else{\r\n        for(int i=0; i<l1; i++){\r\n            if(a[i]!=b[i]) h_len++;\r\n        }\r\n        h_len = h_len + (l2-l1);\r\n    }\r\n    return h_len;\r\n}\r\n\r\nint main(){\r\n    \/\/Structure user is declared as is asked in the question having two strings members, username and password\r\n    struct user{\r\n        char username[101];\r\n        char password[101];\r\n    };\r\n    \/\/n denotes number of entries which is taken as input\r\n    int n;\r\n    printf(\"Enter positive integer: \");\r\n    scanf(\"%d\",&n);\r\n    struct user users[n]; \/\/array of structures of users type that holds username and password of each user\r\n    for(int i = 1; i <= n; i++){\r\n        printf(\"Enter the username of user %d: \",i);\r\n        \/\/i-1 is used because the array users[] has 0 based indexing\r\n        scanf(\"%s\",users[i-1].username);\r\n        \/\/now we check if the hamming of this entered username with any previous username is 0 or not\r\n        \/\/if 0 then that means we need to ask the user to again give input a new username and so we set j to -1 so that\r\n        \/\/the loop starts over again checking the usernames one by one from starting with the new input\r\n        for(int j=0;j<i-1;j++){\r\n            if(hamming(users[j].username,users[i-1].username)==0){\r\n                printf(\"This username is already taken. Enter the username of user %d: \",i);\r\n                scanf(\"%s\",users[i-1].username);\r\n                j=-1;\r\n            }\r\n        }\r\n        \/\/when the username is a unique one, then the control comes out of the loop and asks the user to enter the password\r\n        printf(\"Enter the password of user %d: \",i);\r\n        scanf(\"%s\",users[i-1].password);\r\n    }\r\n    \/\/now we declare 2 integer variables. checker is to make sure if turns was made 0 when operation was successful or if it just happened\r\n    \/\/that user gave three wrong try. turns takes care when to terminate the loop as soon as the user gives three wrong try or when\r\n    \/\/operation is successful\r\n    int checker = 1;\r\n    int turns = 3;\r\n    while(turns){\r\n        \/\/these two strings are used to take the username and password entered by the user to compare them with the data\r\n        char user_name[101];\r\n        char pass_word[101];\r\n        int check=0,pos=0; \/\/pos stores the position where the username matches with one in the data\r\n        printf(\"Enter your username to login: \");\r\n        scanf(\"%s\",user_name);\r\n        printf(\"Enter your password to login: \");\r\n        scanf(\"%s\",pass_word);\r\n        \/\/this loop checks if the username is present in the data at all and accordingly assigns value to check\r\n        for(int i=0; i<n; i++){\r\n            if(hamming(user_name,users[i].username)==0){\r\n                check=1;\r\n                pos=i;\r\n                break; \/\/no need to check further\r\n            }\r\n        }\r\n        if(check==1){\r\n            \/\/if password also matches then login is shown successful\r\n            if(hamming(users[pos].password,pass_word)==0){\r\n                printf(\"Login was successful!!\");\r\n                \/\/turns made to 0 to exit from the while loop and checker ensures that operation was successful\r\n                turns =0;\r\n                checker =0;\r\n            }else{\r\n                \/\/else we move into a while loop from which we can exit only if the password has been reset\r\n                while(1){\r\n                    \/\/new_pass string stores the new password entered by the user\r\n                    char new_pass[101];\r\n                    int i;\r\n                    \/\/i keeps track of the current position in new_pass where a vowel is found and if it is equal to length of new_pass\r\n                    \/\/then no vowel found is indicated\r\n                    printf(\"Your password does not match, please enter a new password: \");\r\n                    scanf(\"%s\",new_pass);\r\n                    \/\/len stores the length of new_pass\r\n                    int len = strlen(new_pass);\r\n                    \/\/checking if vowel is present\r\n                    for(i=0 ; i<len ; i++){\r\n                        char ch = new_pass[i];\r\n                        if(ch=='a'|| ch=='e'|| ch=='i'|| ch=='o'|| ch=='u'|| ch=='A'|| ch=='E'|| ch=='I'|| ch=='O'|| ch=='U'){\r\n                            break;\/\/ no need to check further once a vowel is found\r\n                        }\r\n                    }\r\n                    \/\/ham_count stores the hamming distance between new password entered and the original password in data\r\n                    \/\/reqd stores the value of length of concatenated string formed by joining old and new password divided by 3\r\n                    int ham_count = hamming(users[pos].password,new_pass);\r\n                    int reqd = (strlen(users[pos].password)+len)\/3;\r\n                    \/\/required condition is checked as given in the question\r\n                    if(i<len && ham_count<=reqd){\r\n                        \/\/if condition satisfies then strcpy() copies the new password into the old password and a password set\r\n                        \/\/message is displayed\r\n                        strcpy(users[pos].password,new_pass);\r\n                        printf(\"Thank you, your password has been reset.\");\r\n                        \/\/turns made to 0 to exit from the outer while loop and checker ensures that operation was successful\r\n                        turns=0;\r\n                        checker=0;\r\n                        \/\/break is used to exit from the inner infinite loop\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            \/\/displayed if username entered is not registered\r\n            printf(\"This username is not registered! Please consider registering this username\\n\");\r\n            turns--; \/\/turns is decreased by one\r\n        }\r\n    }\r\n    if(checker){\r\n        \/\/this tells that the outer while loop ended with wrong attempts\r\n        printf(\"You have used up all your attempts!!\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "In this question we will calculate the tax of an employee as per the income tax rules. Depending on the income, the amount\r\n                of tax varies according to different income groups (or the tax slabs). The income tax department has provided a set of rules\r\n                to calculate the tax of a person on taxable income according to the tax slab rules as shown in the table below. However,\r\n                certain types of investments are considered as tax-free for minimum yearly income of Rs. 10, 00, 000, and the yearly taxable\r\n                income will be computed after deducting those investments from the total income (upto certain limit). These investments\r\n                are listed as follows:\r\n                \u2022 House loan (upto Rs. 2, 50, 000)\r\n                \u2022 Life insurance premium (upto Rs. 1, 50, 000)\r\n                \u2022 Medical insurance (upto Rs. 50, 000)\r\n                Yearly income tax slab Tax Rates\r\n                Rs. 0 \u2212 2, 50, 000 Nil\r\n                Rs. 2, 50, 001 \u2212 5, 00, 000 5%\r\n                Rs. 5, 00, 001 \u2212 7, 50, 000 Rs. 12500 + 10% of total income exceeding Rs. 5, 00, 000\r\n                Rs. 7, 50, 001 \u2212 10, 00, 000 Rs. 37500 + 15% of total income exceeding Rs. 7, 50, 000\r\n                Rs. 10, 00, 001 \u2212 12, 50, 000 Rs. 75000 + 20% of total income exceeding Rs. 10, 00, 000\r\n                Rs. 12, 50, 001 \u2212 15, 00, 000 Rs. 125000 + 25% of total income exceeding Rs. 12, 50, 000\r\n                Above Rs. 15, 00, 000 Rs. 187500 + 30% of total income exceeding Rs. 15, 00, 000\r\n                Your task is to write a program that takes input from the user the monthly salary of a person, yearly house loan paid\r\n                (if there is any), yearly life insurance premium paid (if there is any), yearly medical insurance paid (if there is any), and\r\n                calculate the income tax based on the above rules.\r\n                Example:\r\n                Input: Monthly salary = 85000, house loan = 0, life insurance premium = 130000, medical insurance = 40000\r\n                Output: Total tax: 165000\r\n                Example:\r\n                Input: Monthly salary = 130000, house loan = 275000, life insurance premium = 95000, medical insurance = 0\r\n                Output: Total tax: 318000",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int ms,hl,li,mi,fyi,it;\r\n    printf(\"Monthly salary = \\n\");\r\n    scanf(\"%d\", &ms);\r\n     printf(\"house loan = \\n\");\r\n    scanf(\"%d\" ,&hl);\r\n     printf(\"life insurance premium =\\n\");\r\n    scanf(\"%d\" ,&li);\r\n    printf(\"medical insurance = \\n\");\r\n    scanf(\"%d\" ,&mi);\r\n    fyi=(ms*12 - (hl+li+mi));\r\n    if(fyi>=0 && fyi<=250000)\r\n    it=0;\r\n    else if(fyi>=250001&& fyi<=500000)\r\n    it =0.05*fyi;\r\n    else if(fyi>=500001 && fyi<=750000)\r\n    it =12500+0.1*(fyi);\r\n    else if(fyi>=750001 && fyi<=1000000)\r\n    it =37500+0.15*(fyi);\r\n    else if(fyi>= 1000001 && fyi<= 1250000)\r\n    it =75000+0.2*(fyi);\r\n    else if(fyi>=1250001 && fyi<= 1500000)\r\n    it =125000+0.25*(fyi);\r\n    else if(fyi>1500000)\r\n    it =187500+0.3*(fyi);\r\n    printf(\"Total tax: %d\",it);\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "In this question, we will approximate the square root of a real-valued function f(x) = 0 by a numerical approximation\r\n                technique. The idea is that, a continuous and differentiable function can be approximated by a straight line tangent to it.\r\n                Consider that we want to find the root of a continuous, differentiable function f(x), and we know that the root is near the\r\n                point x = x0. Then the approximation of the root is computed as,\r\n                x1 = x0 \u2212\r\n                f(x0)\r\n                f\r\n                0(x0)\r\n                ,\r\n                where f\r\n                0\r\n                is the derivative of f, and x0 is the first approximate value. This process is repeated as many times as necessary to\r\n                get the desired accuracy. In the general case, if xn is the current estimated value, the next approximation xn+1 is given by,\r\n                xn+1 = xn \u2212\r\n                f(xn)\r\n                f\r\n                0(xn)\r\n                .\r\n                Your task is to consider a function f(x) = x\r\n                3 \u2212 25, repeat the approximation process until the criteria |xn+1 \u2212 xn| < e\r\n                is met (where e is the tolerance limit), or a maximum number of iterations are reached. Print the iteration number, x0, x1,\r\n                error, and the final computed square root value.\r\n                Example:\r\n                Input: x0 = 5.0, e = 0.00005, maxIteration = 20\r\n                Output:\r\n                Iteration x0 x1 Error\r\n                1 5.000000 3.666667 1.333333\r\n                2 3.666667 3.064279 0.602387\r\n                3 3.064279 2.930340 0.133939\r\n                4 2.930340 2.924031 0.006309\r\n                5 2.924031 2.924018 0.000014\r\n                The square root is 2.924018",
                    "Answer": "#include<stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    float e,et,n,x0, xn;\r\n    printf(\"x0 = \");\r\n    scanf(\"%f\",&x0);\r\n    printf(\"e = \");\r\n    scanf(\"%f\",&et);\r\n    printf(\"maxIteration = \");\r\n    scanf(\"%f\",&n);\r\n    int i =0;\r\n    e = et + 1;\r\n\r\n    printf(\"Iteration    x0         x1        error\\n\");\r\n\r\n    while(e>et){\r\n        xn = x0 - (x0*x0*x0 - 25)\/(3*x0*x0);\r\n        e = ( x0 - xn);\r\n        printf(\"   %d     %f   %f   %f\\n\",i+1,x0,xn,e);\r\n\r\n        x0 = xn;\r\n        i++;\r\n        if (i==n){\r\n            break;\r\n        }\r\n\r\n    }\r\n    printf(\"The square root is %f\",xn);\r\n}\r\n\r\n"
                },
                {
                    "Question":"Consider a repeated number game between 2 players A and B. In each round, a player will randomly generate a positive\r\n                integer within certain range. The rule of the game is as follows.\r\n                \u2022 The player who generates an integer having more number of digits wins that round of the game. His points will be\r\n                equal to the number of digits in the number he generated. If the two player generates numbers having the same number\r\n                of digits, then the number having more sum of digits generated by the player wins, and his point will be equal to the\r\n                sum of the digits. So if the 2 generated numbers by A and B are 12 and 124 respectively, then B wins and his point is\r\n                3 (A\u2019s point is 2). If the generated numbers are 567 and 612, then A wins and his point is 18 (B\u2019s point is 9).\r\n                \u2022 In each round, the winner player gets a badge of 1, and the defeated player gets a badge of 0. After all rounds are\r\n                completed, the final score will be computed as the sum of total points in each round, multiplied by the number of times\r\n                the player gets badge 1. The player having the maximum final score, wins the game.\r\n                Your task will be to simulate the game for n number of rounds, show the results of intermediate rounds, and compute\r\n                the final score to declare the winner.\r\n                For your convenience, the random number generator code is provided. Include the following headers in your code:\r\n                #include<time.h>, #include<stdlib.h>\r\n                Add this at the beginning of main( ) function: srand(time(0));\r\n                Then the following line of code generates a random number between 5 to 1000, and stores in num:\r\n                int num = (rand() % (1000 - 5 + 1)) + 5;\r\n                Example:\r\n                Input: Number of rounds: 3\r\n                Output:\r\n                Round-1 --> A\u2019s number: 6 B\u2019s number: 64\r\n                A\u2019s point: 1 B\u2019s point: 2\r\n                A\u2019s badge: 0 B\u2019s badge: 1\r\n                -- B wins Round 1 --\r\n                Round-2 --> A\u2019s number: 127 B\u2019s number: 266\r\n                A\u2019s point: 10 B\u2019s point: 14\r\n                A\u2019s badge: 0 B\u2019s badge: 1\r\n                -- B wins Round 2 --\r\n                Round-3 --> A\u2019s number: 792 B\u2019s number: 115\r\n                A\u2019s point: 18 B\u2019s point: 7\r\n                A\u2019s badge: 1 B\u2019s badge: 0\r\n                -- A wins Round 3 --\r\n                Final result => A\u2019s total score: 29, B\u2019s total score: 46\r\n                --- B wins the game ---",
                    "Answer":"#include <stdio.h>\r\n#include<time.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    srand(time(0));\r\n    int n;\r\n    printf(\"Number of rounds:\");\r\n    scanf(\"%d\",&n);\r\n    int x,xl;\r\n    int y,yl;\r\n        int xp=0;\r\n        int yp=0;\r\n        int xw=0;\r\n        int yw=0;\r\n    for(int i=0;i<n;i++){\r\n        printf(\"Round-%d\\n\",i+1);\r\n        int xs=0;\r\n        int ys=0;\r\n        x = (rand() % (1000 - 5 + 1)) + 5;\r\n        y = (rand() % (1000 - 5 + 1)) + 5;\r\n        printf(\"A s number: %d B s number: %d\\n\",x,y);\r\n        for(xl=0;x!=0;xl++){\r\n            xs=x%10;\r\n            x=x\/10;\r\n        }\r\n        for(yl=0;y!=0;yl++){\r\n            ys=y%10;\r\n            y=y\/10;\r\n        }\r\n        if(xl>yl){\r\n            xw++;\r\n            printf(\"A s badge: 1 B s badge: 0\");\r\n            xp+=xl;\r\n            yp+=yl;\r\n            printf(\"A s point: %d B s point: %d\\n\",xl,yl);\r\n            printf(\"--A wins round %d--\\n\",i+1);\r\n        }else if(yl>xl){\r\n            yw++;\r\n            printf(\"A s badge: 0 B s badge: 1\");\r\n            xp+=xl;\r\n            yp+=yl;\r\n            printf(\"A s point: %d B s point: %d\\n\",xl,yl);\r\n            printf(\"--B wins round %d--\\n\",i+1);\r\n        }else if(xl==yl){\r\n            printf(\"A s point: %d B s point: %d\\n\",xs,ys);\r\n            if(xs>ys){\r\n\r\n                xw++;\r\n                printf(\"A s badge: 1 B s badge: 0\\n\");\r\n                xp+=xs;\r\n                yp+=ys;\r\n                printf(\"--A wins round %d--\\n\",i+1);\r\n\r\n            }else{\r\n                yw++;\r\n                printf(\"A s badge: 0 B s badge: 1\\n\");\r\n                xp+=xs;\r\n                yp+=ys;\r\n                printf(\"--B wins round %d--\\n\",i+1);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    printf(\"Final result => A's total score: %d, B's total score: %d\\n\",xp*xw,yp*yw);\r\n    if(xp*xw>yp*yw){\r\n            printf(\"-- A wins the game --\");\r\n    }else if(xp*xw<yp*yw){\r\n            printf(\"-- B wins the game --\");\r\n    }else if(xp*xw==yp*yw){\r\n            printf(\"-- The game is tied --\");\r\n    }\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "In this question, we will find the straight line equation that best fits a given set of points. Consider a given set of ordered\r\n                pairs of points (x1, y1),(x2, y2), \u00B7 \u00B7 \u00B7 ,(xn, yn). Our goal is to approximate the parameters m and b in the straight line equation\r\n                y = mx + b. This can be achieved by the following steps:\r\n                Step-1 : Calculate the mean of the x -values and the mean of the y-values as follows:\r\n                x\u00AF =\r\n                Pn\r\n                i=1 xi\r\n                n\r\n                , y\u00AF =\r\n                Pn\r\n                i=1 yi\r\n                n\r\n                Step-2 : The slope is computed as,\r\n                m =\r\n                Pn\r\n                i=1(xi \u2212 x\u00AF)(yi \u2212 y\u00AF)\r\n                Pn\r\n                i=1(xi \u2212 x\u00AF)\r\n                2\r\n                Step-3 : Compute the y-intercept of the line as,\r\n                b = \u00AFy \u2212 mx\u00AF\r\n                Step-4 : Use the slope m and the y-intercept b to form the equation of the line.\r\n                Your task is to take the x and y coordinates of the points as input from the user, store them in two different arrays\r\n                (you may assume that the number of data points are fixed, so you can declare the array sizes accordingly), and compute the\r\n                straight line equation based on the above formulas.\r\n                Example:\r\n                Input:\r\n                x -coordinates: 8, 2, 11, 6, 5, 4, 12, 9, 6, 1\r\n                y-coordinates: 3, 10, 3, 6, 8, 12, 1, 4, 9, 14\r\n                Output: m = \u22121.1, b = 14.0, line equation y = \u22121.1x + 14.0",
                    "Answer":"#include<stdio.h>\r\nint main() {\r\n    int x[10],y[10];\r\n    float mx=0,my=0;\r\n    printf(\"x-coordinates:\");\r\n    for (int i=0; i<10;i++){\r\n        scanf(\"%d\",&x[i]);\r\n    }\r\n    for (int i=0; i<10;i++){\r\n        mx+= x[i];\r\n    }\r\n    mx= mx\/10;\r\n    printf(\"y-coordinates:\");\r\n    for (int i=0; i<10;i++){\r\n        scanf(\"%d\",&y[i]);\r\n    }\r\n    for (int i=0; i<10;i++){\r\n        my+= y[i];\r\n    }\r\n    my= my\/10;\r\n\r\n    float a,b=0;\r\n    for (int i=0; i<10;i++){\r\n        a+= (x[i]-mx)(y[i]-my);\r\n        b+=  (x[i]-mx)(x[i]-mx);\r\n    }\r\n    float m = a\/b;\r\n    float i = my - m*mx;\r\n    printf(\"m = %0.1f,b = %0.1f, line equation y = %0.1fx + %0.1f\",m,i, m,i);\r\n\r\n}\r\n"
                },
                {
                    "Question": "Consider an integer array of size 10. The array contains integer numbers from 1 to 200. \nWrite a C program that (a) Declares the array and asks the user to enter 10 integer numbers \nin between 1 and 200 (inclusive those). Once the user enters 10 integer numbers within the range, \nthe array is populated with those numbers. (b) Rearrange the numbers of the array elements as follows. \nYou should not use any additional array for this. - The numbers less than 100 (including 100) are kept first, \nthese numbers are sorted\r\nin the increasing order - The numbers greater than 100 are kept next, these numbers are sorted in the\r\ndecreasing order (c) Print the output array after rearranging the elements.",
                    "Answer": "#include <Stdio.h>\r\nint main()\r\n{\r\n    int arr[10], temp, index=10;\r\n    printf(\"enter 10 numbers between 1 to 200 inclusive of both\\n\");\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        scanf(\"%d\", &arr[i]);\r\n        if (arr[i] > 200 || arr[i] < 1)\r\n        {\r\n            printf(\"entered number not valid please try again\\n\");\r\n            i--;\r\n        }\r\n    }\r\n    for (int i = 0; i < 10; ++i)\r\n    {\r\n        for (int j = i + 1; j < 10; ++j)\r\n        {\r\n            if (arr[i] > arr[j])\r\n            {\r\n                temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp;\r\n            }\r\n        }\r\n    }\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        if (arr[i] > 100)\r\n        {\r\n            index = i;\r\n            break;\r\n        }\r\n    }\r\n    printf(\"%d\\n\",index);\r\n    for (int i = index; i < 10; ++i)\r\n    {\r\n        for (int j = i + 1; j < 10; ++j)\r\n        {\r\n            if (arr[i] < arr[j])\r\n            {\r\n                temp = arr[i];\r\n                arr[i] = arr[j];\r\n                arr[j] = temp;\r\n            }\r\n        }\r\n    }\r\n    printf(\"\\nprinting the array\\n\");\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        printf(\"%d \",arr[i]);\r\n    }\r\n    \r\n    return 0;\r\n}"
                },
                {
                    "Question": "Declare a C string and initialize it as follows : \"Your_Roll Number, Your First Name, Your Last Name\" \nFor example, if your roll number is 20CS10021. Your first name is Rohit and your last name is Raj, \nthen the C string will be *20CS10021,Rohit Raj\". Initialize this string statically in your code; \nyou do not take an input from the user. Now, write a C program to produce the following string in the output, from the above string. \n\"My name is Rohit Raj. My roll number is 20C510021\", To do this, your code should have a printf statement as follows : \nprintf(\"My name is %s %s. My roll number is %s\", str1, str2, str3) \nYour C code should populate these three strings from the original string by extracting the relevant substrings. \nMarks will not be given if you hardcode the output statement.",
                    "Answer": "#include <stdio.h>\r\nint main()\r\n{\r\n    char str1[15], str2[15], str3[15], s[] = \"21MA10059,SHRISH,TRIPATHI\";\r\n    int i=0;\r\n    do\r\n    {\r\n        str1[i]=s[i];\r\n        i++;\r\n    } while (s[i]!=',');\r\n    i++;\r\n    int j=0;\r\n    do\r\n    {\r\n        str2[j]=s[i];\r\n        i++;j++;\r\n    } while (s[i]!=',');\r\n    str2[j]='\\0';\/\/null termination to get rid of garbage values\r\n    i++;\r\n    int k=0;\r\n    do\r\n    {\r\n        str3[k]=s[i];\r\n        i++;k++;\r\n    } while (s[i]!='\\0');\r\n    printf(\"My name is %s %s. My roll number is %s\",str2,str3,str1);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program to read in n (assume 0 < n <=20) positive integers and then find out all non-duplicate pairs\r\nwhose sum of odd valued digits have a difference between 5 and 20 but that difference is not divisible by 3.\r\nFor example, if n = 4 and the numbers are 3456, 1237, 8888, 77777, then the sum of odd valued digits are 8 (for3456), \n11 (for 1237), 0 (for 8888) and 35 (for 77777) and the pairs are (3456, 8888) and (1237, 8888). \nThe otherpairs do not satisfy the condition. \n[You may print the pairs in any order].\r\nSave the file as A07_<Roll Number>.c (example A07_21AG10002.c). Build, Run and test it for the given data as\r\nwell as your own data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a positive integer n (0 < n <= 20) and print it. Create a new line.\r\n2. Read in n positive integers and store them in an array.  Print them in a single line followed by commas.\r\nThen create a new line.\r\n3. Store the sum of odd-valued digits of every number in a separate array. Print each number along with the\r\nsum of odd digits of that number appropriately.\r\n4. Print all pairs of numbers whose sum of odd valued digits have a difference between 5 and 20 but that\r\ndifference is not divisible by 3. Do not print duplicate pairs. If there is no such pair, print \u201CNo Such Pair\u201D\r\nTest Data: \r\na) n = 5, numbers are 3456, 1237, 8888, 77777,  7321\r\nb) n = 5, numbers are 11111, 23456, 1134, 99999, 77777\r\nc) n = 4, numbers are  351, 531, 1345, 68153 ",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    \/* Declaring the variables used *\/\r\n    int n,a[20],b[20],temp1,temp2,temp3,temp4=0;\r\n\r\n    \/* Taking input data from the user *\/\r\n    printf(\"Enter value of n: \");\r\n    scanf(\"%d\", &n);\r\n    printf(\"n = %d\\n\", n);\r\n    printf(\"Enter the numbers: \");\r\n    for (int i=0; i<n; i++)\r\n    scanf(\"%d\",&a[i]);\r\n\r\n    \/* Printing numbers entered and calculating the sum of odd digits for each of them *\/\r\n    printf(\"The numbers entered are: \");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        temp1 = a[i];\r\n        b[i] = 0;\r\n        if (i<n-1) printf(\"%d, \", a[i]); else printf(\"%d\\n\\n\", a[i]);\r\n        \r\n        while(temp1>0)\r\n        {\r\n            temp2 = temp1 % 10;\r\n            if ((temp2 % 2) == 1) b[i] += temp2;\r\n            temp1 \/= 10;\r\n        }\r\n    }\r\n\r\n    \/* Printing the sum of odd digits for each number *\/\r\n    printf(\"Sum of odd digits of each number:\\n\");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        printf(\"%d -> %d\\n\",a[i],b[i]);\r\n    }\r\n\r\n    \/* Finding and printing the required pairs of numbers *\/\r\n    printf(\"\\nRequired pairs of numbers:\\n\");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        for (int j=i; j<n; j++)\r\n        {\r\n            temp3 = b[i] - b[j];\r\n            if (temp3 < 0) temp3 *= (-1);\r\n            if (temp3>=5 && temp3<=20 && ((temp3 % 3) != 0)) \r\n            {\r\n                printf(\"(%d, %d)\\n\",a[i],a[j]);\r\n                temp4++;\r\n            }\r\n        }\r\n    }\r\n    if (temp4 == 0) printf(\"No Such Pair!\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program that reads in a string of characters (without blanks in between) and then prints only the unique alphabets\r\n(replacing all upper case elements by their lower case) as a string which has the vowels first followed by the consonants after\r\nall the vowels. No numeric or other non-alphabet is printed. If there is no alphabet, print \u201CNo Alphabet in String\u201D. \r\nFor example, if the string read is IITKharagpur$India then the program will first print IITKharagpur$India and then print\r\niautkhrgpnd. (It could also print the result string in any sequence, like aiutkdhgrnp, etc ).\r\nSave the file as A08_<Roll Number>.c (example A08_21AG10002.c). Build, Run and test it for the given data. Then upload the\r\n.c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a character string in %s format and store it in a character array. Print the string read in and create a new line.\r\n2. In a separate array, create a string formed by only the unique alphabets of the original string, replacing all upper case\r\ncharacters by their lower case, removing all non-alphabets and having the vowels before the consonants.\r\n3. Print this new string in a suitable fashion and create a new line. If there is no alphabet, print \u201CNo Alphabet in String\u201D. (Do\r\nnot use any special string library function except to read and write in %s format.) [If you wish, you can also use an\r\nintermediate third array for your work, but that is not necessary]\r\nTest Data: \r\na) IITKharagpur$India\r\nb) PDSLabSection11\r\nc) A*Algorithm#AI\r\nd) &*5123!",
                    "Answer":  "#include<stdio.h>\r\nint main()\r\n{\r\n    char st[50];\r\n    char st_fin[50];\r\n    int i,j,k;\r\n    scanf(\"%s\",&st);\r\n    printf(\"The string read in: %s\\n\",st);\r\n    for(i=0;st[i]!='\\0';i++)\r\n    {\r\n        if((st[i]>='A')&&(st[i]<='Z'))                             \/\/it converts each uppercase to lower case\/\/\r\n            st[i]=st[i]+32;\r\n    }\r\n    for (i=0,j;st[i]!= '\\0'; ++i)\r\n    {\r\n      while ((!(st[i]>= 'a')&&(st[i] <= 'z'))&&!(st[i] == '\\0'))     \/\/correcting the array by removing any character other than vowel or consonants\/\/\r\n      {\r\n         for (j=i;st[j]!='\\0';++j)\r\n         {\r\n            st[j]=st[j+1];\r\n         }\r\n         st[j]='\\0';\r\n      }\r\n    }\r\n    for(i=0;st[i]!= '\\0';i++)\r\n  \t{\r\n  \t\tfor(j =i+1;st[j]!= '\\0';j++)                                   \/\/removing duplicate terms and storing them in the same array\/\/\r\n  \t\t{\r\n  \t\t\tif(st[j]==st[i])\r\n\t\t\t{\r\n  \t\t\t\tfor(k=j;st[k]!= '\\0';k++)\r\n\t\t\t\t{\r\n\t\t\t\t\tst[k]=st[k+1];\r\n\t\t\t\t}\r\n \t\t\t}\r\n\t\t}\r\n\t}\r\n\ti=0;int x=0;\r\n\twhile(st[i]!= '\\0')\r\n\t{\r\n\t    if((st[i]=='a')||(st[i]=='e')||(st[i]=='i')||(st[i]=='o')||(st[i]=='u'))\r\n        {\r\n            st_fin[x++]=st[i];                                                       \/\/first set of characters should be vowels\/\/\r\n        }                                                                            \/\/forming final array with string beginning with vowels\/\/\r\n        i++;\r\n\t}\r\n\ti=0;\r\n\twhile(st[i]!= '\\0')\r\n\t{\r\n\t    if((st[i]!='a')&&(st[i]!='e')&&(st[i]!='i')&&(st[i]!='o')&&(st[i]!='u'))\r\n        {\r\n            st_fin[x++]=st[i];                                                         \/\/adding the consonant characters to the string\/\/\r\n        }\r\n        i++;\r\n\t}\r\n    if (st[0]=='\\0')\r\n        printf(\"No Alphabet in String\");                                                \/\/prints valid message if no alphabets were taken in input\/\/\r\n    else\r\n    {\r\n        printf(\"The new string is: \");\r\n        for(i=0;st_fin[i]!='\\0';i++)\r\n        {\r\n            printf(\"%c\",st_fin[i]);                                                     \/\/finally printing the new string\/\/\r\n        }\r\n    }\r\n}"
                },
                {
                    "Question":"Write a program to input n integers from the keyboard and store them within an array. Declare\r\nanother array of size n and copy the contents of the first array into the second array as per the\r\nfollowing rules:\r\n\r\n(a) For the elements in the even positions of the first array, into the even positions of the\r\nsecond array in the reverse order. Example: the element in the 1st even position of the 1st\r\narray should be placed in the last even position of the 2nd array. Similarly the element in\r\nthe last even position of the 1st array should be placed in the 1st even position of the 2nd\r\narray. For more details see the example given below.\r\n(b) For all elements in odd positions of the first array, copy the values in the corresponding\r\nodd positions of the second array after multiplying that value with the rounded off value\r\nof the square root of the sum of squares of all elements to the right of that element in the\r\nfirst array. Round off the square root value to a perfect integer (lower integer in case of\r\ndecimal part being less than 0.5 and next higher integer in case the decimal part is greater\r\nthan or equal to 0.5). In case no numbers exist to the right hand side for an odd position\r\nnumber, copy the number as it is in the corresponding odd position of the second array.\r\nYou can input the original array as you wish. Read the question very carefully along with the\r\nexample shown and understand the logic. For output display the second array only.\r\nExample:\r\n(Please take the input and display the output as shown)\r\nInput:\r\n2 6 7 4 9 3\r\nOutput:\r\n28 3 70 4 27 6\r\n[Reason: The even position numbers are copied in reverse order in even positions only. For the\r\nodd position numbers, say the number at position 1 i.e \u20182\u2019 of the input array, sum of squares of\r\nall elements to the right of \u20182\u2019 in the original array = 191. Square root of 191 is 13.82, so the\r\nrounded value is 14, now multiply the original number \u20182\u2019 with 14 to get 28, which is stored in\r\nthe 1st position of the second array. Apply the same rule for all odd position elements. In case\r\nthere are no elements to the right of the input array, then copy the value as it is in the second\r\narray.]",
                    "Answer":"\/*a program to input n integers from the keyboard and store them within an array. Declare\r\nanother array of size n and copy the contents of the first array into the second array as per the\r\nfollowing rules:*\/\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main()\r\n{\r\n    \/\/variable initialization\r\n    int n;double sum=0.0;\r\n    double sq=0.0;\r\n\r\n    \/\/taking the array size\r\n    printf(\"Input array size=\");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/array declartion\r\n    int a[n],b[n];\r\n    printf(\"enter array elements\\n\");\r\n\r\n    \/\/taking array input\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        printf(\"Enter the element A[%d]=\",i);\r\n        scanf(\"%d\",&a[i]);\r\n\r\n    }\r\n\r\n    \/\/performing the calculations\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        \/\/swapping if even\r\n        if((i+1)%2==0)\r\n        {\r\n            b[n-i]=a[i];\r\n            \r\n\r\n        }\r\n\r\n        \/\/calculated for non-even digits\r\n        else\r\n        {\r\n            for(int j=i+1;j<n;j++)\r\n            {\r\n                sum=sum+pow(a[j],2);\r\n\r\n            }\r\n            \r\n            \/\/taking square root and rounding off\r\n            sq=round(sqrt(sum));\r\n            \r\n            b[i]=a[i]*sq;\r\n            sum=0.0;\r\n\r\n            \r\n        }\r\n        \r\n    }\r\n\r\n    \/\/ printing the new array\r\n    printf(\"\\n The new array :\");\r\n    for (int i=0;i<n;i++)\r\n    {\r\n        printf(\"\\nElement B[%d]=%d\",i,b[i]);\r\n    }\r\n    \r\n    \/\/ completion of the program\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to calculate the relative grades of 10 students. The steps to calculate the\r\ngrade are given as follows:\r\n\r\n(a) Take the marks of the 10 students in an array marks[]. The maximum and minimum marks\r\nare 100 and 0 respectively. If the entered marks are outside the range, then error should\r\nbe displayed, and the system will wait till you enter the marks within the range.\r\n(b) Calculate the average (\u03BC) of the marks\r\n(c) Calculate the standard (\u03C3) deviation of the marks\r\n(d) Hence calculate the relative grades of the marks using the category: 10 if the mark is above\r\n(\u03BC + 1.5*\u03C3)\r\n9 if the mark is above (\u03BC + 1.0*\u03C3)\r\n8 if the mark is above (\u03BC + 0.5*\u03C3)\r\n7 if the mark is above (\u03BC)\r\n6 if the mark is above (\u03BC - 0.5*\u03C3)\r\n5 if the mark is above (\u03BC - 1.0*\u03C3)\r\n4 if the mark is above (\u03BC - 1.5*\u03C3)\r\nYour input should be the marks of 10 students within an array and your output should\r\nbe the grades of each of the students based on the marks that you have inputted. You\r\nmay print the grade of each student in a new line and additionally make the output more\r\nreadable, for example,\r\nGrade of Student 1 = 9\r\nGrade of Student 2 = 10\r\nGrade of Student 3 = 7 and likewise. . . . . . .",
                    "Answer":"\/*program to find mean,standard deviation and grades of student *\/\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main()\r\n{\r\n    \/\/variable and array declaration\r\n    int a[10],sum=0;\r\n    double mean=0.0,sd=0.0;\r\n\r\n    \/\/taking input of marks\r\n    printf(\"Enter the marks of students\\n\");\r\n    for (int i=0;i<10;i++)\r\n    {\r\n        printf(\"Student %d=\",i+1);\r\n        scanf(\"%d\",&a[i]);\r\n\r\n        \/\/if marks not in range\r\n        while(a[i]>100||a[i]<0)\r\n        {\r\n            printf(\"Error,please enter marks within range\\nStudent %d=\",i+1);\r\n            scanf(\"%d\",&a[i]); \r\n        }\r\n    }\r\n\r\n    \/\/ finding mean \r\n    for(int i=0;i<10;i++)\r\n    {\r\n        sum=sum+a[i];\r\n    }\r\n    mean=sum\/10.0;\r\n\r\n    \/\/ finding standard deviation\r\n    for (int i=0;i<10;i++)\r\n    {\r\n        sd=sd+pow((a[i]-mean),2);\r\n    }\r\n    sd=sqrt(sd\/10);\r\n\r\n    \/\/cgecking for grades and printing them\r\n    for(int i=0;i<10;i++)\r\n    {\r\n        if (a[i]>=(mean+1.5*sd))\r\n        printf(\"\\nGrade of Student %d=10\",i+1);\r\n\r\n        else if (a[i]<(mean+1.5*sd)&&a[i]>=(mean+1.0*sd))\r\n        printf(\"\\nGrade of Student %d=9\",i+1);\r\n\r\n        else if (a[i]<(mean+1.0*sd)&&a[i]>=(mean+0.5*sd))\r\n        printf(\"\\nGrade of Student %d=8\",i+1);\r\n\r\n        else if (a[i]<(mean+0.5*sd)&&a[i]>=(mean+0*sd))\r\n        printf(\"\\nGrade of Student %d=7\",i+1);\r\n\r\n        else if (a[i]<(mean-0.0*sd)&&a[i]>=(mean-0.5*sd))\r\n        printf(\"\\nGrade of Student %d=6\",i+1);\r\n\r\n        else if (a[i]<(mean-0.5*sd)&&a[i]>=(mean-1.0*sd))\r\n        printf(\"\\nGrade of Student %d=5\",i+1);\r\n\r\n        else if (a[i]<(mean-1.0*sd)&&a[i]>=(mean-1.5*sd))\r\n        printf(\"\\nGrade of Student %d=4\",i+1);\r\n\r\n        else \r\n        printf(\"\\nGrade of Student %d=FAIL\",i+1);\r\n    }\r\n\r\n    \/\/program completed\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to perform the following game. You have N number of buckets and each\r\nbucket contains some specific number of balls. Take input the value of \u2018N\u2019 from the keyboard\r\nand the number of balls in each of the N buckets and store it in an array ball[] of size N. Perform\r\nsuccessive iterations whereby at each iteration, you have to find the number of bucket(s) with\r\nthe least number of balls and also the least value (say the value be x), and remove \u2018x\u2019 balls from\r\neach bucket. You have to continue the game till no balls in any bucket are left. Display the\r\nnumber of bucket(s) with the least number of balls as well as the number of balls remaining\r\nin each bucket after you have extracted the least value, i.e x from each bucket. For displaying\r\nthe number of balls remaining after each iteration, you do not need to resize the ball[] array or\r\ndeclare any other array, simply print the non-zero values within the array side by side after each\r\niteration. You can use only one array to perform all the operations. Consider the example below.\r\nExample:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nEnter Number of Buckets: 5\r\nEnter Positive Number of Balls for Each 5 Buckets: 7 5 2 7 2 [this will be stored in the ball[]\r\narray]\r\nOutput:\r\n(You would need to print the iteration number as well as shown)\r\n\u2014\u2014\u2013Iteration-1\u2014\u2014\u2014\r\nNumber of buckets with least number of balls = 2\r\nNumbers of balls in the Remaining buckets = 5 3 5\r\n[Reason: Buckets 3 and 5 have the least number of balls, i.e 2 balls which is the value of x. Now\r\nremove x=2 balls from each bucket which provides the balls remaining in the other buckets.\r\nSince bucket 3 and 5 have 0 balls remaining you do not print it]\r\n\u2014\u2014\u2013Iteration-2\u2014\u2014\u2014\r\nNumber of buckets with least number of balls = 1\r\nNumbers of balls in the Remaining buckets = 2 2\r\n[Reason: Continue from iteration 1. Bucket 2 has the least number of balls, i.e 3 balls which\r\nis the value of x. Now remove x=3 balls from each bucket which provides the balls remaining\r\nin the other buckets. Since bucket 2 have 0 balls remaining and buckets 3 and 5 already had 0\r\nballs from the previous iteration, you do not print it]\r\n\u2014\u2014\u2013Iteration-3\u2014\u2014\u2014\r\nNumber of buckets with least number of balls = 2\r\nNumbers of balls in the Remaining buckets = NIL [END]",
                    "Answer":"\/*program to play the game of buckets*\/\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main()\r\n{\r\n    \/\/taking buckets input\r\n   int n;\r\n   printf(\"Enter Number of Buckets:\");\r\n   scanf(\"%d\",&n);\r\n   int a[n];\r\n\r\n   \/\/array input\r\n   printf(\"Enter Positive Number of Balls for Each %d Buckets:\",n);\r\n   for (int i=0;i<n;i++)\r\n   {\r\n       scanf(\"%d\",&a[i]);\r\n   }\r\n\r\n   \/\/calucaltion of iterations\r\n   int nr=0,y=1;\r\n    while (1)\r\n    {\r\n        printf(\"\u2014\u2014\u2013Iteration-%d\u2014\u2014\u2014\\n\",y);\r\n        int l=1,b;\r\n        for (int i=0; i < n; i++)\r\n        {\r\n            if (a[i]>0)\r\n            {\r\n                b=a[i];\r\n                break;\r\n            }\r\n        }\r\n        for (int i=1;i<n;i++)\r\n        {\r\n            if (a[i]<=0)\r\n            {\r\n                continue;\r\n            }\r\n            else if (a[i]<b)\r\n            {\r\n                l=1;\r\n                b=a[i];\r\n            }\r\n            else if (a[i]==b)\r\n            {\r\n                l++;\r\n            }\r\n        }\r\n        nr=nr+l;\r\n        for (int j=0;j<n;j++)\r\n        {\r\n            a[j]=a[j]-b;\r\n        }\r\n        printf(\"Number of Buckets with least number of Balls = %d\\n\", l);\r\n        printf(\"Number of balls in the Remaining Buckets = \");\r\n        y++;\r\n        for (int k = 0; k < n; k++)\r\n        {\r\n            if (a[k]<=0)\r\n            {\r\n                continue;\r\n            }\r\n            printf(\" %d\", a[k]);\r\n        }\r\n        if (nr>=n)\r\n        {\r\n            printf(\"NIL[END]\");\r\n            break;\r\n        }\r\n        printf(\"\\n\");\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    \/\/program completed\r\n    return 0;\r\n}"
                },
                {
                    "Question":"You might have observed queues in railway reservation counters. In a queue when the first\r\nperson leaves the queue, the second person becomes the first member of the new queue. Write\r\na C program to input n characters into a character array of size n. Consider the original queue\r\nto be this character array of size n. In each iteration, compute the number of vowels that are\r\npresent within the current iteration\u2019s queue (say this number be \u2018k\u2019) and print all the elements\r\nof the queue by skipping the first k elements of the queue. This queue that you have printed\r\nbecomes your new queue for the next iteration and continue this process until there are no more\r\nelements in the queue or there are no vowels remaining in the current queue being considered.\r\nFor printing the new queue you do not need to perform any deletion or array resizing operation.\r\nRather always keep track of the beginning index of the latest queue for each iteration and\r\nadvance the index accordingly at the end of iteration. You may use only one array to implement\r\nthe queue.\r\nExample:\r\n(Please take the input and display the output as shown)\r\nInput:\r\nOriginal queue: a, y, u, g, h, i, e, k, l\r\n[NOTE: While taking input the character array one by one use scanf(\u201C<space> %c\u201D,&ar[i])\r\n\r\nwithin the loop, where i is the index and ar is the character array. GIVE ONE SPACE BE-\r\nTWEEN THE opening quote and the \u2018%c\u2019 within the scanf() ]\r\n\r\nOutput:\r\n(You would need to print the iteration number as well as shown)\r\n\u2014\u2014-Iteration-1\u2014\u2014\u2014\r\nNew queue: h, i, e, k, l\r\n[Reason: In the original queue there are 4 vowels, a, u, i and e. Hence k=4. Thus display the\r\nqueue from after the first 4 elements of the original queue and the displayed queue becomes your\r\nnew queue for the next iteration]\r\n\u2014\u2014-Iteration-2\u2014\u2014\u2014\r\nNew queue: e, k, l\r\n[Reason: Same as above, now considering the new queue from the previous iteration]\r\n\u2014\u2014-Iteration-3\u2014\u2014\u2014\r\nNew queue: k, l\r\n[END here, no more vowels]",
                    "Answer":"\/*program for which you have printed\r\nbecomes your new queue for the next iteration and continue this\r\nprocess until there are no more elements in the queue or there are no vowels \r\nremaining in the current queue being considered. *\/\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main()\r\n{\r\n    \/\/taking the queue size\r\n    int n;\r\n    printf(\"enter the queue size:\");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/character array initalization and declaration\r\n    char c[n];\r\n    printf(\"Original queue: \");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\" %c\",&c[i]);\r\n    }\r\n\r\n    \/\/variable declaration\r\n    int j=1,k=0,x;\r\n\r\n    \/\/ loop for checking of array vowels\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        \r\n        \/\/ checking vowels\r\n        if (c[i]=='a'||c[i]=='e'||c[i]=='i'||c[i]=='o'||c[i]=='u'||\r\n        c[i]=='A'||c[i]=='E'||c[i]=='I'||c[i]=='O'||c[i]=='U')\r\n        {\r\n            k++;\r\n        }\r\n    }\r\n\r\n    x=k;\r\n\r\n    \/\/checking for next iterations\r\n    while(k!=0)\r\n    {\r\n        printf(\"\u2014\u2014-Iteration-%d\u2014\u2014\u2014\\n\",j);\r\n        k = 0;\r\n        printf(\"New queue:\");\r\n        for(int i=x;i<n;i++)\r\n        {\r\n            printf(\"%c,\",c[i]);\r\n            if (c[i]=='a'||c[i]=='e'||c[i]=='i'||c[i]=='o'||c[i]=='u'||\r\n            c[i]=='A'||c[i]=='E'||c[i]=='I'||c[i]=='O'||c[i]=='U')\r\n            {\r\n               k++;\r\n            }\r\n        }\r\n        x =x+k;\r\n        printf(\"\\n\");\r\n        j++;\r\n    }\r\n    return 0;\r\n\r\n    \/\/program completed\r\n\r\n}"
                },
                {
                    "Question":"Take input a long sentence that contains an arbitrary number of words. Two words are supposed\r\nto be separated by only one blank space character. Also a valid word consists of only the ASCII\r\ncharacters \u2018A-Z\u2019 or \u2018a-z\u2019 and nothing else. However the sentence that you will be taking as input\r\nmay not follow this rule, i.e there may be more than one blank spaces between two words as\r\nwell the words themselves may contain invalid characters. Your task is to refine this invalid\r\ninput to get the correct valid string in place, i.e that you CANNOT use any additional array\r\nto perform this operation, you have to process within the same input array with perhaps one\r\nor two additional character variables. Print the final valid string as well. You can assume that\r\nany sequence of characters \u2018A-Z\u2019 or \u2018a-z\u2019 forms a valid word although it may not exist in the\r\ndictionary [No need to consider full stop also at the end]. You are NOT allowed to use any\r\nin-built string functions.\r\nExample:\r\nInput:\r\nAcceler56ation is def9ine%d as r34@at56e 78of chang4e of ve2@locity\r\nOutput:\r\nAcceleration is defined as rate of change of velocity",
                    "Answer":"#include <stdio.h>\r\n\/*\r\n\r\n arbitrary number of words\r\n*\/\r\nint main()\r\n\r\n{\r\n\r\n    char arr1[100];\r\n    int i=0,j=0;\r\n    char c;\r\n    printf(\"Enter String:\");\r\n    c=getchar();\r\n    while( c!='\\n' && c!='\\r')\r\n    {\r\n        arr1[i++]=c;\r\n        c=getchar();\r\n    }\r\n    arr1[i]='\\0';\r\n    printf(\"\\n%s\\n\",arr1);\r\n    j=i;\r\n    for (i=0;i<j;i++)\r\n    {\r\n        if( ( ( arr1[i]>='A' &&  arr1[i]<='Z' ) || (arr1[i]>='a' &&  arr1[i]<='z') ) && ( arr1[i]!='\\r' && arr1[i]!='\\0') || arr1[i]==' ' )\r\n        {\r\n            printf(\"%c\",arr1[i]);\r\n\r\n        }\r\n    }\r\n\r\n}"
                },
                {
                    "Question":"Camel case notation is a special type of typography where multiple different words are combined\r\ntogether as one word without any space in between AND the first letter of each different word\r\nis uppercase while the remaining letters are lowercase. For example \u2018MySchool\u2019 is a camel case\r\nnotation consisting of two separate words \u2018my\u2019 and \u2018school\u2019, while \u2018IAmHappy\u2019 is a camel case\r\nnotation containing three words, \u2018I\u2019, \u2018am\u2019 and \u2018happy\u2019. Now consider the following two functions\r\nto perform the tasks as mentioned.\r\n\u2022 int numberOfWords(char *camel) - takes input a camel case string char *camel as\r\nargument and returns the number of constituent words.\r\n\u2022 void camelToReverse(char *camel, char *reverse) - Takes input two arguments, one\r\ncamel case string (char *camel) and another empty string (char *reverse). Hence it fills up\r\nthe empty string with the constituent words of the camel case string in the reverse order\r\n(as it appears in the camel case string) with a space in between the constituent words and\r\nterminated with null. For example if the camel case string is \u2018IAmHappy\u2019, then reverse[ ]\r\nwill contain \u2018Happy Am I\u2019, which is also a null terminated string.\r\nWrite a C program to input a camel case string containing any number of constituent words.\r\nFirst print the number of constituent words of the input string by calling the appropriate function\r\nwithin main(). Then call the function camelToReverse() to generate the reverse string of the\r\nconstituent words and print them within that function only. You can assume that the input is\r\nalways a valid camel case string. Note that you can declare character arrays inside main() for\r\ntaking the string input and initializing the empty string, BUT you must work with pointers to\r\nstring within the two functions, i.e while calling the functions you must pass the base address\r\nof the character arrays and work with pointers inside the respective functions. You are NOT\r\nallowed to use any in-built string functions except probably strlen() ONLY.\r\nExample:\r\nInput:\r\n\u2018HowDoYouDo\u2019\r\nOutput:\r\nNumber of words: 4\r\nReverse string: \u2018Do You Do How\u2019 [using pointers]\r\n[NOTE the space in between the constituent words]",
                    "Answer":"#include<stdio.h>\r\nint noofwords(char *camel)\/\/introducing the function1\r\n{\r\n    int cnt=0, i;\/\/introducing variables of function 1\r\n     for(i=0;camel[i]!='\\0';i++)\r\n     {\r\n         if((int)camel[i]>=65&&(int)camel[i]<=90)\/\/conditions for measuring the length\r\n            cnt++;\r\n     }\r\n     return cnt;\r\n}\r\n\r\nvoid cameltoReverse(char *camel,char *t)\/\/introducing function 2 to reverse the words\r\n{\r\n      int n=0, i, j;\r\n      for(i=0;camel[i]!='\\0';i++)\r\n      n++;\r\n      int pr=n,k=0;\r\n      for(i=n-1;i>=0;i--)\r\n      {\r\n          if((int)camel[i]>=65&&(int)camel[i]<=90)\r\n          {\r\n              for(j=i;j<pr;j++)\r\n              {\r\n                t[k]=camel[j];\r\n                k++;\r\n              }\r\n                t[k]=' ';\r\n                k++;\r\n              pr=i;\r\n          }\r\n          \/\/conditions for reversing the camel words\r\n\r\n      }\r\n}\r\n\r\nint main()\/\/introducing main function\r\n{\r\n    char p[100],t[100];\r\n    printf(\"Enter the string: \");\r\n    scanf(\"%[^\\n]%*c\",p);\/\/scanning the string\r\n    printf(\"\\nNumber of words: %d\",noofwords(&p[0]));\r\n    printf(\"\\nReverse String: \");\r\n    cameltoReverse(&p[0],&t[0]);\r\n    printf(\"%s\",t);\r\n}"
                },
                {
                    "Question":"It is unsafe to send data directly from one place to another. Therefore, we use encryption to\r\nconvert the files\/strings into an unreadable format which needs some key\/ method to decrypt\r\nto get the actual file\/string. Write a C program to encrypt a text string following the given steps:\r\n1. Take a string as input (the string can contain alphabets and numbers)\r\n2. Take the 8-bit binary representation of each character in the input string (you can use int\r\ni = (int)c; if c is a char) and concatenate all these bits to get an intermediate representation of\r\nthe whole input string.\r\n3. Then take each groups of 6-bits in the intermediate representation (starting from left-end\r\ntowards the right) and map it using the following rules:\r\n0 => A, 1 => B, ..., 25 => Z (Capital Letters)\r\n26 => a, 27 => b, ..., 51 => z (Small Letters)\r\n2\r\n\r\n52 => 0, 53 => 1, ..., 61 => 9 (Numericals)\r\nExample:\r\nInput:\r\nIIT Kharagpur\r\n[Intermediate steps:\r\n1. (int) \u2018I\u2019 is 73\r\n2. 8-bit binary representation of 73 is 01001001\r\n3. Hence, intermediate representation is 0100100101001001. . .\r\n4. After converting first 6-bits from the intermediate representation, we get (010010)2 =>\r\n(18)10 => S]\r\nOutput:\r\nSUlUIEtoYXJhZ3B1cC\r\n\r\nInput:\r\nC Programming\r\nOutput:\r\nQyBQcm9ncmFtbWluZC\r\n[Hint: You can consider a temporary integer array of size (8*number of characters of string)\r\nwhere you can store the intermediate bit representation, each bit as an integer 1 or integer 0\r\nstored in each cell of the array]",
                    "Answer":"#include <stdio.h>\r\n#include <string.h>\r\n#include <math.h>\r\n#include <ctype.h>\r\n\r\n\r\n\r\nvoid binary(int n,int arr[],int count)\r\n{\r\n\tint j;\r\n\tfor (j=7;j>=0;j--)\r\n\t{\r\n\t\tarr[8*count+j]=n%2;\r\n\t\tn=n\/2;\r\n\t}\r\n}\r\n\r\nvoid print(int n)\r\n{\r\n\tif (n<26) printf(\"%c\",(n+65));\r\n\telse if (n<52) printf(\"%c\",(n+71));\r\n\telse if (n<62) printf(\"%c\",(n-4));\r\n\r\n}\r\n\r\nvoid part2(int n, int no[],int count)\r\n{\r\n\tint j;\r\n\tfor (j=5;j>=0;j--)\r\n\t{\r\n\t\tno[6*count+j]=n%2;\r\n\t\tn=n\/2;\r\n\t}\r\n}\r\n\r\nint reverse(char c)\r\n{\r\n\tif (isupper(c)) \r\n\t{\r\n\t\tint temp=(int)c-65;\t\r\n\t\treturn (temp);\r\n\t}\r\n\tif (islower(c)) \r\n\t{\r\n\t\tint temp=(int)c-71;\t\r\n\t\treturn (temp);\r\n\t}\r\n\telse\r\n\t{\r\n\t\tint temp=(int)c+4;\t\r\n\t\treturn (temp);\r\n\t}\r\n}\r\nint main()\r\n{\r\n\tchar string[100];\r\n\tint k, count=0,i=0;\r\n\tprintf(\"Give the input String: \");\r\n\tgets(string);\r\n\tint arr[8*strlen(string)],le=8*strlen(string),special=0;\r\n\t\r\n\r\n\tprintf(\"The Encrypted String: \");\r\n\twhile (string[i]!='\\0') \r\n\t{\r\n\t\tbinary((int)string[i],&arr[0],count);\r\n\t\ti++;\r\n\t\tcount++;\r\n\t}\r\n\tfor (i=0;i<le\/6;i++)\r\n\t{\r\n\t\tint temp=0;\r\n\t\tfor (k=0;k<6;k++) temp+=arr[6*i+k]*pow(2,5-k);\r\n\t\tprint(temp);\r\n\t}\r\n\t\r\n\tfor (i=0;i<le%6;i++) special+=arr[le\/6+i]*pow(2,(le%6-1)-i);\r\n\tif (le%6!=0) print(special);\r\n\tprintf(\"\\n\");\r\n\t\r\n\tprintf(\"\\nGive Encrypted String: \");\r\n\tchar noo[100];\r\n\tgets(noo);\r\n\tint no[6*strlen(noo)],ple=6*strlen(noo),special2=0;\r\n\t\r\n\r\n\tprintf(\"The Decrypted String: \");\r\n\tfor (i=0;i<strlen(noo);i++) \r\n\t{\r\n\t\tint temp=reverse(noo[i]);\t\r\n\t\tpart2(temp,&no[0],i);\r\n\t}\r\n\tfor (i=0;i<ple\/8;i++)\r\n\t{\r\n\t\tint temp=0;\r\n\t\tfor (k=0;k<8;k++) temp+=no[8*i+k]*pow(2,7-k);\r\n\t\tprintf(\"%c\",(char)temp);\r\n\t}\r\n\t\r\n\tfor (i=0;i<le%8;i++) special2+=no[ple\/8+i]*pow(2,(ple%8-1)-i);\r\n\tif (ple%8!=0) printf(\"%c\",(char)special2);\r\n\tprintf(\"\\n\");\r\n\treturn 0;\r\n}"
                },
                {
                    "Question": "Write a program which first reads an integer n (< 100). Then read n floating point \r\nnumbers and store them in an one dimensional array. The numbers may be both \r\npositive or negative but no two of these n numbers have the same magnitudes. \r\nNow print the number that is closest to 0. Try not to use the abs\/fabs functions.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    float arr[100];\r\n    int n, index_req=0;     \/\/index_req will be used to store the index of the number that is closest to zero\r\n\r\n    \/\/reading the value of integer n\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/reading n floating point values and storing them in an array\r\n    printf(\"Enter %d floating point values: \",n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\" %f\",&arr[i]);\r\n\r\n        \/\/finding the position of the required number\r\n        if(arr[i]*arr[i] < arr[index_req]*arr[index_req])\r\n        {\r\n            index_req=i;\r\n        }\r\n    }\r\n\r\n    \/\/finally, printing the number that is closest to 0\r\n    printf(\"The number that is closest to 0 is: %f\\n\",arr[index_req]);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a program which first reads an integer n (< 100). Then read n integers and \r\nstore them in an one dimensional array. Assume that these n integers are unique \r\nand do not repeat. The program should then print the value of the second largest \r\ninteger in the array. Do not sort the array.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n, arr[100],max_index=0, sec_max_index=1;\r\n    \/\/max_index will be used to store the index of the largest integer\r\n    \/\/sec_max_index will be used to store the index of the second largest integer\r\n\r\n    \/\/reading the value of integer n\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/reading n integer values and storing them in an array\r\n    printf(\"Enter %d integer values: \",n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\" %d\",&arr[i]);\r\n    }\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        if(arr[i]>arr[max_index])\r\n        {\r\n            sec_max_index=max_index;\r\n            max_index=i;\r\n        }\r\n        else if(arr[i]>arr[sec_max_index] && arr[i]<arr[max_index])\r\n        {\r\n            sec_max_index=i;\r\n        }\r\n    }\r\n\r\n    \/\/finally, printing the second largest integer\r\n    printf(\"The second largest integer is: %d\",arr[sec_max_index]);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Consider two sets A and B containing a and b non-repeating integers respectively. \r\nWrite a program which first reads two integers a and b. Assume a. b <100. The \r\nprogram then reads a and b number of integers and stores them in arrays A and \r\nB. The program should next print:\r\ni. The elements of union of sets A and B. (without repeating elements)\r\nii. The elements of intersection of sets A and B. \r\niii. The elements of A - B (i.e., the elements that are present in A but not in B).",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int a,b,arr_a[100],arr_b[100];\r\n    int arr_union[200], arr_inter[100], arr_diff[100];\r\n    \/\/arr_union is the array that will store the union of sets A and B\r\n    \/\/arr_inter is the array that will store the intersection of sets A and B\r\n    \/\/arr_diff is the array that will store those values of A that are not present in B\r\n\r\n    \/\/reading the value of integers a and b\r\n    printf(\"Enter the value of a (length of first array): \");\r\n    scanf(\"%d\",&a);\r\n    printf(\"Enter the value of b (length of second array): \");\r\n    scanf(\"%d\",&b);\r\n    printf(\"\\n\");\r\n\r\n    \/\/reading a integer values and storing them in an array\r\n    printf(\"Enter %d integer values: \",a);\r\n    for(int i=0;i<a;i++)\r\n    {\r\n        scanf(\" %d\",&arr_a[i]);\r\n    }\r\n\r\n    \/\/reading b integer values and storing them in an array\r\n    printf(\"Enter %d integer values: \",b);\r\n    for(int i=0;i<b;i++)\r\n    {\r\n        scanf(\" %d\",&arr_b[i]);\r\n    }\r\n\r\n\r\n    for(int i=0;i<a;i++)\r\n    {\r\n        arr_union[i]=arr_a[i];      \/\/all elements of A will be added in union set\r\n    }\r\n\r\n    int j=a;\r\n    int index_intersection=0;\r\n    int index_diff=0;\r\n    \/\/index_intersection is used for storing indices of array arr_inter\r\n    \/\/index_diff is used for storing indices of array arr_diff\r\n\r\n\r\n    for(int i=0;i<b;i++)\r\n    {\r\n        int flag_union=0;\r\n        for(int k=0;k<a;k++)\r\n        {\r\n            if(arr_union[k]==arr_b[i])\r\n            {\r\n                flag_union++;\r\n            }\r\n            if(arr_a[k]==arr_b[i])\r\n            {\r\n                arr_inter[index_intersection]=arr_a[k];\r\n                index_intersection++;\r\n            }\r\n        }\r\n        if(flag_union==0)       \/\/elements of B will be added to union only if they are not in A\r\n        {\r\n            arr_union[j]=arr_b[i];\r\n            j++;\r\n        }\r\n    }\r\n\r\n    for(int i=0;i<a;i++)\r\n    {\r\n        int flag_diff=0;\r\n        for(int k=0;k<b;k++)\r\n        {\r\n            if(arr_a[i]==arr_b[k])\r\n            {\r\n                flag_diff++;\r\n            }\r\n        }\r\n        if(flag_diff==0)        \/\/elements of set A will be added to arr_diff only if they are not present in set B\r\n        {\r\n            arr_diff[index_diff]=arr_a[i];\r\n            index_diff++;\r\n        }\r\n    }\r\n\r\n    \/\/printing the union array\r\n    printf(\"\\nThe Union array (A U B) is: \\n\");\r\n    for(int i=0;i<j;i++)\r\n    {\r\n        printf(\"%d \",arr_union[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    \/\/printing the intersection array\r\n    printf(\"\\nThe Intersection array is: \\n\");\r\n    for(int i=0;i<index_intersection;i++)\r\n    {\r\n        printf(\"%d \",arr_inter[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    \/\/printing the difference array\r\n    printf(\"\\nThe Difference array (A-B) is: \\n\");\r\n    for(int i=0;i<index_diff;i++)\r\n    {\r\n        printf(\"%d \",arr_diff[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read an integer n (< 100). Input an integer array A[] of n elements from the user. \r\nThe array can have multiple occurrences of elements. You have to remove the \r\nmultiple occurrences of elements and store the distinct elements in a new array. \r\nThe memory for the new array has to be dynamically allocated using malloc such \r\nthat its size is same as the number of distinct elements in A[].",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint countdistinct(int[], int);      \/\/function to count number of distinct elements in input array\r\nvoid copy_distinct(int*,int*,int);  \/\/function to copy distinct elements of an array into another\r\n\r\nint main()\r\n{\r\n    int n, array_input[100],count_distinct;\r\n    \/\/n is an integer variable that stores the number of integers the user wants to enter\r\n    \/\/array_input stores the input values\r\n    \/\/count_distinct stores the number of distinct values in input array\r\n\r\n    \/\/reading n\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/reading values of array\r\n    printf(\"Enter %d values:\\n\",n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\"%d\",&array_input[i]);\r\n    }\r\n\r\n    \/\/counting the number of distinct elements\r\n    count_distinct=countdistinct(array_input,n);\r\n\r\n    \/\/dynamic allocation of memory\r\n    int *point_new_array;\r\n    point_new_array=(int*)malloc(count_distinct*sizeof(int));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if  (point_new_array == NULL)\r\n    {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n\t}\r\n\r\n\t\/\/copying the distinct elements from input array into new array\r\n    copy_distinct(array_input,point_new_array,n);\r\n\r\n    \/\/printing the new array\r\n    printf(\"\\nNew array is: \\n\");\r\n    for(int i=0;i<count_distinct;i++)\r\n    {\r\n        printf(\"%d \",point_new_array[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    \/\/freeing the allocated memory\r\n    free(point_new_array);\r\n    return 0;\r\n\r\n\r\n}\r\n\r\n\/*\r\n*Function: countdistinct\r\n*returns the number of distinct elements in input array\r\n*\r\n* a[]: the input array\r\n* n: the number of elements in input array\r\n*\r\n*returns: number of distinct elements in input array\r\n*\/\r\nint countdistinct(int a[], int n)\r\n{\r\n    if(n==0) return 0;\r\n    int i,j,count=1;\r\n\r\n    for (i=1;i<n;i++)\r\n    {\r\n      for (j=0; j<i;j++)\r\n      {\r\n         if (a[i]==a[j])\r\n         {\r\n            break;             \/\/if same element is found then break\r\n         }\r\n      }\r\n      if (i==j)\r\n      {\r\n         count++;     \/\/increment the number of distinct elements\r\n      }\r\n    }\r\n   return count;      \/\/returns the number of distinct elements\r\n}\r\n\r\n\/*\r\n*Function: copy_distinct\r\n*copies the distinct elements of first array into second array\r\n*\r\n* p: pointer to first elements of first array\r\n* q: pointer to first element of second array\r\n*\r\n*return type: void\r\n*\/\r\nvoid copy_distinct(int *p,int *q,int n)\r\n{\r\n    int k=0;\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int flag=0;\r\n        for(int j=0;j<k;j++)\r\n        {\r\n            \/\/checking if that element if stored in q before\r\n            if(p[i]==q[j])\r\n            {\r\n                flag=1;\r\n                break;\r\n            }\r\n        }\r\n        if(flag==0)\r\n        {\r\n            \/\/copying value in new array location if it is not previously copied\r\n            q[k]=p[i];\r\n            k++;\r\n        }\r\n    }\r\n\r\n    return;\r\n}"
                },
                {
                    "Question":"Write a program, which reads unit prices of N (to be read) items in INR in an array of real\r\nnumber. The program also reads another array of size N, where it stores the number of units\r\nto be procured for the items maintaining the same order of price list. It should print the\r\nfollowing:\r\n(i) Maximum unit price from the list, (ii) total cost of procurement (iii) total number of items\r\nprocured, and (iv) the item for which the maximum amount of INR is spent.\r\nFor example, for 3 items (N=3), the unit price list (in INR) and the number of items to be\r\nprocured are given as follows:\r\nUnit Price List: 1000.00, 1200.00, 800.00\r\nNumber of items to be procured: 5, 3, 0\r\nFor the above input the program prints the following:\r\n\r\n(i) Maximum unit price: Rs. 1200.00\r\n(ii) Total cost of procurement: Rs. 8600.00\r\n(iii) Total number of items procured: 8\r\n(iv) The item for which the maximum expenditure is made: Item 1.\r\nProvide output for the following input data set. Assume that the sequence of unit prices\r\npreserve the order of number of items procured:\r\n(i) N=5\r\nUnit Price List: 5.0, 12.54, 50.65, 27.85, 19.34\r\nNumber of items to be procured: 10, 32, 0, 25, 18\r\n(ii) N=10\r\nUnit Price List: 15.0, 102.65, 77.25, 18.34, 19.85, 8.25, 32.83, 125.00, 45.34, 16.86\r\nNumber of items to be procured: 15, 25, 20, 0, 10, 12, 0, 8, 35, 30",

                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the value of N:\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    float a[n];\r\n    int b[n];\r\n\r\n    printf(\"Enter the unit prices: \\n\");\r\n    for(int i=0;i<n;i++){\r\n        scanf(\"%f\",&a[i]);\r\n    }\r\n    for(int i=0;i<n;i++){\r\n        printf(\"%.2f \",a[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    printf(\"Enter the number of items to be procured: \\n\");\r\n    for(int i=0;i<n;i++){\r\n        scanf(\"%d\",&b[i]);\r\n    }\r\n    for(int i=0;i<n;i++){\r\n        printf(\"%d \",b[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    float maxu=0,cost=0;\r\n    int items=0,maxexp=0;\r\n    for(int i=0;i<n;i++){\r\n        if(maxu<a[i]){\r\n            maxu=a[i];\r\n        }\r\n        cost+=a[i]*b[i];\r\n        items+=b[i];\r\n        if(a[maxexp]*b[maxexp]<a[i]*b[i]){\r\n            maxexp=i;\r\n        }\r\n    }\r\n\r\n    printf(\"Maximum unit price : Rs. %.2f\\n\",maxu);\r\n    printf(\"Total cost of procurement: Rs. %.2f\\n\",cost);\r\n    printf(\"Total number of items procured: %d\\n\",items);\r\n    printf(\"The item for which the maximum expenditure is made: Item %d\\n\",maxexp+1);\r\n    printf(\"\\n\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a program to read scores (an integer within [0,100]) of a subject for N (to be read)\r\nstudents in a class. Compute the mean(\u03BC) and standard deviation (\u03C3) of the distribution and print\r\nthem. The students are graded according to the following policy. Suppose x is the score of a student\r\nthen the grade awarded to the student would be as follows:\r\nEX, if x > \u03BC + 1.5* \u03C3\r\nA, if \u03BC + 0.5* \u03C3 < x < \u03BC + 1.5* \u03C3\r\nB, if \u03BC - 0.5* \u03C3 < x < \u03BC + 0.5* \u03C3\r\nC, if \u03BC - \u03C3 < x < \u03BC - 0.5* \u03C3\r\nD, if \u03BC \u2013 1.5* \u03C3 < x < \u03BC - \u03C3\r\nP, if \u03BC \u2013 2* \u03C3 < x < \u03BC - 1.5* \u03C3\r\nF, if x < \u03BC \u2013 2* \u03C3\r\nIn the output file, print the mean and standard deviation of the distribution. Print also the list\r\nof score and grade for each student in each separate line in the same sequence as they are read.\r\nFor example, if the input is given in the following form:\r\nN=5\r\n45, 23, 80, 20,75\r\nThe outputs are printed as follows:\r\nMean=48.6\r\nStandard Deviation=28.15\r\nMarks and grades of students are:\r\n45 B\r\n\r\n23 C\r\n80 A\r\n20 D\r\n75 A\r\nProvide output for the following input data set.\r\n(i) N=10\r\nStudents\u2019 scores: 23, 35, 12, 56, 75, 84, 23, 90, 95, 65\r\n(ii) N=20\r\nStudents\u2019 scores: 32, 53, 21, 65, 57, 48, 32, 9, 59, 56, 75, 43, 52, 64, 85, 12, 18, 25, 92",

                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nint main(){\r\n\r\n    int n;\r\n    printf(\"Enter the number of students: \\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    int a[n];\r\n    float sum=0;\r\n    printf(\"Enter the marks of the students: \\n\");\r\n    for(int i=0;i<n;i++){\r\n        scanf(\"%d\",&a[i]);\r\n        sum+=a[i];\r\n    }\r\n    for(int i=0;i<n;i++){\r\n        printf(\"%d \",a[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    float mean=sum\/n;\r\n\r\n    float sum2=0;\r\n    for(int i=0;i<n;i++){\r\n        sum2+=(a[i]-mean)*(a[i]-mean);\r\n    }\r\n    float sd;\r\n    sd=sqrt(sum2\/n);\r\n\r\n    printf(\"Mean=%.2f\\n\",mean);\r\n    printf(\"Standard Deviation=%.2f\\n\",sd);\r\n    printf(\"Marks and grades of students are:\\n\");\r\n    for(int i=0;i<n;i++){\r\n        int j;\r\n        if(a[i]>=mean+1.5*sd){\r\n            j=0;\r\n        }\r\n        else if(a[i]>=mean+0.5*sd && a[i]<mean+1.5*sd){\r\n            j=1;\r\n        }\r\n        else if(a[i]>=mean-0.5*sd && a[i]<mean+0.5*sd){\r\n            j=2;\r\n        }\r\n        else if(a[i]>=mean-sd && a[i]<mean-0.5*sd){\r\n            j=3;\r\n        }\r\n        else if(a[i]>=mean-1.5*sd && a[i]<mean-sd){\r\n            j=4;\r\n        }\r\n        else if(a[i]>=mean-2*sd && a[i]<mean-1.5*sd){\r\n            j=5;\r\n        }\r\n        else{\r\n            j=6;\r\n        }\r\n\r\n        if(j==0){\r\n            printf(\"%2d EX\\n\",a[i]);\r\n        }\r\n        if(j==1){\r\n            printf(\"%2d A\\n\",a[i]);\r\n        }\r\n        if(j==2){\r\n            printf(\"%2d B\\n\",a[i]);\r\n        }\r\n        if(j==3){\r\n            printf(\"%2d C\\n\",a[i]);\r\n        }\r\n        if(j==4){\r\n            printf(\"%2d D\\n\",a[i]);\r\n        }\r\n        if(j==5){\r\n            printf(\"%2d E\\n\",a[i]);\r\n        }\r\n        if(j==6){\r\n            printf(\"%2d F\\n\",a[i]);\r\n        }\r\n    }\r\n    printf(\"\\n\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Read N (to be read) 2-D coordinate points in a 2-D array, where the ith row represents the ith\r\npoint, and first and second columns represent x and y coordinates in real numbers, respectively.\r\nIt also reads another value T ( a real number), which decides whether two points are close or\r\nnot. If the Euclidean distance between two points are less than T, the points are declared as\r\nclose. Compute the pairs of points (in any order) which are close. Print also the closest and\r\nfurthest pair among them.\r\nFor example:\r\nN=4\r\nThe list of points: (0,0), (1,0), (1,2), (2,1)\r\nT=1.5\r\nThe output from the program would be as follows:\r\nList of close pairs: ((0,0),(1,0)), ((1,0),(2,1)), ((1,2),(2,1))\r\nClosest pair: ((0,0),(1,0))\r\nFurthest pair: ((0,0),(2,1)) [or ((0,0),(1,2))]\r\nProvide output for the following input data set.\r\n(i) N=4\r\nThe list of points: (1,1), (5.87,5), (1,10.45),(10,1)\r\nT=10.0\r\n(ii) N=8\r\nThe list of points: (-1,45.4), (5.8,5), (8,9.45), (-5.12,-67), (3,45.89), (-4,-4.6), (12,-50.12),(50,-50)\r\nT=12.0\r\n\r\nN.B. Your program may be tested with other input data set.",
                    "Answer":"#include<stdio.h>\r\n#include<math.h>\r\n\r\nfloat distance(float x1,float y1,float x2,float y2){\r\n    return pow(x1-x2,2)+pow(y1-y2,2);\r\n}\r\n\r\nint main(){\r\n\r\n    int n;\r\n    float t;\r\n    printf(\"Enter the number of points: \\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"%d\\n\",n);\r\n\r\n    float a[n][2];\r\n\r\n    printf(\"Enter the co-ordinates of n points: \\n\");\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<2;j++){\r\n            scanf(\"%f\",&a[i][j]);\r\n        }\r\n    }\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<2;j++){\r\n            printf(\"%.2f \",a[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    printf(\"Enter the value of t: \\n\");\r\n    scanf(\"%f\",&t);\r\n    printf(\"%.1f\\n\",t);\r\n\r\n    int max1=0,max2=1,min1=0,min2=1;\r\n\r\n    printf(\"List of close pairs: \");\r\n    for(int i=0;i<n-1;i++){\r\n        for(int j=i+1;j<n;j++){\r\n            float dist=distance(a[i][0],a[i][1],a[j][0],a[j][1]);\r\n            if(dist<t*t){\r\n                printf(\"((%.2f,%.2f),(%.2f,%.2f)) \",a[i][0],a[i][1],a[j][0],a[j][1]);\r\n            }\r\n            float distmax=distance(a[max1][0],a[max1][1],a[max2][0],a[max2][1]);\r\n            float distmin=distance(a[min1][0],a[min1][1],a[min2][0],a[min2][1]);\r\n\r\n            if(dist>distmax){\r\n                max1=i;\r\n                max2=j;\r\n            }\r\n            if(dist<distmin){\r\n                min1=i;\r\n                min2=j;\r\n            }\r\n        }\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    printf(\"Closest pair: ((%.2f,%.2f),(%.2f,%.2f)) \\n\",a[min1][0],a[min1][1],a[min2][0],a[min2][1]);\r\n    printf(\"Furthest pair: ((%.2f,%.2f),(%.2f,%.2f)) \\n\",a[max1][0],a[max1][1],a[max2][0],a[max2][1]);\r\n\r\n    printf(\"\\n\\n\");\r\n\r\n    return 0;\r\n}"    
                },
                {
                    "Question": "Read an integer n (< 100). Input an integer array A[] of n elements from the user. \r\nThe array can have multiple occurrences of elements. You have to remove the \r\nmultiple occurrences of elements and store the distinct elements in a new array. \r\nThe memory for the new array has to be dynamically allocated using malloc such \r\nthat its size is same as the number of distinct elements in A[].",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint countdistinct(int[], int);      \/\/function to count number of distinct elements in input array\r\nvoid copy_distinct(int*,int*,int);  \/\/function to copy distinct elements of an array into another\r\n\r\nint main()\r\n{\r\n    int n, array_input[100],count_distinct;\r\n    \/\/n is an integer variable that stores the number of integers the user wants to enter\r\n    \/\/array_input stores the input values\r\n    \/\/count_distinct stores the number of distinct values in input array\r\n\r\n    \/\/reading n\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/reading values of array\r\n    printf(\"Enter %d values:\\n\",n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\"%d\",&array_input[i]);\r\n    }\r\n\r\n    \/\/counting the number of distinct elements\r\n    count_distinct=countdistinct(array_input,n);\r\n\r\n    \/\/dynamic allocation of memory\r\n    int *point_new_array;\r\n    point_new_array=(int*)malloc(count_distinct*sizeof(int));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if  (point_new_array == NULL)\r\n    {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n\t}\r\n\r\n\t\/\/copying the distinct elements from input array into new array\r\n    copy_distinct(array_input,point_new_array,n);\r\n\r\n    \/\/printing the new array\r\n    printf(\"\\nNew array is: \\n\");\r\n    for(int i=0;i<count_distinct;i++)\r\n    {\r\n        printf(\"%d \",point_new_array[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    \/\/freeing the allocated memory\r\n    free(point_new_array);\r\n    return 0;\r\n\r\n\r\n}\r\n\r\n\/*\r\n*Function: countdistinct\r\n*returns the number of distinct elements in input array\r\n*\r\n* a[]: the input array\r\n* n: the number of elements in input array\r\n*\r\n*returns: number of distinct elements in input array\r\n*\/\r\nint countdistinct(int a[], int n)\r\n{\r\n    if(n==0) return 0;\r\n    int i,j,count=1;\r\n\r\n    for (i=1;i<n;i++)\r\n    {\r\n      for (j=0; j<i;j++)\r\n      {\r\n         if (a[i]==a[j])\r\n         {\r\n            break;             \/\/if same element is found then break\r\n         }\r\n      }\r\n      if (i==j)\r\n      {\r\n         count++;     \/\/increment the number of distinct elements\r\n      }\r\n    }\r\n   return count;      \/\/returns the number of distinct elements\r\n}\r\n\r\n\/*\r\n*Function: copy_distinct\r\n*copies the distinct elements of first array into second array\r\n*\r\n* p: pointer to first elements of first array\r\n* q: pointer to first element of second array\r\n*\r\n*return type: void\r\n*\/\r\nvoid copy_distinct(int *p,int *q,int n)\r\n{\r\n    int k=0;\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        int flag=0;\r\n        for(int j=0;j<k;j++)\r\n        {\r\n            \/\/checking if that element if stored in q before\r\n            if(p[i]==q[j])\r\n            {\r\n                flag=1;\r\n                break;\r\n            }\r\n        }\r\n        if(flag==0)\r\n        {\r\n            \/\/copying value in new array location if it is not previously copied\r\n            q[k]=p[i];\r\n            k++;\r\n        }\r\n    }\r\n\r\n    return;\r\n}"
                }
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question": "What is printed by the following program when the input is the first two letters of your first name \r\n(given name) in capital letters? For example, if your first name is Jayant, then the input is JA. Explain the execution.\r\n\r\n#include<stdio.h>\r\nint main()\r\n{\r\n    char a, b;\r\n    a = getchar(); b = getchar();\r\n    printf(\"a = %c, b = %d\\n\", a, b); \r\n    printf(\"%c\\n\", 'a' + a - 'A');\r\n    printf(\"%c\\n\", 'b' + b - 'B');\r\n    printf(\"%d\\n\", a - 'A');\r\n}\r\n",
                    "Answer": "let input = \"DE\". So a = 'D' and b = 'E'. 'a'+a-'A' yields small letter 'd' (as distance between 'D' and 'A' is added to 'a'.\r\nSimilarly 'b'+b-'B' yields 'e'. Also 'D'-'A' in ASCII terms is 3.\r\n\r\nOutput: \r\na=D, b=E\r\nd\r\ne\r\n3"
                },
                {
                    "Question":"Consider the following program fragment, where i, j, count are int type variables, \nand a, b and c are 50 element character arrays. What will be printed if we enter the strings \n\u201CProgramming\u201D, \u201CProblems\u201D and \u201CData\u201D from the keyboard (in that order)?\r\n    scanf(\"%s%s%s\", a, b, c);\r\n    i = 0; count = 0;\r\n    while (a[i] != '\\0') {\r\n        j = 0;\r\n        while (b[j] != '\\0') {\r\n            if (a[i] != b[j]) {\r\n                j++;\r\n                continue;\r\n            }\r\n            else {\r\n                count++;\r\n                break;\r\n            }\r\n        }\r\n    i++;\r\n}\r\nprintf (\"%d\", count);\r\n",
                    "Answer":"6"
                },
                {
                    "Question":"A group of students receive grades for a subject and you are interested in seeing the grade distribution. \nWrite a program that takes as input the number of students n and then reads n grades \n(integers in the set {1, 2, 3, 4, 5}) into an array A[0,...,n-1]. \nThe output should be a bar graph with bars represented by sequence of \u2019#\u2019 characters. \nYou are allowed to use constant amount of additional storage. Assume 1 \u2264 n \u2264 60. \r\nSample Input\/Output\r\nEnter n (<=60) : 10\r\nEnter 10 grades: 2 3 4 5 2 2 1 3 3 3\r\n   #\r\n ##\r\n ##\r\n#####\r\n",
                    "Answer":"#include <stdio.h>\r\nint main(){\r\nint n, i, j, max = -1;\r\nint A[60], B[6] = {0,0,0,0,0,0};\r\nprintf(\"Enter n (<=60): \");\r\nscanf(\"%d\", &n);\r\nif (n >60 || n <1){\r\nprintf(\"n should be positive and at most 60.\\n\\n\");\r\nreturn 1;\r\n}\r\nprintf(\"Enter %d grades: \", n);\r\nfor(i=0; i<n; i++){\r\nscanf(\"%d\", &A[i]);\r\nif (A[i] < 1 || A[i] > 5){\r\nprintf(\"Array elements must be positive and at most 5.\\n\\n\");\r\nreturn 2;\r\n}\r\nB[A[i]]++;\r\n}\r\nmax = B[1];\r\nfor(i=2; i<=5; i++)\r\nif(B[i] > max)\r\nmax = B[i];\r\nfor(j=max; j>=1; j--){\r\nfor(i=1; i<=5; i++){\r\nif(B[i] >= j)\r\nprintf(\"#\");\r\nelse\r\nprintf(\" \");\r\n}\r\nprintf(\"\\n\");\r\n}\r\nreturn 0;\r\n}\r\n"
                },
                {
                    "Question": "Write a C program to read in a character string S (which does not have any blanks in between) \nand remove all vowels and print the string P obtained after removal of all vowels in S. \nAssume that the strings S and P will have at most 30 characters. \nYou should handle both lowercase and uppercase vowels for removal. \nFor example, if the input string is \"compUTers\", the output should be \"cmpTrs\". \nDo not use any library functions other than standard input and output. You can use arrays. \nThere should be only one main function and no other functions defined by you.",
                    "Answer": "#include<stdio.h>\r\nint main(){\r\n    char s[30],p[30];\r\n    int count=0;\r\n    printf(\"Enter string s:\");\r\n    for(int i=0;i<30;i++){\r\n        char temp;\r\n        scanf(\"%c\",&temp);\r\n        if(temp=='\\n'){\r\n            break;\r\n        }else{\r\n            s[i] = temp;\r\n            if(temp=='a'||temp=='e'||temp=='i'||temp=='o'||temp==='u'||temp=='A'||temp=='E'||temp=='I'||temp=='O'||temp=='U'||){\r\n                continue;\r\n            }else{\r\n                p[count]=temp;\r\n                count++;\r\n            }\r\n        }\r\n    }\r\n    printf(\"Required string is:%s\",P);\r\n        return 0;\r\n}"
                },
                {
                    "Question": "In this Question we will calculate the tax of an employee as per the income tax rules. Depending on the income, the amount\r\n                of tax varies according to different income groups (or the tax slabs). The income tax department has provided a set of rules\r\n                to calculate the tax of a person on taxable income according to the tax slab rules as shown in the table below. However,\r\n                certain types of investments are considered as tax-free for minimum yearly income of Rs. 10, 00, 000, and the yearly taxable\r\n                income will be computed after deducting those investments from the total income (upto certain limit). These investments\r\n                are listed as follows:\r\n                \u2022 House loan (upto Rs. 2, 50, 000)\r\n                \u2022 Life insurance premium (upto Rs. 1, 50, 000)\r\n                \u2022 Medical insurance (upto Rs. 50, 000)\r\n                Yearly income tax slab Tax Rates\r\n                Rs. 0 \u2212 2, 50, 000 Nil\r\n                Rs. 2, 50, 001 \u2212 5, 00, 000 5%\r\n                Rs. 5, 00, 001 \u2212 7, 50, 000 Rs. 12500 + 10% of total income exceeding Rs. 5, 00, 000\r\n                Rs. 7, 50, 001 \u2212 10, 00, 000 Rs. 37500 + 15% of total income exceeding Rs. 7, 50, 000\r\n                Rs. 10, 00, 001 \u2212 12, 50, 000 Rs. 75000 + 20% of total income exceeding Rs. 10, 00, 000\r\n                Rs. 12, 50, 001 \u2212 15, 00, 000 Rs. 125000 + 25% of total income exceeding Rs. 12, 50, 000\r\n                Above Rs. 15, 00, 000 Rs. 187500 + 30% of total income exceeding Rs. 15, 00, 000\r\n                Your task is to write a program that takes input from the user the monthly salary of a person, yearly house loan paid\r\n                (if there is any), yearly life insurance premium paid (if there is any), yearly medical insurance paid (if there is any), and\r\n                calculate the income tax based on the above rules.\r\n                Example:\r\n                Input: Monthly salary = 85000, house loan = 0, life insurance premium = 130000, medical insurance = 40000\r\n                Output: Total tax: 165000\r\n                Example:\r\n                Input: Monthly salary = 130000, house loan = 275000, life insurance premium = 95000, medical insurance = 0\r\n                Output: Total tax: 318000",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int ms,hl,li,mi,fyi,it;\r\n    printf(\"Monthly salary = \\n\");\r\n    scanf(\"%d\", &ms);\r\n     printf(\"house loan = \\n\");\r\n    scanf(\"%d\" ,&hl);\r\n     printf(\"life insurance premium =\\n\");\r\n    scanf(\"%d\" ,&li);\r\n    printf(\"medical insurance = \\n\");\r\n    scanf(\"%d\" ,&mi);\r\n    fyi=(ms*12 - (hl+li+mi));\r\n    if(fyi>=0 && fyi<=250000)\r\n    it=0;\r\n    else if(fyi>=250001&& fyi<=500000)\r\n    it =0.05*fyi;\r\n    else if(fyi>=500001 && fyi<=750000)\r\n    it =12500+0.1*(fyi);\r\n    else if(fyi>=750001 && fyi<=1000000)\r\n    it =37500+0.15*(fyi);\r\n    else if(fyi>= 1000001 && fyi<= 1250000)\r\n    it =75000+0.2*(fyi);\r\n    else if(fyi>=1250001 && fyi<= 1500000)\r\n    it =125000+0.25*(fyi);\r\n    else if(fyi>1500000)\r\n    it =187500+0.3*(fyi);\r\n    printf(\"Total tax: %d\",it);\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "In this Question, we will approximate the square root of a real-valued function f(x) = 0 by a numerical approximation\r\n                technique. The idea is that, a continuous and differentiable function can be approximated by a straight line tangent to it.\r\n                Consider that we want to find the root of a continuous, differentiable function f(x), and we know that the root is near the\r\n                point x = x0. Then the approximation of the root is computed as,\r\n                x1 = x0 \u2212\r\n                f(x0)\r\n                f\r\n                0(x0)\r\n                ,\r\n                where f\r\n                0\r\n                is the derivative of f, and x0 is the first approximate value. This process is repeated as many times as necessary to\r\n                get the desired accuracy. In the general case, if xn is the current estimated value, the next approximation xn+1 is given by,\r\n                xn+1 = xn \u2212\r\n                f(xn)\r\n                f\r\n                0(xn)\r\n                .\r\n                Your task is to consider a function f(x) = x\r\n                3 \u2212 25, repeat the approximation process until the criteria |xn+1 \u2212 xn| < e\r\n                is met (where e is the tolerance limit), or a maximum number of iterations are reached. Print the iteration number, x0, x1,\r\n                error, and the final computed square root value.\r\n                Example:\r\n                Input: x0 = 5.0, e = 0.00005, maxIteration = 20\r\n                Output:\r\n                Iteration x0 x1 Error\r\n                1 5.000000 3.666667 1.333333\r\n                2 3.666667 3.064279 0.602387\r\n                3 3.064279 2.930340 0.133939\r\n                4 2.930340 2.924031 0.006309\r\n                5 2.924031 2.924018 0.000014\r\n                The square root is 2.924018",
                    "Answer": "#include<stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main() {\r\n    float e,et,n,x0, xn;\r\n    printf(\"x0 = \");\r\n    scanf(\"%f\",&x0);\r\n    printf(\"e = \");\r\n    scanf(\"%f\",&et);\r\n    printf(\"maxIteration = \");\r\n    scanf(\"%f\",&n);\r\n    int i =0;\r\n    e = et + 1;\r\n\r\n    printf(\"Iteration    x0         x1        error\\n\");\r\n\r\n    while(e>et){\r\n        xn = x0 - (x0*x0*x0 - 25)\/(3*x0*x0);\r\n        e = ( x0 - xn);\r\n        printf(\"   %d     %f   %f   %f\\n\",i+1,x0,xn,e);\r\n\r\n        x0 = xn;\r\n        i++;\r\n        if (i==n){\r\n            break;\r\n        }\r\n\r\n    }\r\n    printf(\"The square root is %f\",xn);\r\n}\r\n\r\n"
                },
                {
                    "Question":"Consider a repeated number game between 2 players A and B. In each round, a player will randomly generate a positive\r\n                integer within certain range. The rule of the game is as follows.\r\n                \u2022 The player who generates an integer having more number of digits wins that round of the game. His points will be\r\n                equal to the number of digits in the number he generated. If the two player generates numbers having the same number\r\n                of digits, then the number having more sum of digits generated by the player wins, and his point will be equal to the\r\n                sum of the digits. So if the 2 generated numbers by A and B are 12 and 124 respectively, then B wins and his point is\r\n                3 (A\u2019s point is 2). If the generated numbers are 567 and 612, then A wins and his point is 18 (B\u2019s point is 9).\r\n                \u2022 In each round, the winner player gets a badge of 1, and the defeated player gets a badge of 0. After all rounds are\r\n                completed, the final score will be computed as the sum of total points in each round, multiplied by the number of times\r\n                the player gets badge 1. The player having the maximum final score, wins the game.\r\n                Your task will be to simulate the game for n number of rounds, show the results of intermediate rounds, and compute\r\n                the final score to declare the winner.\r\n                For your convenience, the random number generator code is provided. Include the following headers in your code:\r\n                #include<time.h>, #include<stdlib.h>\r\n                Add this at the beginning of main( ) function: srand(time(0));\r\n                Then the following line of code generates a random number between 5 to 1000, and stores in num:\r\n                int num = (rand() % (1000 - 5 + 1)) + 5;\r\n                Example:\r\n                Input: Number of rounds: 3\r\n                Output:\r\n                Round-1 --> A\u2019s number: 6 B\u2019s number: 64\r\n                A\u2019s point: 1 B\u2019s point: 2\r\n                A\u2019s badge: 0 B\u2019s badge: 1\r\n                -- B wins Round 1 --\r\n                Round-2 --> A\u2019s number: 127 B\u2019s number: 266\r\n                A\u2019s point: 10 B\u2019s point: 14\r\n                A\u2019s badge: 0 B\u2019s badge: 1\r\n                -- B wins Round 2 --\r\n                Round-3 --> A\u2019s number: 792 B\u2019s number: 115\r\n                A\u2019s point: 18 B\u2019s point: 7\r\n                A\u2019s badge: 1 B\u2019s badge: 0\r\n                -- A wins Round 3 --\r\n                Final result => A\u2019s total score: 29, B\u2019s total score: 46\r\n                --- B wins the game ---",
                    "Answer":"#include <stdio.h>\r\n#include<time.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    srand(time(0));\r\n    int n;\r\n    printf(\"Number of rounds:\");\r\n    scanf(\"%d\",&n);\r\n    int x,xl;\r\n    int y,yl;\r\n        int xp=0;\r\n        int yp=0;\r\n        int xw=0;\r\n        int yw=0;\r\n    for(int i=0;i<n;i++){\r\n        printf(\"Round-%d\\n\",i+1);\r\n        int xs=0;\r\n        int ys=0;\r\n        x = (rand() % (1000 - 5 + 1)) + 5;\r\n        y = (rand() % (1000 - 5 + 1)) + 5;\r\n        printf(\"A s number: %d B s number: %d\\n\",x,y);\r\n        for(xl=0;x!=0;xl++){\r\n            xs=x%10;\r\n            x=x\/10;\r\n        }\r\n        for(yl=0;y!=0;yl++){\r\n            ys=y%10;\r\n            y=y\/10;\r\n        }\r\n        if(xl>yl){\r\n            xw++;\r\n            printf(\"A s badge: 1 B s badge: 0\");\r\n            xp+=xl;\r\n            yp+=yl;\r\n            printf(\"A s point: %d B s point: %d\\n\",xl,yl);\r\n            printf(\"--A wins round %d--\\n\",i+1);\r\n        }else if(yl>xl){\r\n            yw++;\r\n            printf(\"A s badge: 0 B s badge: 1\");\r\n            xp+=xl;\r\n            yp+=yl;\r\n            printf(\"A s point: %d B s point: %d\\n\",xl,yl);\r\n            printf(\"--B wins round %d--\\n\",i+1);\r\n        }else if(xl==yl){\r\n            printf(\"A s point: %d B s point: %d\\n\",xs,ys);\r\n            if(xs>ys){\r\n\r\n                xw++;\r\n                printf(\"A s badge: 1 B s badge: 0\\n\");\r\n                xp+=xs;\r\n                yp+=ys;\r\n                printf(\"--A wins round %d--\\n\",i+1);\r\n\r\n            }else{\r\n                yw++;\r\n                printf(\"A s badge: 0 B s badge: 1\\n\");\r\n                xp+=xs;\r\n                yp+=ys;\r\n                printf(\"--B wins round %d--\\n\",i+1);\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    printf(\"Final result => A's total score: %d, B's total score: %d\\n\",xp*xw,yp*yw);\r\n    if(xp*xw>yp*yw){\r\n            printf(\"-- A wins the game --\");\r\n    }else if(xp*xw<yp*yw){\r\n            printf(\"-- B wins the game --\");\r\n    }else if(xp*xw==yp*yw){\r\n            printf(\"-- The game is tied --\");\r\n    }\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "In this Question, we will find the straight line equation that best fits a given set of points. Consider a given set of ordered\r\n                pairs of points (x1, y1),(x2, y2), \u00B7 \u00B7 \u00B7 ,(xn, yn). Our goal is to approximate the parameters m and b in the straight line equation\r\n                y = mx + b. This can be achieved by the following steps:\r\n                Step-1 : Calculate the mean of the x -values and the mean of the y-values as follows:\r\n                x\u00AF =\r\n                Pn\r\n                i=1 xi\r\n                n\r\n                , y\u00AF =\r\n                Pn\r\n                i=1 yi\r\n                n\r\n                Step-2 : The slope is computed as,\r\n                m =\r\n                Pn\r\n                i=1(xi \u2212 x\u00AF)(yi \u2212 y\u00AF)\r\n                Pn\r\n                i=1(xi \u2212 x\u00AF)\r\n                2\r\n                Step-3 : Compute the y-intercept of the line as,\r\n                b = \u00AFy \u2212 mx\u00AF\r\n                Step-4 : Use the slope m and the y-intercept b to form the equation of the line.\r\n                Your task is to take the x and y coordinates of the points as input from the user, store them in two different arrays\r\n                (you may assume that the number of data points are fixed, so you can declare the array sizes accordingly), and compute the\r\n                straight line equation based on the above formulas.\r\n                Example:\r\n                Input:\r\n                x -coordinates: 8, 2, 11, 6, 5, 4, 12, 9, 6, 1\r\n                y-coordinates: 3, 10, 3, 6, 8, 12, 1, 4, 9, 14\r\n                Output: m = \u22121.1, b = 14.0, line equation y = \u22121.1x + 14.0",
                    "Answer":"#include<stdio.h>\r\nint main() {\r\n    int x[10],y[10];\r\n    float mx=0,my=0;\r\n    printf(\"x-coordinates:\");\r\n    for (int i=0; i<10;i++){\r\n        scanf(\"%d\",&x[i]);\r\n    }\r\n    for (int i=0; i<10;i++){\r\n        mx+= x[i];\r\n    }\r\n    mx= mx\/10;\r\n    printf(\"y-coordinates:\");\r\n    for (int i=0; i<10;i++){\r\n        scanf(\"%d\",&y[i]);\r\n    }\r\n    for (int i=0; i<10;i++){\r\n        my+= y[i];\r\n    }\r\n    my= my\/10;\r\n\r\n    float a,b=0;\r\n    for (int i=0; i<10;i++){\r\n        a+= (x[i]-mx)(y[i]-my);\r\n        b+=  (x[i]-mx)(x[i]-mx);\r\n    }\r\n    float m = a\/b;\r\n    float i = my - m*mx;\r\n    printf(\"m = %0.1f,b = %0.1f, line equation y = %0.1fx + %0.1f\",m,i, m,i);\r\n\r\n}\r\n"
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question": "Write a C program to perform the following:\r\n\r\nGiven an alphanumeric string, consisting of only alphabets and digits, find the frequency of each digit in the given string\r\n\r\nInput Format: \r\nThe first line contains a string. All the elements of input are made of English alphabets and digits (consider as single digit)\r\n\r\nOutput Format:\r\nPrint ten space-separated integers in a single line denoting the frequency of each digit from 0 to 9.\r\n\r\nSample Input:\r\na11472o5t6\r\n\r\nSample Output:\r\n0 2 1 0 1 1 1 1 0 0\r\n\r\nExplanation: In the given string 1 occurs two times, 2, 4, 5, 6, and 7 occur one time each, the remaining digits 0, 3, 8, and 9 don't occur at all",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    char str[50];\r\n    int i;\r\n    int arr[10];\r\n    for(i=0;i<10;i++)\r\n    {\r\n        arr[i]=0;\r\n    }\r\n    printf(\"Enter an alphanumeric string : \");\r\n    scanf(\"%s\",&str);\r\n    int ind;\r\n    for(i=0;str[i]!='\\0';i++)\r\n    {\r\n       if(str[i]>='0' && str[i]<='9')\r\n       {\r\n           ind=(int)(str[i]-'0');\r\n           \r\n           arr[ind]=(arr[ind])+1;\r\n       }\r\n    }\r\n    printf(\"The frequency of 0 to 9 are : \\n\");\r\n    for(i=0;i<10;i++)\r\n    {\r\n        printf(\"%d \",arr[i]);\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "This problem involves rectangles. Whenever we say rectangles, we mean only axis parallel rectangles.\r\nThe rectangles, in this problem, are represented as the coordinates (of int data type) of the bottom left\r\ncorner, followed by the length of its side parallel to X-axis, followed by the length of its side parallel\r\nto Y-axis. For example, a rectangle whose corner points are (2, 3), (7, 3), (7, 5), (2, 5) is represented as\r\n2 3 5 2. Note that the length of one or two sides of a rectangle are allowed to be zero.\r\n\r\nPart-I\r\nWrite a program which takes 10 rectangles as input and checks if there exist any two rectangles such\r\nthat one contains the other completely inside (not even part of side or corner overlap). For example, the\r\nrectangle 2 3 5 3 contains the rectangle 3 4 3 1 completely inside but does not contain the rectangle\r\n5 3 1 1 completely inside. If there exist more than one pair of rectangles such that one contains the\r\nother, then print all such pairs. If no such pair exists, there is no need to print anything.\r\n\r\nPart-II\r\nWe define the \u201Ccenter\u201D of a rectangle to be the point of intersection of its two diagonals. We also define\r\nthe distance of a rectangle from a point to be the distance between the point and the center of the\r\nrectangle. Sort the rectangles by their distances from the origin.\r\n\r\nPart-III\r\nLet X be the set of rectangles among the 10 rectangles which are contained in some other rectangles.\r\nTake a point (a, b) (both a and b are of int data type) from the user and sort the set X of rectangles by\r\ntheir distances from (a, b).\r\nSubmit one (single) C\/C++ program.\r\n\r\nSample Output\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out\r\nWrite 10 rectangles\r\n-10000 -10000 20000 20000\r\n0 0 0 0\r\n12 1 23 31\r\n-12 -43 100 332\r\n-23 -98 980 346\r\n-12 45 90 21\r\n-1 -2 3 3\r\n0 2 1 3\r\n322 0 34 1\r\n1 2 5 3\r\n-10000 -10000 20000 20000 contains 0 0 0 0\r\n-10000 -10000 20000 20000 contains 12 1 23 31\r\n-10000 -10000 20000 20000 contains -12 -43 100 332\r\n-10000 -10000 20000 20000 contains -23 -98 980 346\r\n-10000 -10000 20000 20000 contains -12 45 90 21\r\n-10000 -10000 20000 20000 contains -1 -2 3 3\r\n-10000 -10000 20000 20000 contains 0 2 1 3\r\n-10000 -10000 20000 20000 contains 322 0 34 1\r\n-10000 -10000 20000 20000 contains 1 2 5 3\r\n-12 -43 100 332 contains 0 0 0 0\r\n-23 -98 980 346 contains 0 0 0 0\r\n-1 -2 3 3 contains 0 0 0 0\r\n-12 -43 100 332 contains 12 1 23 31\r\n-23 -98 980 346 contains 12 1 23 31\r\n-12 -43 100 332 contains -1 -2 3 3\r\n-12 -43 100 332 contains 0 2 1 3\r\n-12 -43 100 332 contains 1 2 5 3\r\n-23 -98 980 346 contains -12 45 90 21\r\n-23 -98 980 346 contains -1 -2 3 3\r\n-23 -98 980 346 contains 0 2 1 3\r\n-23 -98 980 346 contains 322 0 34 1\r\n-23 -98 980 346 contains 1 2 5 3\r\nRectangles sorted by distance from origin\r\n-10000 -10000 20000 20000\r\n0 0 0 0\r\n-1 -2 3 3\r\n0 2 1 3\r\n1 2 5 3\r\n12 1 23 31\r\n-12 45 90 21\r\n-12 -43 100 332\r\n322 0 34 1\r\n-23 -98 980 346\r\nWrite a and b: 10000 10000\r\nInner rectangles sorted by distance from (10000,10000)\r\n-23 -98 980 346\r\n322 0 34 1\r\n-12 -43 100 332\r\n-12 45 90 21\r\n12 1 23 31\r\n1 2 5 3\r\n0 2 1 3\r\n-1 -2 3 3\r\n0 0 0 0\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n#define size 1000\r\nint innercheck(int x, int y, int z, int w, int p, int q, int r, int s) \/\/ method to check if one rectangle lies inside another\r\n{\r\n    int xbleft1 = x; \/\/ contains bottom left corner  of first rectangle\r\n    int ybleft1 = y;\r\n    int xtright1 = x + z; \/\/ contains top right corner of second rectangle\r\n    int ytright1 = y + w;\r\n    int xbleft2 = p;\r\n    int ybleft2 = q; \/\/ returns 1 if contained else 0 is returned\r\n    int xtright2 = p + r;\r\n    int ytright2 = q + s;\r\n    if (xbleft2 > xbleft1 && ybleft2 > ybleft1 && xtright1 > xtright2 && ytright1 > ytright2)\r\n    {\r\n        printf(\"%d %d %d %d contains %d %d %d %d\\n\", x, y, z, w, p, q, r, s);\r\n        return 1;\r\n    }\r\n    else\r\n        return 0;\r\n\r\n} \/\/ the property of a rectangle is that the point of intersection of diagonals is the midppoint of the diagonals.So that logic is used in the code.\r\ndouble distorigin(int x, int y, int z, int w) \/\/ method to calculate distance from origin\r\n{\r\n    double midx = (double)(2 * x + z) \/ 2;\r\n    double midy = (double)(2 * y + w) \/ 2;\r\n    double dist = (sqrt(midx * midx + midy * midy));\r\n    return dist;\r\n}\r\ndouble distpoint(int x, int y, int z, int w, int k, int l) \/\/ method to calculate distance of the centres from the entered point\r\n{\r\n    double mid1 = ((double)(2 * x + z)) \/ 2;\r\n    double mid2 = ((double)(2 * y + w)) \/ 2;\r\n    double distance = (sqrt((mid1 - k)*(mid1 - k) + (mid2 - l)*(mid2 - l)));\r\n    return distance;\r\n}\r\nint main()\r\n{\r\n    int a[size];\r\n    int b[size];\r\n    int c[size];\r\n    int d[size];\r\n    int cont[size];\r\n\r\n    int count1 = 0;\r\n    int count2 = 0;\r\n    int count = 0;\r\n\r\n    printf(\"Write 10 rectangles:\\n\");\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n\r\n        scanf(\"%d\", &a[i]); \/\/ to take the four inputs for every rectangle and store them in respective array\r\n        scanf(\"%d\", &b[i]);\r\n        scanf(\"%d\", &c[i]);\r\n        scanf(\"%d\", &d[i]);\r\n    }\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        cont[i] = 0;\r\n    }\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        for (int j = i + 1; j < 10; j++) \/\/ loop to check which pairs of rectangles are contained\r\n        {\r\n            if (innercheck(a[i], b[i], c[i], d[i], a[j], b[j], c[j], d[j]) == 1)\r\n            {\r\n\r\n                cont[j] = 1;\r\n            }\r\n            if (innercheck(a[j], b[j], c[j], d[j], a[i], b[i], c[i], d[i]) == 1)\r\n            {\r\n                cont[i] = 1;\r\n            }\r\n        }\r\n    }\r\n\r\n    double origin[size];\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        origin[i] = distorigin(a[i], b[i], c[i], d[i]);\r\n    }\r\n\r\n    printf(\"Rectangles sorted by distance from origin is:\\n\");\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        for (int j = 0; j < 9 - i; j++)\r\n        {\r\n            if (origin[j] > origin[j + 1]) \/\/ bubble sort to swap the distances accordingly\r\n            {\r\n                double temp = origin[j];\r\n                origin[j] = origin[j + 1];\r\n                origin[j + 1] = temp;\r\n                int temp1 = a[j];\r\n                a[j] = a[j + 1];\r\n                a[j + 1] = temp1;\r\n                int temp2 = b[j];\r\n                b[j] = b[j + 1];\r\n                b[j + 1] = temp2;\r\n                int temp3 = c[j];\r\n                c[j] = c[j + 1];\r\n                c[j + 1] = temp3;\r\n                int temp4 = d[j];\r\n                d[j] = d[j + 1];\r\n                d[j + 1] = temp4;\r\n                int temp5 = cont[j];\r\n                cont[j] = cont[j + 1];\r\n                cont[j + 1] = temp5;\r\n            }\r\n        }\r\n    }\r\n\r\n    for (int i = 0; i < 10; i++) \/\/ printing the sorted arrays\r\n    {\r\n        printf(\"%d %d %d %d\\n\", a[i], b[i], c[i], d[i]);\r\n    }\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        if (cont[i] == 1)\r\n            count++;\r\n    }\r\n    int e[size]; \/\/ new arrays for storing contained elements\r\n    int f[size];\r\n    int g[size];\r\n    int h[size];\r\n    int p = 0;\r\n    for (int i = 0; i < 10; i++)\r\n    {\r\n        if (cont[i] == 1)\r\n        {\r\n            e[p] = a[i];\r\n            f[p] = b[i];\r\n            g[p] = c[i];\r\n            h[p] = d[i];\r\n            p++;\r\n        }\r\n    }\r\n    printf(\"Write a and b:\");\r\n    int n1, n2;\r\n    scanf(\"%d\", &n1);\r\n    scanf(\"%d\", &n2);\r\n    double distab[size];\r\n    for (int i = 0; i < count; i++)\r\n    {\r\n        distab[i] = distpoint(e[i], f[i], g[i], h[i], n1, n2);\r\n    }\r\n\r\n    for (int i = 0; i < count; i++) \/\/ to swap distances accordingly\r\n    {\r\n        for (int j = 0; j < count - i - 1; j++)\r\n        {\r\n            if (distab[j] > distab[j + 1])\r\n            {\r\n                double temp10 = distab[j];\r\n                distab[j] = distab[j + 1];\r\n                distab[j + 1] = temp10;\r\n                int temp6 = e[j];\r\n                e[j] = e[j + 1];\r\n                e[j + 1] = temp6;\r\n                int temp7 = f[j];\r\n                f[j] = f[j + 1];\r\n                f[j + 1] = temp7;\r\n                int temp8 = g[j];\r\n                g[j] = g[j + 1];\r\n                g[j + 1] = temp8;\r\n                int temp9 = h[j];\r\n                h[j] = h[j + 1];\r\n                h[j + 1] = temp9;\r\n            }\r\n        }\r\n    }\r\n    printf(\"Inner rectangles sorted by distance from (%d,%d):\\n\", n1, n2);\r\n    for (int i = 0; i < count; i++) \/\/ printing the sorted array\r\n    {\r\n        printf(\"%d %d %d %d\\n\", e[i], f[i], g[i], h[i]);\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C Program to read in a positive integer n and print it. \nThen find the smallest integer m > n such that mhas at least 4 factors \n(other than 1 and itself) and all its digits occur only once in m (that is, none of its\r\ndigits are duplicated in m). Print m, all the factors of m and all the digits between 0 to 9 that m does not\r\nhave. If it has all the digits, then print a line saying it has all digits.\r\nFor example, if n = 20, the answer is m = 24, since it has factors 2, 3, 4, 6 and 12 and the digits 2 and 4 in 24\r\noccur only once each. The digits that m does not have are 0, 1, 3, 5, 6, 7, 8, 9.   \r\nSave the file as T01_<Roll Number>.c (example T01_21AG10002.c). Build, Run and test it for the given data as \r\nwell as your own data. Then upload the .c file for the Test Problem.\r\n[25 Marks: 8 marks for intermediate submission, 17 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a positive integer n. Print n. Create a new line.\r\n2. Print (with a suitable message) the smallest integer m > n such that m has at least 4 factors other than 1\r\nand m, and all its digits occur only once in m. Create a new line.\r\n3. Print all the factors of m other than 1 and itself appropriately. \nCreate a new line.  \r\n4. Print all the digits that m does not have. \nIf it has all the digits then print, \u201CAll digits present\u201D in a new line.Arrays allowed. \nNo additional library functions except scanf and printf. \nNo user defined functions allowed.\r\nTest Data: \r\na) n = 20\r\nb) n = 99\r\nc) n =  100000",
                    "Answer": "#include<stdio.h>\r\nint main ()\r\n    { int n , m , t , temp ,  c = 0 , d , digits[10] = {0,0,0,0,0,0,0,0,0,0} , u = 1 , f = 0 ;\r\n      printf(\"Enter n\\n\") ;\r\n      scanf(\"%d\" , &n ) ;\r\n      printf(\"n = %d\\n\" , n ) ;\r\n      m = n ;\r\n      while ( u == 1 || f < 4 )\r\n        { u = 0 ;\r\n          f = 0 ;\r\n          t = ++ m ;\r\n          while ( t > 0 )\r\n            { d = t % 10 ;\r\n              temp = t \/ 10 ;\r\n              while ( temp > 0 )\r\n                { if ( temp % 10 == d )\r\n                    u = 1 ;\r\n                  temp\/= 10 ;\r\n                }\r\n              t \/= 10 ;\r\n            }\r\n          for ( int i = 2 ; i < m ; i++ )\r\n            { if ( m % i == 0 )\r\n                f++ ;\r\n            }\r\n        }\r\n      printf( \"m = %d\\n\" , m ) ;\r\n      printf( \"All the factors of m other than 1 and m : \" ) ;\r\n      for ( int i = 2 ; i < m ; i++ )\r\n            { if ( m % i == 0 )\r\n                { if ( f == 1 )\r\n                    printf( \"%d\\n\" , i ) ;\r\n                  else\r\n                    printf( \"%d, \" , i ) ;\r\n                  f-- ;\r\n                }\r\n            }\r\n      f = 10 ;\r\n      while ( m > 0 )\r\n        { d  = m % 10 ;\r\n          for ( int i = 0 ; i <= 9 ; i++ )\r\n            { if ( d == i )\r\n                {digits[i]++ ;\r\n                 f-- ;\r\n                }\r\n            }\r\n          m \/= 10 ;\r\n        }\r\n      for ( int i = 0 ; i <= 9 ; i++ )\r\n        { if ( digits[i] == 0 )\r\n            c = 1 ;\r\n        }\r\n      if ( c == 1 )\r\n        { printf( \"The digits that m does not have are \") ;\r\n          for ( int i = 0 ; i <= 9 ; i++ )\r\n           { if ( digits[i] == 0 )\r\n                { if ( f == 1 )\r\n                    printf( \"%d\\n\" , i ) ;\r\n                  else\r\n                    printf( \"%d, \" , i ) ;\r\n                  f-- ;\r\n                }\r\n           }\r\n        }\r\n      else\r\n        printf(\"m has all digits\") ;\r\n      return 0 ;\r\n    }"
                },
                {
                    "Question": "Write a C Program to read in two strings A and B and print them. Next find out the frequency of the characters\r\noccurring in A and B, respectively. Then find out if every character present in B is present strictly more\r\nnumber of times in A than in B. Treat upper case and lower case as same \/ non-distinct.  You may assume\r\nthat neither A nor B have any blank characters within them and so can be read in %s format.\r\nFor example, if A = IITKharagpur and B = air, then the answer is Yes. On the other hand, if A = IITKharagpur\r\nand B = IITKgp, then the answer is No. \r\nSave the file as T02_<Roll Number>.c (example T02_21AG10002.c). Build, Run and test it for the given data as \r\nwell as your own data. Then upload the .c file for the Test Problem.\r\n[25 Marks: 8 marks for intermediate submission, 17 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read two character strings A and B. Print them appropriately, one in each line. Create a new line.\r\n2. Print each distinct character in A along with its frequency, appropriately. Create a new line.\r\n3. Print each distinct character in B along with its frequency, appropriately. Create a new line.  \r\nIf every character present in B is present in A strictly more number of times than in B, print \u201CYes\u201D, with a\r\nsuitable message. Otherwise print \u201CNo\u201D with a suitable message. Create a new line. \r\nArrays allowed. No additional string library function other than scanf, printf. No user defined functions.  \r\n4.\r\nTest Data: \r\na) A = IITKharagpur, B = air\r\nb) A = IITKharagpur, B = IITkgp\r\nc) A = 3$%2$alphalpha$, B = $alpha$",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    int n, m, p, facts, check, factors[10000], b[10];\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\",&n);\r\n    \/*b contains digits of m*\/\r\n    m = n+1;\r\n    facts = 0; check = 1;\r\n    while (facts < 4 || check == 0)\r\n    {\r\n\r\n        facts = 0;\r\n        check = 1;\r\n        p = m;\r\n        for (int i=0; i<10; i++) b[i] = -1;\r\n        while (p>0)\r\n        {\r\n            for (int i=0; i<10; i++)\r\n            {\r\n                if (b[i] == p%10)\r\n                {\r\n                    check = 0;\r\n                    break;\r\n                }\r\n                else if (b[i] == -1)\r\n                {\r\n                    b[i] = p%10;\r\n                    break;\r\n                }\r\n\r\n\r\n            }\r\n\r\n\r\n            if (check == 0) break;\r\n            p \/= 10;\r\n        }\r\n\r\n        for (int i=2; i<=m\/2 ;i++)\r\n        {\r\n            if (m%i==0)\r\n            {\r\n                factors[facts] = i;\r\n                facts += 1;\r\n            }\r\n        }\r\n\r\n        if (facts>=4 && check!=0) break;\r\n        m++;\r\n\r\n    }\r\n    \/*Printing number m*\/\r\n    printf(\"\\nSmallest number satisfying conditions: %d\\n\",m);\r\n    \/*Printing factors of *\/\r\n    printf(\"Prime factors: \");\r\n    for (int i=0; i<facts; i++) printf(\"%d \",factors[i]);\r\n    printf(\"\\n\");\r\n    \/*Printing digits of m*\/\r\n    printf(\"Digits not present: \");\r\n    p = 0;\r\n    for (int i=0; i<10; i++)\r\n    {\r\n        check = 0;\r\n        for (int j=0; j<10; j++)\r\n        {\r\n            if (b[j] == i)\r\n            {\r\n                check=1;\r\n                break;\r\n            }\r\n        }\r\n        if (check==0)\r\n        {\r\n            printf(\"%d \", i);\r\n            p=1;\r\n        }\r\n    }\r\n    if (p==0) printf(\"All digits present\\n\");\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program that stores n integer values in a 1D array from the user and search for a\r\nkey value in the array. If the key value is present in the array, shift the elements present on the\r\nright of the key by one position towards the left and finally store the key value at the end of the\r\narray. Otherwise, display \u201CThe key element not found!\u201D. The key should also be taken as input.\r\nExample 1:\r\nInput:\r\nEnter the value of n: 5\r\nEnter the values in the array:\r\n1\r\n6\r\n2\r\n7\r\n3\r\nEnter the key value: 6\r\nOutput:\r\n1 2 7 3 6",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n    int n,i,key,b=0,a; \/\/declaring variables\r\n\r\n    printf(\"enter the value of n: \"); \/\/asking for the value of n\r\n    scanf(\"%d\",&n);\r\n\r\n    int arr[n]; \/\/defining an array of length n\r\n\r\n    printf(\"enter the values in the array:\\n\"); \/\/ asking for the values of the elements the array one by one\r\n    for(i=0;i<n;i++)\r\n        scanf(\"%d\",&arr[i]);\r\n\r\n    printf(\"enter the key value: \"); \/\/ asking for the value of key\r\n    scanf(\"%d\",&key);\r\n\r\n    for (i=0;i<=n;i++) \/\/ finding the position at which the key is present and assigning it to a\r\n        if (key==arr[i])\r\n        {\r\n            b=1; \/\/ if the key exists in the array assigning 1 to b\r\n            a=i;\r\n            break;\r\n        }\r\n\r\n    if(b==1) \/\/ if the key exists in array we change the array as directed\r\n    {\r\n        printf(\"the position of key in the array is: %d\\n\\n \",a+1); \/\/printing the position of key\r\n\r\n        for(i=a;i<n-1;i++)  \/\/ shifting the elements present on right of the key one position towards left\r\n            arr[i]=arr[i+1];\r\n\r\n        arr[n-1]=key;  \/\/storing the value of key at the end of array\r\n\r\n        printf(\"the new array is:\"); \/\/ printing the manipulated array\r\n        for(i=0;i<n;i++)\r\n            printf(\" %d\",arr[i]);\r\n    }\r\n    else\r\n    printf(\"the key element not found!!\"); \/\/ if the key does not exist in array ,printing \"the key element not found\"\r\n\r\n    return(0);\r\n}"
                }
            ]
        }
    ],
    "functionsAndRecursions": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question" : "Write the following functions:\r\n\r\n    1. isprime () takes an integer number as input, returns 1 if the number is prime, and 0 otherwise.\r\n    2. sumoftwoprimes () takes an integer number x as input. It returns 1 if the number can be written\r\nas the sum of two prime numbers, and 0 otherwise.\r\n    3. arraysum2p () takes as input two numbers a and b, an array X and its maximum size. It creates\r\nan array containing elements between a and b that can be written as the sum of two prime\r\nnumbers. Return the number of elements of the array.\r\n    4. Write a main() which does the following:\r\n            1. Declare array X containing 100 elements.\r\n            1. Read a, b from the user\r\n            2. Call arraysum2p() to create an array containing numbers between a and b that are the sums of two prime numbers\r\n            3. Print the array",
                    "Answer" : "#include <stdio.h>\r\n#include <string.h>\r\nint main()\r\n{\r\n    char S[100],Q[100];\r\n    printf(\"Enter string S\\n\");\r\n    scanf(\"%[^\\n]s\",S);\r\n    int l1;\/\/stores the length of S\r\n    for(l1=0;S[l1]!='\\0';l1++);\r\n    while(1>0)\r\n    {\r\n        printf(\"Enter string Q\\n\");\r\n    scanf(\"%s\",Q);\r\n    int l2;\r\n    for(l2=0;Q[l2]!='\\0';l2++);\r\n    int cnt=0;\r\n    for(int i=0;i<l2;i++)\r\n    {\r\n        int k=Q[i];\r\n        if(k<97 || k>122)\r\n            cnt=1;\r\n    }\r\n    if(cnt==1)\r\n     {printf(\"Enter string again\\n\");\r\n     continue;}\r\n     if(l2==3)\r\n     {\r\n         if(Q[0]=='e' && Q[1]=='n' && Q[2]=='d')\r\n         {\r\n             printf(\"Program complete\\n\");\r\n             break;\r\n         }\r\n     }\r\n     int cnt2=0;\r\n     for(int i=0;i<l2;i++)\r\n     {\r\n         int cnt3=0;\r\n         int cnt4=0;\r\n         for(int j=0;j<l2;j++)\r\n         {\r\n             if(Q[j]==Q[i])\r\n                cnt3++;\r\n         }\r\n         for(int m=0;m<l1;m++)\r\n         {\r\n             if(S[m]==Q[i])\r\n                cnt4++;\r\n         }\r\n         if(cnt3<=cnt4)\r\n         {\r\n             cnt2++;\r\n         }\r\n     }\r\n     if(cnt2==l2)\r\n     {\r\n         printf(\"Q can be formed from S\\n\");\r\n     }\r\n     else\r\n        printf(\"Q can not be formed from S\\n\");\r\n    }\r\n\r\n}\r\n"
                },
                {
                    "Question" : "Submit one (single) C program. \r\n\r\n    Definitions \r\n        1. A positive integer is called a PDS number if the number is equal to the sum of the factorial of its digits. \n       For example, 1 (1 = 1!), 2 (2 = 2!), 145 (145= 1! + 4! + 5!) are PDS numbers. \r\n        2. A positive integer is called a LAB number if the number is equal to the sum of its divisor except itself. \n      For example, 6 (6 = 1 + 2 + 3), 28 = (1 + 2 + 4 + 7 + 14) are LAB numbers. \r\n        3. An n-bow pattern is a pattern of height 2n-1, where the first row has n stars, second row has n-1 stars, etc., \n     n-1th row has 2 stars, nth row has 1 star, n+1th row has 2 stars, etc., and 2n-1th row has n stars. \r\n        *** \r\n        ** \r\n        * \r\n        **\r\n        ***\r\n        The above pattern is a 3-bow pattern. \r\n    Write a C program to perform the following tasks. \r\n    1. Take as input an integer n. \r\n    2. Write a recursive function the determines if an input integer m is a PDS number or not. \r\n    3. Write a recursive function to determine if an input integer m is a LAB number or not. \r\n    4. Write a recursive function to print all PDS numbers from 1 to n. \r\n    5. Write a recursive function to print all LAB numbers from 1 to n. \r\n    6. Write a recursive function such that if the number n is both a PDS number and a LAB number then an n-bow pattern is printed. \r\n\r\nYou may need to use math library function : #include <math.h> \r\nIf you want to compile useing the terminal then use the command gcc.\/program.c-Im \r\nProper commenting, indentation and output commands carry marks.",
                    "Answer" : "\/\/ Including the header files\r\n#include <stdio.h>\r\n\r\n\/\/ A recursive function to calculate factorial of an integer x\r\nint factorial(int x){\r\n    if(x==0) return 1;\r\n    return x*factorial(x-1);\r\n}\r\n\r\n\/\/ A recursive function to calculate pds value (sum of factorial of digits of k) of an integer k\r\nint pds(int k){\r\n    if(k==0) return 0;\r\n    return factorial(k%10) + pds(k\/10);\r\n}\r\n\r\n\/\/ A function to check if a number k is a pds number\r\nint is_pds(int k){\r\n    return k==pds(k);\r\n}\r\n\r\n\/\/ A recursive function to calculate lab value (sum of divisors of n other than n itself) of an integer k\r\n\/\/ d here is a number incrementing till initial value of k, this is to track the divisor of k.\r\nint lab(int k, int d) {\r\n    if (k <= 1) return 0;\r\n    if (d >= k) return 0;\r\n\r\n    if (k%d == 0) {\r\n        return d + lab(k, d+1);\r\n    }\r\n    return lab(k, d + 1);\r\n}\r\n\r\n\/\/ A function to check if a number k is a lab number\r\nint is_lab(int k){\r\n    return k==lab(k,1);\r\n}\r\n\r\n\/\/ A recursive function to print all the pds numbers between 1 to n\r\nvoid all_pds(int n){\r\n    if(n<1) return;\r\n    all_pds(n-1);\r\n    if(is_pds(n)) printf(\"%d\\n\",n);\r\n}\r\n\r\n\/\/ A recursive function to print all the lab numbers between 1 to n\r\nvoid all_lab(int n){\r\n    if(n<1) return;\r\n    all_lab(n-1);\r\n    if(is_lab(n)) printf(\"%d\\n\",n);\r\n}\r\n\r\n\/\/ A recursive function to print a n number of starts in a row\r\nvoid bow_row(int x){\r\n    if(x==0){\r\n        printf(\"\\n\");\r\n        return;\r\n    }\r\n    printf(\"*\");\r\n    bow_row(x-1);\r\n}\r\n\r\n\/\/ A recursive function to print a bow pattern for a number n\r\nvoid bow(int n){\r\n    if(n==1){\r\n        printf(\"*\\n\");\r\n        return;\r\n    }\r\n    bow_row(n);\r\n    bow(n-1);\r\n    bow_row(n);\r\n}\r\n\r\n\r\n\/\/ The main function\r\nint main(){\r\n    \/\/ Declaring variables of required type\r\n    int n;\r\n\r\n    \/\/ Taking user input for integer n\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\", &n);\r\n\r\n    \/\/ Printing all the PDS numbers in between 1 and n\r\n    printf(\"\\nThe PDS Numbers between 1 and %d are:\\n\",n);\r\n    all_pds(n);\r\n\r\n    \/\/ Printing all the LAB numbers in between 1 and n\r\n    printf(\"The LAB Numbers between 1 and %d are:\\n\",n);\r\n    all_lab(n);\r\n\r\n    \/\/ If n is both pds number and lab number, we print its bow pattern\r\n    if(is_pds(n) && is_lab(n)){\r\n        bow(n);\r\n    }\r\n    \r\n    return 0;\r\n}"
                },
                {
                    "Question":"Consider the following function prototype.\r\n\r\nint check_triangle(float l1, float l2, float l3);\r\n\r\nThe function takes three real numbers, l1, l2 and l3 as lengths of straight line segments, \nand returns an integer subject to possibility of forming a geometric shape as stated below:\r\n0: neither a straight line, nor a triangle.\r\n1: a straight line\r\n2: a non-right angled and non-equilateral triangle\r\n3: a right angled triangle\r\n4: an equilateral triangle\r\n\r\nSuppose a triplet (lt1, lt2, lt3) denote the lengths of three straight line segments. \nWrite a C-program to implement the above function and the program reads N triplets of lengths \nin three different arrays for lt1, lt2 and lt3, respectively. It prints the statement of geometric shape from the \nreturn value of the function for each of the triplet. It also prints the numbers of triangles, \n straight lines, right angles and equilateral angles those are possible to form from the\r\nset of triplets.\r\nRun the program with the following input data set:\r\n(i) N=10\r\n(3, 5, 7), (2, 10, 4), (1, 2, 3), (3, 4, 5), (6, 6, 6), (12, 13, 5), \n(8, 15, 7), (100, 300, 15), (89, 89, 89), (23, 37, 47)\r\n(ii) N=10\r\n(3.2, 5.3, 7.8), (2.2, 10.9, 4.7), (1.2, 2.2, 3.2), (3.7, 4.9, 5.2), (6.6, 6.6, 6.6), (12, 13, 5), \n(8, 15, 7), (100, 300, 15), (89, 89, 89), (23.2, 37.9, 47.1)\r\n",
                    "Answer":"#include <stdio.h>\r\n#include<math.h>\r\n\r\nint check_triangle(float l1, float l2, float l3){\r\n        float max;\r\n    if((l1+l2==l3)||(l2+l3==l1)||(l3+l1==l2)){\r\n        return 1;\r\n    }\r\n    else if((l1+l2<l3)||(l2+l3<l1)||(l3+l1<l2))\r\n        return 0;\r\n    else {\r\n        if(l1==l2&&l2==l3) return 4;\r\n        if((l1*l1+l2*l2==l3*l3)||(l3*l3+l2*l2==l1*l1)||(l1*l1+l3*l3==l2*l2)) return 3;\r\n        else return 2;\r\n    }\r\n}\r\n\r\nint main(){\r\n    int N;\r\n    scanf(\"%d\",&N);\r\n    int shape[N];\r\n    float lt1[N],lt2[N],lt3[N];\r\n    int stline=0,nonequiandright=0,equitriangle=0,righttriangle=0;\r\n    int i;\r\n\r\n    for(i=0;i<N;i++){\r\n        scanf(\"%f%f%f\",&lt1[i],&lt2[i],&lt3[i]);\r\n        shape[i]= check_triangle(lt1[i],lt2[i],lt3[i]);\r\n        printf(\"Shape of triangle %d= %d \\n\",i+1,shape[i]);\r\n\r\n        if(shape[i]==1) stline++;\r\n        else if(shape[i]==2) nonequiandright++;\r\n        else if(shape[i]==3) righttriangle++;\r\n        else if(shape[i]==4) equitriangle++;\r\n    }\r\n    printf(\"No. of straight lines= %d\\n\",stline);\r\n    printf(\"No. of right angles= %d\\n\", righttriangle);\r\n    printf(\"No. of equilateral angles= %d\\n\",equitriangle*3);\r\n    printf(\"No. of non right angled non equilateral triangles= %d\\n\",nonequiandright);\r\n    printf(\"Total no. of triangles= %d\\n\\n\\n\", righttriangle+equitriangle+ nonequiandright);\r\n\r\n}\r\n"
                },
                
                {
                    "Question":"Write a program which reads first name and family name of a person. \nIt also reads a character (M or F) to know the gender of the person (M for male and F for female). \nFinally forms a string containing the full name of the person in the following format.\r\nA prefix (\u2018Mr.\u2019 for male and \u2018Ms.\u2019 for female) followed by a space and then the first letter \nof the first name (in uppercase) followed by a (.), a space and the family name, first letter of which should be in uppercase. \nFor example given the input \u201CSantanu\u201D, \u201CJohn\u201D and \u2018M\u2019, it should form a string \u201CMr. S. John\u201D. \nPrint the string containing the full name in the above format, and also print the number of vowels, and consonants in it.\r\nRun the program with the following input data set:\r\n(i) \u201CAbdel\u201D, \u201CHalim\u201D, \u2018M\u2019\r\n(ii) \u201CUpasana\u201D, \u201CNaskar\u201D, \u2018F\u2019\r\n(iii) \u201CVellupuri\u201D, \u201CSudarshan\u201D, \u2018M\u201D\r\n",
                    "Answer":"#include<stdio.h>\r\n#include<string.h>\r\n\r\nint main(){\r\n    char first_name[40], family_name[40];\r\n    char gender;\r\n    int vowels=0,consonants=2;\r\n\r\n    scanf(\" %s %s \",first_name,family_name);\r\n    gender=getchar();\r\n\r\n    char output[50];\r\n    if (gender=='F'){\r\n        output[0]='M' ;\r\n        output[1]='s';\r\n        output[2]='.';\r\n        output[3]=' ';\r\n\r\n    }\r\n    else if(gender=='M'){\r\n        output[0]='M' ;\r\n        output[1]='r';\r\n        output[2]='.';\r\n        output[3]=' ';\r\n    }\r\n    output[4]=first_name[0];\r\n    output[5]='.';\r\n    output[6]=' ';\r\n\r\n    int i,lfa,lfi;\r\n    lfa=strlen(family_name);\r\n    lfi=strlen(first_name);\r\n\r\n    for(i=0;i<lfa;i++){\r\n        output[i+7]=family_name[i];\r\n    }\r\n    for(i=0;i<lfa;i++){\r\n\r\n        if(family_name[i]=='a'||family_name[i]=='e'||family_name[i]=='i'||family_name[i]=='o'||family_name[i]=='u'||\r\n        family_name[i]=='A'||family_name[i]=='E'||family_name[i]=='I'||family_name[i]=='O'||family_name[i]=='U'){\r\n            vowels++;\r\n        }\r\n        else consonants++;\r\n    }\r\n    output[lfa+7]='\\0';\r\n\r\n\r\n\r\n        if(first_name[0]=='a'||first_name[0]=='e'||first_name[0]=='i'||first_name[0]=='o'||first_name[0]=='u'||\r\n        first_name[0]=='A'||first_name[0]=='E'||first_name[0]=='I'||first_name[0]=='O'||first_name[0]=='U'){\r\n            vowels++;\r\n        }\r\n        else consonants++;\r\n\r\n\r\n    printf(\"Output string= %s \\n\", output);\r\n    printf(\"vowels= %d \\n\",vowels);\r\n    printf(\"consonants= %d \\n\\n\",consonants);\r\n}\r\n"
                },
                
                {
                    "Question":"Write a function named convertRealNumber(.) which converts a string representing a real number \nin the decimal format followed by a space and its unit (either in cm or in ft), into a floating point number in meter. \nFor example, \u201C123.25 cm\u201D is converted as 1.2325, and \u201C3.5 ft\u201D as 1.0668.\r\nWrite a program to read N (to be read first) strings denoting measurements of length in the above format and \neach given in a separate line. The program computes the maximum, minimum and average lengths in meter.\r\nRun the program with the following input data set:\r\n(i) N=5\r\n2.54 cm\r\n3.78 ft\r\n17.85 cm\r\n25.4 cm\r\n5.6 ft\r\n\r\n(i) N=10\r\n12.54 cm\r\n13.78 ft\r\n178.85 cm\r\n235.4 cm\r\n54.6 ft\r\n12.4 cm\r\n8.9 ft\r\n73.4 cm\r\n125.8 cm\r\n29.45 ft\r\n",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nfloat convertRealNumber(char length[]){\r\n    int digit, j=0, decimal=0;\r\n    float num=0;\r\n\r\n    \/\/converting real number in string to float \r\n    while (length[j]!=' '){\r\n        digit=length[j]-48;\r\n        if (length[j]=='.'){\r\n            decimal=j;\r\n            j+=1;\r\n            continue;\r\n        }\r\n        if (decimal==0){\r\n            num=(num*10)+digit;\r\n        }\r\n        else {\r\n            num+=(digit*pow(0.1, j-decimal));\r\n        }\r\n        j+=1;\r\n    }\r\n\r\n    \/\/converting ft or cm to meters\r\n    if (length[j+1]=='f'){\r\n        num*=0.3048;\r\n    }\r\n    else {\r\n        num*=0.01;\r\n    }\r\n    return num;\r\n}\r\n\r\nint main(){\r\n    int N;\r\n    printf(\"Enter number of entries (N): \");\r\n    scanf(\"%d\", &N);\r\n    printf(\"%d\\n\", N);\r\n    char a=getchar();\r\n    float result, max=0, min, total=0;\r\n\r\n    \/\/taking input for lengths and calculating min, max and total sum simultaneously\r\n    for (int i=0; i<N; i++){\r\n        printf(\"Enter length: \");\r\n        char length[20];\r\n        scanf(\"%[^\\n]s\", length);\r\n        printf(\"%s\\n\", length);\r\n        a=getchar();\r\n        result=convertRealNumber(length);\r\n        if (i==0) {\r\n            min=result;\r\n        }\r\n        if (result>max){\r\n            max=result;\r\n        }\r\n        if (result<min) {\r\n            min=result;\r\n        }\r\n        total+=result;\r\n        printf(\"%f\\n\", result);\r\n    }\r\n    printf(\"Maximum length (in meters) = %f\\nMinimum length (in meters) = %f\\nAverage length (in meters) = %f\\n\\n\", max, min, (total\/N));\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question":"The task is to generate random points on the plane.\r\nFor this, write a C program that has the following input\/output behavior:\r\n\uE00C The program asks the user for a positive integer n . Assume that n<400 .\r\n\uE00C The program asks the user for a seed (a non-negative integer) for random number generation.\r\n\uE00C The program generates distinct points randomly on the 2D-plane, whose coordinates are\r\nintegers in [0,20], and stores them in a 1D integer array The first two cells of should\r\ncontain the (x,y) coordinates of the first point, the second two cells for the second point, and\r\nso on. The program starts with the array as empty. Each time it generates a point, it first\r\nsearches to see if the point already exists in (Write a function to do this.) If the point\r\nexists, then it is not inserted in and a new point is generated. If the point does not exist in\r\nthen it is inserted in It stops inserting points when the number of points in A becomes .\r\n\uE00C The program prints all the points in Each point is printed as a space-separated pair of\r\nintegers in a new line (see sample output).\r\nTo generate the random numbers, use the srand and rand functions defined in stdlib.h.\r\nTheir prototypes are as follows.\r\nvoid srand (unsigned s);\r\nint rand (void);\r\nFirst, you have to set the seed to the user input (say, s) as follows.\r\nsrand(s);\r\nThen call rand()to get a random integer in the interval[0, RAND_MAX ], and assign it to an integer\r\nvariable, say r: r=rand();\r\nNote:\r\nRAND_MAX is a large integer constant whose value need not concern us.\r\nThen you can do r = r%21;\r\nso as to get r in the interval [0,20].",
                    "Answer":"#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\n\r\nint Ispresent(int V[], int i, int x, int y)\r\n{\r\n  while(i>0)\r\n  {\r\n    if(V[i-1]==y && V[i-2]==x)\r\n      return 1;\r\n    i-=2;\r\n  }\r\n  return 0;\r\n}\r\n\r\n\r\n\r\nint main()\r\n{\r\n  int seed, i, n, x, y, V[800];\r\n  printf(\"Enter number of points: \");\r\n  scanf(\"%d\",&n);\r\n  printf(\"Enter seed: \");\r\n  scanf(\"%d\",&seed);\r\n  srand(seed);\r\n  for(i=0; i<2*n;)\r\n  {\r\n    x=rand()%21;\r\n    y=rand()%21;\r\n    if(!Ispresent(V, i, x, y))\r\n    {\r\n      V[i]=x;\r\n      V[i+1]=y;\r\n      i=i+2;\r\n    }\r\n   }\r\n   printf(\"Unique points generated: \\n\");\r\n   for(i=0; i<2*n; i+=2)\r\n     printf(\"%2d %2d\\n\", V[i], V[i+1]);\r\n   return 0;\r\n}"
                },
                {
                    "Question":"A polygon is said to be simple if its non-adjacent sides do not intersect each other. Write a C program\r\nto find out whether an input polygon is simple. It should have the following input\/output behavior:\r\n\uE00C The program first takes in the number of vertices from the user.\r\n\uE00C Then it takes in n integer points (i.e., points with integer coordinates) as vertices from the user.\r\nThe user is assumed to enter these points either in clockwise or in anticlockwise order. In other\r\nwords, the sides of the polygon connect consecutive vertices in the input sequence (and the last\r\nand the first vertices).\r\n\uE00C The program outputs whether or not the polygon is simple. If the polygon is not simple, it also\r\noutputs the number of intersection points among the non-adjacent sides.\r\n\uE00C You should write a function that takes as input the endpoints of two straight line segments and\r\nreturns whether they intersect or not. Call this function from main() to determine the\r\nintersection between every two non-adjacent sides of the polygon.",
                    "Answer":"#include<stdio.h>\r\n\r\nint Intersect(int l1x, int l1y, int l2x, int l2y, int r1x, int r1y, int r2x, int r2y)\r\n{\r\n  float x, y, delta_lx, delta_ly, delta_rx, delta_ry, delta_slope;\r\n  delta_lx=l1x-l2x;\r\n  delta_ly=l1y-l2y;\r\n  delta_rx=r1x-r2x;\r\n  delta_ry=r1y-r2y;\r\n  if(delta_lx*delta_ry==delta_rx*delta_ly)  \/\/ if same slope then no intersection\r\n    return 0;\r\n\r\n  \/* If segment l is vertical *\/\r\n\r\n  if(delta_lx==0)\r\n  {\r\n    y=r1y+(l1x-r1x)*delta_ry\/delta_rx;\r\n    if((y>=l1y && y <=l2y) || (y>=l2y && y <=l1y))\r\n      return 1;\r\n    else return 0;\r\n  }\r\n\r\n  \/* If segment r is vertical *\/\r\n\r\n  if(delta_rx==0)\r\n  {\r\n    y=l1y+(r1x-l1x)*delta_ly\/delta_lx;\r\n    if((y>=r1y && y <=r2y) || (y>=r2y && y <=r1y))\r\n      return 1;\r\n    else return 0;\r\n  }\r\n\r\n  \/* If none of the segments is vertical *\/\r\n\r\n  delta_slope = delta_ly\/delta_lx - delta_ry\/delta_rx;\r\n  x=(r1y-l1y-r1x*delta_ry\/delta_rx + l1x*delta_ly\/delta_lx)\/delta_slope;\r\n  y=r1y+delta_ry*(x-r1x)\/delta_rx;\r\n  if (!((l1x <= x && x <= l2x) || (l2x <= x && x <= l1x)))  \/\/ Does (x, y) lie on l?\r\n    return 0;\r\n  if (!((r1x <= x && x <= r2x) || (r2x <= x && x <= r1x)))  \/\/ Does (x, y) lie on r?\r\n   return 0;\r\n  return 1;  \r\n}\r\n\r\n\r\n\r\nint main()\r\n{\r\n  int n, i, j, intersect=0;\r\n  int P[200];\r\n  printf(\"How many vertices? \");\r\n  scanf(\"%d\",&n);\r\n  \r\n  printf(\"Enter X and Y co-ordinates:\\n\");\r\n\r\n  for(i=0; i<2*n; i+=2)\r\n  {\r\n    scanf(\"%d%d\", &P[i], &P[i+1]);\r\n  }\r\n  for(i=0; i<2*n-4; i+=2)\r\n    for(j=i+4; j<2*n-2; j+=2)\r\n      if(Intersect(P[i], P[i+1], P[i+2], P[i+3], P[j], P[j+1], P[j+2], P[j+3]))\r\n        intersect+=1;\r\n        \r\n  for(i=2; i<2*n-4; i+=2)\r\n    if(Intersect (P[2*n-2], P[2*n-1], P[0], P[1], P[i], P[i+1], P[i+2], P[i+3]))\r\n      intersect+=1;\r\n  if(intersect==0)\r\n    printf(\"Polygon is a simple polygon.\\n\");\r\n  else\r\n    printf(\"Polygon is a not simple polygon.\\nNumber of intersecting pairs of non-adjacent sides is %d.\\n\", intersect);\r\n  return 0;\r\n}"
                },
                {
                    "Question":"In this problem you will rearrange an input shuffle of playing cards in a definite order. You might know\r\nthat playing cards have 4 suits, each having 13 cards with unique numbers. The ordered suits are\r\n\u2663 Clubs (C), \u2666 Diamonds (D), \u2665 Hearts (H), and \u2660 Spades (S), and the ordered numbers are 2,3,......,9,J,Q,K,A.\r\n(10 is not considered for this problem.) So, in total we have 48 cards, each being\r\n\r\nuniquely identified by its suit and number.\r\nFor your code, proceed as follows.\r\n\uE00C Define a global structure card that can store the ID (= suit and number in char) of a card.\r\n\uE00C Define in main() an array of structure card having size 48.\r\n\uE00C Take in a sequence of cards as input, and store the sequence in a string variable; for example,\r\nscanf(\"%[^\\n]s\", s) to store it in s. Each card should be a pair of characters (e.g., 4C\r\nstands for 4 of Clubs, AD stands of Ace of Diamonds, etc.). Thus, the first character in the pair\r\nis the number and the second is the suit. The sequence should be a space-separated sequence of\r\nsuch pairs. You may assume that the cards are all distinct.\r\n\uE00C Extract the card information from the string and populate the array of cards.\r\n\uE00C Card ordering: Principle is suits first, numbers next. Find the smallest card and exchange it\r\nwith the 1st card. Now, from the last cards, find their smallest and exchange it with their\r\n1st card. Next, from the last cards, find their smallest and exchange it with their 1st card.\r\nAnd so on.\r\n\uE00C Print the ordered cards. While printing, you should print the actual symbols of the suits. That is\r\ndone as follows. Declare globally the following strings:",
                    "Answer":"#include<stdio.h>\r\n\r\nstruct card\r\n{\r\n  char suit;\r\n  char num;\r\n};\r\n\r\nchar clubs0[]    = {0xE2, 0x99, 0xA3, 0};\r\nchar diamonds0[] = {0xE2, 0x99, 0xA6, 0};\r\nchar hearts0[]   = {0xE2, 0x99, 0xA5, 0};\r\nchar spades0[]   = {0xE2, 0x99, 0xA0, 0};\r\n\r\nint less(struct card P, struct card Q)\r\n{\r\n  if(P.suit < Q.suit)\r\n    return 1;\r\n  if(P.suit > Q.suit)\r\n    return 0;\r\n  if(P.num>='2' && P.num<='9')\r\n  {\r\n    if(!(Q.num>='2' && Q.num<='9'))\r\n      return 1;\r\n    else  if(P.num < Q.num)\r\n            return 1;\r\n  }\r\n  if(Q.num>='2' && Q.num<='9')\r\n    return 0;\r\n  if(P.num=='J')\r\n    if(Q.num!='J')\r\n      return 1;\r\n  if(P.num=='Q')\r\n    if(Q.num=='K' || Q.num=='A')\r\n      return 1;\r\n  if(P.num=='K' && Q.num=='A')\r\n    return 1;\r\n  return 0;\r\n}\r\n\r\nvoid swap(struct card P[], int i, int j)\r\n{\r\n  (P[i].num)=(P[i].num)-(P[j].num);\r\n  (P[j].num)=(P[i].num)+(P[j].num);\r\n  (P[i].num)=(P[j].num)-(P[i].num);\r\n  (P[i].suit)=(P[i].suit)-(P[j].suit);\r\n  (P[j].suit)=(P[i].suit)+(P[j].suit);\r\n  (P[i].suit)=(P[j].suit)-(P[i].suit);\r\n}\r\n\r\n\/*void swap(struct card *A, struct card *B)\r\n{\r\n  (A->num)=(A->num)-(B->num);\r\n  (B->num)=(A->num)+(B->num);\r\n  (A->num)=(B->num)-(A->num);\r\n  (A->suit)=(A->suit)-(B->suit);\r\n  (B->suit)=(A->suit)+(B->suit);\r\n  (A->suit)=(B->suit)-(A->suit);\r\n}*\/\r\n\r\nvoid Printsuit(char suit)\r\n{\r\n  switch(suit)\r\n  {\r\n    case 'C':\r\n      printf(\"%s\",clubs0);\r\n      break;\r\n    case 'D':\r\n      printf(\"%s\",diamonds0);\r\n      break;\r\n    case 'H':\r\n      printf(\"%s\",hearts0);\r\n      break;\r\n    case 'S':\r\n      printf(\"%s\",spades0);\r\n  }\r\n}\r\n\r\nint main()\r\n{\r\n  int size=0, i=0, j=0;\r\n  int numC=0, numD=0, numH=0, numS=0;\r\n  char s[200];\r\n  struct card P[52];\r\n  printf(\"Enter the sequence of cards: \");\r\n  scanf(\"%[^\\n]s\", s);\r\n  if(s[0]=='\\0')\r\n  {\r\n    printf(\"Empty sequence.\");\r\n    return 0;\r\n  }\r\n  while(1)\r\n  {\r\n     P[size].num=s[i++];  \r\n     P[size++].suit=s[i++];\r\n     if(s[i]=='\\0')\r\n       break;\r\n     i++;\r\n  }\r\n  for(i=0; i<size-1; i++)\r\n    for(j=i+1; j< size; j++)\r\n      if(less(P[j], P[i]) == 1)\r\n        swap(P, i, j);\r\n  for(i=0; i<size-1; i++)\r\n  {\r\n    printf(\"%c\",P[i].num);\r\n    Printsuit(P[i].suit);\r\n    printf(\" \");\r\n  }\r\n  printf(\"%c\", P[size-1].num);\r\n  Printsuit(P[i].suit);\r\n  printf(\"\\n\");\r\n  return 0;\r\n}  "
                },
                {
                    "Question":"2. Write a C program that would allow performing various types of operations on an integer\r\narray. It should have the following functions\r\n\r\nmain: Inside the main function declare an integer array of size 40. the main function should then\r\nperform the following in a loop: a) display the following menu choice, b) read the user choice and c)\r\ncall the appropriate function based on the user choice. It should exit when the user enters either 0\r\nor any number greater than 8. When the user gives option 1 (fill function), the size of the array\r\n(0<size <=40)should be obtained from the user. You can make either the size as a global variable or\r\npass it as a parameter to other functions.\r\n\r\ni. Fill: Enter 1\r\nii. Exchange: Enter 2\r\niii. Rotate right: Enter 3\r\niv. Rotate left: Enter 4\r\nv. Sort: Enter 5\r\nvi. Search: Enter 6\r\nvii. Analyze: Enter 7\r\nviii. Exit: Enter 0, 8 or higher number\r\n\r\nfill: This function should take an integer array and its size as two parameters. It should fill the array\r\nwith random integral numbers in the range [100,999] generated by calling the (rand) library\r\n then display the array contents nicely formatted. [5 Marks]\r\n\r\nexchange: This function should take an integer array and its size as its parameters. It should first\r\ndisplay the elements of the original array received as its input. It should then exchange the lower\r\nand upper halves of the array (first half elements of the array should be the last half and vice versa) \nand display the resultant array. If the number of elements in the array is odd, the middle element \nremains undisturbed. Do not use an extra array for implementing the exchange operation. [5 Marks]\r\n\r\nrotate right: This function should take an integer array and its size as its parameters. It s\r\ndisplay the elements of the original array received as its input. It should then right rotate\r\none position (the last element should become the first element) and then display the result [5 Marks]\r\n\r\nrotate left: This function should take an integer array and its size as its parameters. It s\r\ndisplay the elements of the original array received as its input. It should then left rotate\r\none position (the first element should become the last element) and then display the result [5 Marks]\r\n\r\nsort: This function should take an integer array and its size as its parameters. It should display\r\nthe elements of the original array received as its input. It should then sort the array( using any\r\nalgorithm that you are familiar with), and display the sorted array. [5 Marks]\r\n\r\nsearch: This function should take an integer array and its size as its parameters. It should\r\ndisplay the elements of the original array received as its input. It should then ask the user \r\nthe integer value to be searched. It should then perform a linear search for the element an\r\nthe array index at which the element is located. If the element is not present in the array\r\ndisplay \"Not found.\" [5 Marks]\r\n\r\nanalyze: This function should take an integer array and its size as its parameters. It should\r\ndisplay the elements of the original array received as its input. It should then display all increasing\r\nsequence of consecutive numbers and also display the largest increasing sequence. It may \r\nhappen that there are no increasing sequences of numbers. In this case, it should then output an\r\nappropriate message. If there are multiple largest sequence, pointing out any one of them would \r\nbe fine.\r\nExample: if the array elements are 1,5,3,2,7,15,23,12,15,21, then it should display: The increasing\r\nsequences are: (1,5,3), (2,7,15,23), (12,15,21) and the largest increasing sequence is (2,7,15,23).\r\n(10 Marks]",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <time.h>\r\n\r\nvoid fill(int a[], int n)\r\n{\r\n    srand(time(0));\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        a[i] = 100 + rand() % 900; \/\/assigning array elements\r\n    }\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"array[%d]= %d\\n\", i, a[i]);\r\n    }\r\n}\r\n\r\nvoid exchange(int a[], int n)\r\n{\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n\r\n    if (n % 2 == 0){ \/\/case for even no. of elements\r\n        for (int i = 0; i < n \/ 2; i++)\r\n        {\r\n            int temp;\r\n            temp = a[i];\r\n            a[i] = a[n \/ 2 + i];\r\n            a[n \/ 2 + i] = temp;\r\n        }\r\n    }\r\n\r\n    else { \/\/case for odd no. of elements\r\n        for (int i = 0; i < n \/ 2; i++)\r\n        {\r\n            int temp;\r\n            temp = a[i];\r\n            a[i] = a[n \/ 2 + i + 1];\r\n            a[n \/ 2 + i + 1] = temp;\r\n        }\r\n    }\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n}\r\n\r\nvoid rr(int a[], int n)\r\n{\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n\r\n    int temp = a[n - 1]; \/\/temp stores the original value of a[n-1]\r\n\r\n    for (int i = n - 1; i > 0; i--)\r\n    {\r\n        a[i] = a[i - 1];\r\n    }\r\n    a[0] = temp; \/\/assignment of a[0] to a[n-1]\r\n\r\n    printf(\"[\");\r\n\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n}\r\n\r\nvoid rl(int a[], int n)\r\n{\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n    int temp = a[0]; \/\/temp stores the original value of a[0]\r\n    for (int i = 0; i < n - 1; i++)\r\n    {\r\n        a[i] = a[i + 1];\r\n    }\r\n    a[n - 1] = temp; \/\/assignment of a[n-1] to a[0]\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n}\r\n\r\nvoid sort(int a[], int n)\r\n{\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n    for (int i = 0; i < n - 1; i++)\r\n    {\r\n        for (int j = i + 1; j < n; j++)\r\n        {\r\n            if (a[i] > a[j])\r\n            {\r\n                int temp;\r\n                temp = a[i];\r\n                a[i] = a[j];\r\n                a[j] = temp;\r\n            }\r\n        }\r\n    }\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n}\r\n\r\nvoid search(int a[], int n)\r\n{\r\n    int k, l = 0, m;\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n    printf(\"Enter the no. you want to search.\\n\");\r\n    scanf(\"%d\", &k);\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        if (a[i] == k)\r\n        {\r\n            l = 1;\r\n            m = i; \/\/stores the index of the ARRAY element\r\n            break;\r\n        }\r\n    }\r\n    if (l == 1)\r\n    {\r\n        printf(\"The no. is present at index %d.\\n\", m);\r\n    }\r\n    else if (l == 0)\r\n    {\r\n        printf(\"Not found.\\n\");\r\n    }\r\n}\r\n\r\nvoid analyze(int a[], int n)\r\n{\r\n    printf(\"[\");\r\n    for (int i = 0; i < n; i++)\r\n    {\r\n        printf(\"%d ,\", a[i]);\r\n    }\r\n    printf(\"]\\n\");\r\n    printf(\"\\n(%d, \", a[0]);\r\n    for(int i=0; i<n-1; i++){\r\n        if(a[i+1]>a[i]){\r\n            printf(\"%d, \", a[i+1]);\r\n        }\r\n        else{\r\n            printf(\")\\n(%d, \", a[i+1]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nint main()\r\n{\r\n    int size;\r\n    int choice;\r\n    printf(\"Enter the size of array.\\n\");\r\n    scanf(\"%d\", &size);\r\n    printf(\"\\n******************\\n\");\r\n    int arr[size];\r\n    printf(\"i. Fill: enter 1\\nii. Exchange: enter 2\\niii. Rotate right: Enter 3\\n\");\r\n    printf(\"iv. Rotate left: Enter 4\\nv.Sort: enter 5\\nvi.Search: enter 6\\n\");\r\n    printf(\"vii.Analyze: enter 7\\nviii.Exit: enter 0, 8 or higher no.\\n\");\r\n    printf(\"\\n******************\\n\");\r\n    printf(\"Enter the choice..\\n\");\r\n    scanf(\"%d\", &choice);\r\n\r\n    for (int i = 0; 1; i++)\r\n    {\r\n        if (choice == 0 || choice >= 8)\r\n        {\r\n            return 0;\r\n        }\r\n        else if (choice == 1)\r\n        {\r\n            fill(arr, size);\r\n        }\r\n        else if (choice == 2)\r\n        {\r\n            exchange(arr, size);\r\n        }\r\n        else if (choice == 3)\r\n        {\r\n            rr(arr, size);\r\n        }\r\n        else if (choice == 4)\r\n        {\r\n            rl(arr, size);\r\n        }\r\n        else if (choice == 5)\r\n        {\r\n            sort(arr, size);\r\n        }\r\n        else if (choice == 6)\r\n        {\r\n            search(arr, size);\r\n        }\r\n        else if(choice==7){\r\n            analyze(arr, size);\r\n        }\r\n        printf(\"\\n******************\\n\");\r\n        printf(\"Enter the choice..\\n\");\r\n        scanf(\"%d\", &choice);\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"2. Write a C program to read two integer values m and n (2<m<20 and 2< n<20). Fill an m by n matrix (m\r\nrows and n columns) with random integers in the range [0, 10] by calling the rand function. Display the\r\nmatrix nicely formatted. Then call two functions findMax and findMin.\r\nfindMax: This function should take the matrix and m and n as arguments. It should find a 3x3 submatrix\r\nfor which sum of all elements is maximum. It should display this submatrix nicely formatted. If no unique\r\nsubmatrix having maximum sum is present, you can display any one of the submatrix having maximum\r\nSum.\r\nfindMin: This function should take the matrix and m and n as arguments. It should find a 3X3 submatrix\r\nwhose sum of all elements is minimum. It should display this submatrix nicely formatted. If no unique\r\nsubmatrix having minimum sum is present, you can display any one of the submatrix having minimum\r\nsum.\r\nExample: Consider m=4 and n=4, and the following example random array:\r\n6  0  5  3\r\n2  7  3  9\r\n1  5  7  8\r\n3  4  6  7\r\nMax submatrix: \r\n7 3 9\r\n5 7 8\r\n4 6 7\r\nMin submatrix: \r\n6 0 5\r\n2 7 3\r\n1 5 7",
                    "Answer":"#include <stdio.h>\r\n#include<stdlib.h>\r\n#include<time.h>\r\n\r\nvoid findmax( int m, int n, int a[m][n]){\r\n    int sum=0, row=0, column=0,max=0;\r\n    \r\n     for(int i=0; i<m-2;i++){\r\n        for(int j=0; j<n-2; j++){\r\n            \/\/finds the sum of all 3*3 matrix possible\r\n            sum= a[i][j]+ a[i][j+1]+ a[i][j+2]+a[i+1][j]+ a[i+1][j+1]+ a[i+1][j+2]+a[i+2][j]+ a[i+2][j+1]+ a[i+2][j+2];\r\n            \/\/assignment of rows and columns\r\n            if(sum>max){\r\n                max=sum;\r\n                row=i; column=j;\r\n            }\r\n        }\r\n    }\r\n    for(int i= row; i<row+3; i++){\r\n        for(int j=column; j<column+3; j++){\r\n            printf(\"%d  \", a[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n}\r\n\r\nvoid findmin( int m, int n, int a[m][n]){\r\n    int sum=0, row=0, column=0,min=81;\r\n     for(int i=0; i<m-2;i++){\r\n        for(int j=0; j<n-2; j++){\r\n            \/\/finds the sum of all 3*3 matrix possible\r\n            sum= a[i][j]+ a[i][j+1]+ a[i][j+2]+a[i+1][j]+ a[i+1][j+1]+ a[i+1][j+2]+a[i+2][j]+ a[i+2][j+1]+ a[i+2][j+2];\r\n            \/\/assignment of rows and columns\r\n            if(sum<min){\r\n                min=sum;\r\n                row=i; column=j;\r\n            }\r\n        }\r\n    }\r\n    for(int i= row; i<row+3; i++){\r\n        for(int j=column; j<column+3; j++){\r\n            printf(\"%d  \", a[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int m,n;\r\n    srand(time(0));\r\n    printf(\"Enter the no. of rows and columns respectively....\\n\");\r\n    scanf(\"%d%d\", &m,&n);\r\n    printf(\"****************\\n\");\r\n    int a[m][n];\r\n    for(int i=0; i<m;i++){\r\n        for(int j=0; j<n; j++){\r\n            a[i][j]= rand()%10;\r\n        }\r\n    }\r\n    printf(\"The matrix formed is....\\n\");\r\n     for(int i=0; i<m;i++){\r\n        for(int j=0; j<n; j++){\r\n            printf(\"%d  \", a[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    printf(\"****************\\n\");\r\n    printf(\"The 3*3 submatrix having maximum sum is...\\n\");\r\n    findmax(m,n,a);\r\n    printf(\"****************\\n\");\r\n    printf(\"The 3*3 submatrix having minimum sum is...\\n\");\r\n    findmin(m,n,a);\r\n    printf(\"****************\\n\");\r\n\r\n    \r\n    return 0;\r\n}" 
                },
                {
                    "Question":"1. Write a program that would read three character strings str1, str2, and str3 of sizes upto 20, 6, and 6\r\nrespectively. Display the three strings. Then, invoke the two functions checkStr( char *str1, char *\r\nstr2) and repStr(char *str1, const char *str2, const char \"str3).\r\na. checkStr( char *str1, char *str2): Check whether str2 occurs in str1 as a substring and\r\ndisplay the positions of all occurrences. Do not use any string library functions. [5 Marks]\r\nb. repStr(char * str1, const char *str2, const char *str3): Replace all occurrences of str2\r\nin str1 by str3 and display the newly formed string.\r\n",
                    "Answer":"#include <stdio.h>\r\n\r\nvoid checkStr(char *s1, char *s2, int *i, int *j){\r\n    int c1=0, c2=0,c3=0,c;\r\n    char *s3= s1;\r\n    char *s4= s2;\r\n    \r\n    while(*(s1++) !='\\0'){\r\n        c1++;\/\/ getting string length\r\n    }\r\n    while(*(s2++) !='\\0'){\r\n        c2++;\/\/ getting string length\r\n    }\r\n    for(int i=0; i<c1; i++){\r\n        if(*(s3+i)==*(s4)){\r\n            c3++;\/\/ counter\r\n            c=i;\/\/stores the index of common charecters\r\n            s4++;\r\n        }\r\n}\r\n    if(c3==c2){\/\/compares the counter with the original string length\r\n    printf(\"The string S2 occurs from index %d to %d in string S1.\\n\", c-c2+1, c);\r\n    }\r\n    *i=c2;\/\/ assignment of string length of string 2 to i\r\n    *j= c-c2+1;\/\/ assignment of index of string 1 to j\r\n}\r\n\r\nvoid repStr(char *s1, char *s2, char *s3, int i, int j){\r\n    for(int k=0; k<i; k++){\r\n        *(s1+ j+k)= *(s3+k);\r\n    }\r\n    printf(\"The new replaced string is now....\\n%s\\n\", s1);\r\n}\r\n\r\nint main()\r\n{\r\n    char str1[20], str2[6], str3[6];\r\n    int c1,c2;\r\n    printf(\"Enter the charecter string S1 :\\n\");\r\n    scanf(\" %s\", str1);\r\n     printf(\"Enter the charecter string S2 :\\n\");\r\n    scanf(\" %s\", str2);\r\n     printf(\"Enter the charecter string S3 :\\n\");\r\n    scanf(\" %s\", str3);\r\n    checkStr(str1, str2, &c1, &c2);\r\n    repStr(str1, str2, str3, c1, c2);\r\n    return 0;\r\n}"
                },
                {
                    "Question":"In the main program, declare an integer array of size 16 and name it binNum. Fill it randomly with 1 and\r\n0 values by calling the rand() function repeatedly. Display the array of numbers as a binary number. The\r\nprogram should then wait in an infinite loop showing the following options:\r\n1. Display the number in decimal format\r\n2. Display the number in Hexadecimal format\r\n3. Display the number in Octal format\r\n4. Multiply the original binary number by 2 and display the result\r\n5. Divide the original binary number by 2 and display the result\r\n6. Enter new binary number Exit\r\n7. Enter Your Choice (1-6):-\r\n\r\nBased on the user choice of number shown above, the following functions will be appropriately called.\r\nThe result will be displayed inside the function and the program will continue waiting in the infinite loop.\r\nThe program will exit when the user types 6. The different functions of the program are described in the\r\nfollowing\r\na. b2d(): It should take an integer array of 1's and 0's as its argument. It should first print this binary\r\nnumber and then compute and then it should compute and print the decimal equivalent considering\r\nthe array contents as an unsigned binary number. Also it should display the Octal and Hexadecimal\r\nequivalents of the computed decimal number using %o and %x formats.\r\nb. b2h(): It should take an integer array of 1's and 0's as its argument. It should first print this binary\r\nnumber and then compute and print its Hexadecimal equivalent considering the array as an unsigned binary number.\r\nC. b2o(): It should take an integer array of Is and 0s as its argument. It should first print this binary\r\nnumber. It should then compute and print the octal equivalent of the number considering the array\r\ncontents as an unsigned binary number.\r\nd. multiply2(): It should take an integer array of 1's and 0's as its argument. It should first print this\r\nbinary number and then print the decimal equivalent of the number by calling b2d(). It should then\r\nshift the bits left by one bit, and then print the resultant binary number and also the decimal\r\nequivalent of this resultant binary number by calling b2d().\r\ne. divide2(): It should take an integer array of 1's and 0's as its argument. It should first print the binary\r\nnumber and then print the decimal equivalent of the number by calling b2d(). It should then shift\r\nthe bits right by one bit, and then print the binary number and the decimal equivalent of the\r\nnumber by calling b2d().\r\nf.newNum(): Prompt for entering a 16bit unsigned binary number.\r\n\r\nIf arrays are not passed as argument, or global arrays are declared, 20% marks will be deducted.\r\nTotal=25 Marks]",
                    "Answer":"include <stdio.h>\r\n#include<stdlib.h>\r\n#include<time.h>\r\n#include<math.h>\r\n\r\nvoid b2d(int a[]){\r\n    int sum=0;\r\n    printf(\"\\nThe binary number is....\\n\");\r\n    for(int i=0; i<16; i++){\r\n        printf(\"%d\", a[i]);\r\n    }\r\n    for(int i=0; i<16; i++){\r\n        sum= sum+ (a[15-i]) *pow(2,i); \/\/ conversion from binary to decimal\r\n    }\r\n    printf(\"\\nThe decimal number is %d.\", sum);\r\n}\r\n\r\nvoid b2h(int a[]){\r\n    int sum=0;\r\n    b2d(a);\r\n    printf(\"\\nThe hexadecimal number is...\\n\");\r\n    for(int i=0; i<15; i+=4){\r\n        sum= a[i]*8+ a[i+1]*4 +a[i+2]*2 +a[i+3]; \/\/ reading 4 bits at a time\r\n        switch(sum){\r\n        case 0:\r\n        printf(\"0\");\r\n        break;\r\n        case 1:\r\n        printf(\"1\");\r\n        break;\r\n        case 2:\r\n        printf(\"2\");\r\n        break;\r\n        case 3:\r\n        printf(\"3\");\r\n        break;\r\n        case 4:\r\n        printf(\"4\");\r\n        break;\r\n        case 5:\r\n        printf(\"5\");\r\n        break;\r\n        case 6:\r\n        printf(\"6\");\r\n        break;\r\n        case 7:\r\n        printf(\"7\");\r\n        break;\r\n        case 8:\r\n        printf(\"8\");\r\n        break;\r\n        case 9:\r\n        printf(\"9\");\r\n        break;\r\n        case 10:\r\n        printf(\"A\");\r\n        break;\r\n        case 11:\r\n        printf(\"B\");\r\n        break;\r\n        case 12:\r\n        printf(\"C\");\r\n        break;\r\n        case 13:\r\n        printf(\"D\");\r\n        break;\r\n        case 14:\r\n        printf(\"E\");\r\n        break;\r\n        case 15:\r\n        printf(\"F\");\r\n        break;\r\n        }\r\n    }\r\n}\r\n\r\nvoid b2o(int a[]){\r\n     b2d(a);\r\n    int sum=0;\r\n    int b[6];\r\n    for(int i=0; i<6; i++){\r\n        b[i]=0; \/\/initialising array with all values 0\r\n    }\r\n     for(int i=0; i<16; i++){\r\n        sum= sum+ (a[15-i]) *pow(2,i); \/\/ converting binary to decimal\r\n    }\r\n    for(int i=0; i<6; i++){\r\n        b[5-i]= sum%8; \/\/ reverse filling of array storing octal numbers\r\n        sum\/=8;\r\n    }\r\n    printf(\"\\nThe octal number is \\n\");\r\n    for(int i=0; i<6; i++){\r\n        printf(\"%d\", b[i]);\r\n    }\r\n}\r\n\r\nvoid multiply2(int a[]){\r\n    b2d(a);\r\n    int sum=0;\r\n    int b[17];\r\n     for(int i=0; i<17; i++){\r\n        b[i]=0;\/\/ initilaising array with all values 0\r\n    }\r\n     for(int i=0; i<16; i++){\r\n        sum= sum+ (a[15-i]) *pow(2,i);\r\n    }\r\n    sum= sum*2;\r\n    printf(\"\\nThe new number is %d.\\n\", sum);\r\n     for(int i=0; i<17; i++){\r\n        b[16-i]= sum%2; \/\/ revevrse filling of array\r\n        sum= sum\/2;\r\n    }\r\n    printf(\"\\nThe new number in binary is \\n\");\r\n     for(int i=0; i<17; i++){\r\n        printf(\"%d\", b[i]);\r\n    }\r\n}\r\nvoid divide2(int a[]){\r\n    b2d(a);\r\n    int sum=0;\r\n    int b[15];\r\n     for(int i=0; i<15; i++){\r\n        b[i]=0;\r\n    }\r\n     for(int i=0; i<16; i++){\r\n        sum= sum+ (a[15-i]) *pow(2,i);\r\n    }\r\n    sum= sum\/2;\r\n    printf(\"\\nThe new number is %d.\\n\", sum);\r\n     for(int i=0; i<15; i++){\r\n        b[14-i]= sum%2;\/\/ revevrse filling of array\r\n        sum= sum\/2;\r\n    }\r\n    printf(\"\\nThe new number in binary is \\n\");\r\n     for(int i=0; i<15; i++){\r\n        printf(\"%d\", b[i]);\r\n    }\r\n\r\n}\r\n\r\nvoid newNum(int a[]){\r\n    printf(\"\\nEnter an unsigned 16 bit binary number\\n\");\r\n    for(int i=0; i<16; i++){\r\n        scanf(\"%d\", &a[i]);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int bitNum[16];\r\n    int c;\r\n    srand(time(0));\r\n    for(int i=0; i<16; i++){\r\n        bitNum[i]= rand()%2; \/\/ array filling\r\n    }\r\n    printf(\"\\n------------------------------------------------------\\n\");\r\n    printf(\"The binary number is....\\n\");\r\n    for(int i=0; i<16; i++){\r\n        printf(\"%d\", bitNum[i]);\r\n    }\r\n    printf(\"\\n------------------------------------------------------\\n\");\r\n    for(int z=0;1;){\r\n        printf(\"\\n1.Display the  number in decimal format\\n\");\r\n        printf(\"2.Display the number in Hexadecimal format\\n  \");\r\n        printf(\"3.Display the  number in Octal format\\n\");\r\n        printf(\"4.Multiply the original binary number by 2  and display the result\\n\");\r\n        printf(\"5.Divide the original binary number by 2  and display the result \\n\");\r\n        printf(\"6.Enter new binary number\\n\");\r\n        printf(\"0. exit the loop\\n\");\r\n        printf(\"\\n------------------------------------------------------\\n\");\r\n        printf(\"Enter your choice\\n\");\r\n        scanf(\"%d\", &c);\r\n        printf(\"\\n------------------------------------------------------\\n\");\r\n\r\n        switch (c)\r\n        {\r\n        case 0:\r\n            return 0;\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        case 1:\r\n            b2d(bitNum);\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        case 2:\r\n            b2h(bitNum);\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        case 3:\r\n            b2o(bitNum);\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        case 4:\r\n            multiply2(bitNum);\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        case 5:\r\n            divide2(bitNum);\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        case 6:\r\n            newNum(bitNum);\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            break;\r\n        default:\r\n            printf(\"Invalid entry!!!\");\r\n            printf(\"\\n------------------------------------------------------\\n\");\r\n            return 0;\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Part-I\r\nSubmit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\n1. Take as input 2 positive integers a and b.\r\n\r\n2. Write a function digits(. . .) that takes as input a positive integer and returns the number of digits\r\nin that integer.\r\n\r\n3. Consider a positive integer of at least 3 digits. Let S be the set of digits appearing in the number,\r\nin the number multiplied by 2 and the number multiplied by 3. Suppose in S the digits from\r\n1-9 appear exactly once while 0s may appear multiple times. Then such a number is called a\r\nFascinating number.\r\nEg: 192 x 1 = 192, 192 x 2 = 384, 192 x 3 = 576.\r\nS = 1,9,2,3,8,4,5,7,6. Therefore, 192 is a Fascinating number. Similarly, 1920 is also a fascinating\r\nnumber.\r\nWrite a function isFascinating(. . .) that takes as input a positive integer and returns true if it is a\r\nFascinating number, false otherwise.\r\n\r\n4. A positive integer of n digits is called an Armstrong number if the sum of the n-th power of each\r\ndigit adds up to the number itself.\r\nEg: 153 is a 3 digit number; 153 = 13 + 53 + 33\r\nWrite a function isArmstrong(. . .) that takes as input a positive integer and returns true if it is an\r\nArmstrong number, false otherwise\r\n\r\n5. For each integer in the range [p, q], print whether it is a Fascinating number and\/or an Armstrong\r\nnumber, or neither.",
                    "Answer": "#include<stdio.h>\r\n#include<math.h>\r\n\r\n\r\n\/\/Task 2\r\n\r\nint digits(int n){ \/\/n is a positive integer which this function takes as input in it's parameter\r\n    int count_dig=0; \/\/Stores number of digits in n\r\n\r\n    while(n>0){\r\n        count_dig++;\r\n        n\/=10;\r\n    }\r\n\r\n    return count_dig; \/\/Number of digits in n is returned\r\n}\r\n\r\n\r\n\/\/Task 3\r\n\/\/Here the values returned from the function are 0 and 1. 0 indicates false and 1 true as evaluated internally by C\r\n\r\nint isFascinating(int n){ \/\/n is a positive integer which this function takes as input in it's parameter\r\n    int num1=n*2; \/\/Number obtained by multiplying n by 2\r\n    int num2=n*3; \/\/Number obtained by multiplying n by 3\r\n    int arr[10]; \/*Array to store number of times each digit from 0 to 9 appears in all the three numbers n , num1 and num2\r\n                 such that arr[i] stores number of times i occurs in all the three numbers*\/\r\n\r\n    for(int i=0; i<10; i++){\r\n        arr[i]=0; \/\/Initializing all the elements of the array with 0\r\n    }\r\n\r\n    \/\/Counting number of times each digit appears in n and adding the data in array arr\r\n    while(n>0){\r\n        int k=n%10; \/\/k stores each digit of n\r\n        arr[k]++;\r\n        n\/=10;\r\n    }\r\n\r\n    \/\/Counting number of times each digit appears in num1 and adding the data in array arr\r\n    while(num1>0){\r\n        int k=num1%10; \/\/k stores each digit of num1\r\n        arr[k]++;\r\n        num1\/=10;\r\n    }\r\n\r\n    \/\/Counting number of times each digit appears in num2 and adding the data in array arr\r\n    while(num2>0){\r\n        int k=num2%10; \/\/k stores each digit of num2\r\n        arr[k]++;\r\n        num2\/=10;\r\n    }\r\n\r\n    \/\/Checking the data accumulated in array arr\r\n    for(int i=1;i<=9;i++){\r\n        if(arr[i]!=1){\r\n            return 0; \/*If any one of the digits from 1 to 9 is not present exactly once then immediately 0 is returned\r\n                      because it violates the definition of Fascinating number. Number of time 0 occurs is not checked\r\n                      because by definition 0 can exist multiple times or not be present in the list of digits*\/\r\n        }\r\n    }\r\n\r\n    return 1; \/\/If all digits from 1 to 9 are present exactly once then the loop executes till last and 1 is returned\r\n}\r\n\r\n\r\n\/\/Task 4\r\n\/\/Here the values returned from the function are 0 and 1. 0 indicates false and 1 true as evaluated internally by C\r\n\r\nint isArmstrong(int n){ \/\/n is a positive integer which this function takes as input in it's parameter\r\n    int arm_num=0; \/\/arm_num stores the value of sum of, digits raised to the power number of digits\r\n    int n_dig=digits(n); \/\/n_dig stores the number of digits in n which it gets by calling the digits() function with n as its parameter\r\n    int temp=n; \/\/temp stores the value of n temporarily so that n is preserved for its comparison with arm_num later\r\n\r\n    while(temp>0){\r\n        int k=temp%10; \/\/k stores each digit of temp\r\n        arm_num+=(int)(pow(k,n_dig)); \/\/value of digit to the power of number of digits is type casted from double to int and added to arm_num\r\n        temp\/=10;\r\n    }\r\n\r\n    if(n==arm_num){ \/\/Checking the condition of being an Armstrong number\r\n        return 1;\r\n    }else{\r\n        return 0;\r\n    }\r\n}\r\n\r\n\r\n\r\nint main(){\r\n\r\n    \/\/Task 1\r\n\r\n    int a,b;\r\n    printf(\"Enter two positive integers a and b: \"); \/\/Taking input from user 2 positive integers\r\n    scanf(\"%d%d\",&a,&b);\r\n\r\n\r\n    \/\/Task 5\r\n\r\n    printf(\"Description of all numbers from %d to %d (both inclusive) as being Fascinating or Armstrong number or both or neither:\\n\",a,b);\r\n    \/\/One by one all the numbers from a to b are checked for being an Armstrong number or a Fascinating number or both or neither\r\n    for(int i=a;i<=b;i++){\r\n        \/\/isFascinating() and isArmstrong() return 0 or 1 which are evaluated as false or true respectively in if else conditions\r\n        if(isFascinating(i) && isArmstrong(i) && digits(i)>2){ \/\/For being a Fascinating number it must have atleast 3 digits\r\n            printf(\"%d is both Fascinating number and Armstrong number\\n\",i);\r\n        }else if(isFascinating(i) && digits(i)>2){ \/\/For being a Fascinating number it must have atleast 3 digits\r\n            printf(\"%d is a Fascinating number\\n\",i);\r\n        }else if(isArmstrong(i)){\r\n            printf(\"%d is an Armstrong number\\n\",i);\r\n        }else{\r\n            printf(\"%d is neither Fascinating nor Armstrong number\\n\",i);\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "We call a positive integer n a beautiful number if n is equal to the sum of its proper divisors (excluding\r\nn and including 1). For example, 6 is a beautiful number since 6 = 1 + 2 + 3. Given an integer n as\r\ninput write a program to print (i) all the proper divisors of n, (ii) is the number a prime or composite,\r\nand (iii) is the number a beautiful number or not.\r\n\r\nYou are not allowed to use any loop in today\u2019s program. Use recursion.\r\n\r\nSubmit one (single) C\/C++ program.\r\n\r\n\r\nSample Output\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out\r\nWrite n: 496\r\nThe proper divisors of 496 are 1, 2, 4, 8, 16, 31, 62, 124, 248,\r\n496 is a composite number\r\n496 is a beautiful number\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out\r\nWrite n: 387\r\nThe proper divisors of 387 are 1, 3, 9, 43, 129,\r\n387 is a composite number\r\n387 is not a beautiful number\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include<stdio.h>\r\n\r\nint divisor(int k, int n, int sum){ \/\/recursively calls itself with all numbers <=squareroot(n) where n is taken as parameter\r\n\r\n    \/\/k stores the value of all potential candidates which can be proper divisor of n till squareroot(n)\r\n    \/\/sum stores the sum of all the proper divisors of n\r\n\r\n    if(n==1){ \/\/special case of n=1 is handled with help this 'if' when 1 is returned to keep it wth prime numbers (1 is not a prime number)\r\n        return 1;\r\n    }\r\n\r\n    if(k*k>n){ \/\/base case of k>squareroot(n) where no more proper divisors of n which are more than this k exist so no need to check furthur\r\n        return 0; \/\/0 is returned which when added to sum, makes no change in sum\r\n    }\r\n\r\n    if(n%k==0){ \/\/case when k is a proper divisor of n\r\n\r\n        printf(\"%d, \",k); \/\/k is printed\r\n        sum=divisor(k+1,n,sum); \/\/recursive call is made to check if k+1 is also a proper divisor of n\r\n\r\n        \/*When the recursive call returns the following 'if' checks if k!=1 so that n\r\n        itself is not added to sum or printed and also checks if k is not equal to squareroot(n) so\r\n        that k is not added twice or printed twice*\/\r\n        if(k!=1 && n\/k!=k){\r\n            sum+=n\/k; \/\/if n\/k and k are distinct or k is not 1 then n\/k is added to sum as it is also a proper divisor of n\r\n            printf(\"%d, \",n\/k); \/\/this prints the proper divisor n\/k of n corresponding to the proper divisor k\r\n        }\r\n\r\n        sum+=k; \/\/k is added to sum since it is a proper divisor of n\r\n        return sum; \/\/new sum is returned to calling function\r\n\r\n    }else{ \/\/case when k is not a proper divisor of n\r\n\r\n        sum=divisor(k+1,n,sum); \/\/here next k+1 is called to see if it is a proper divisor of n\r\n        \/*once the function call returns to this else part nothing is added to sum since k is not a proper divisor of n\r\n        sum is passed down to calling function as it is*\/\r\n        return sum;\r\n\r\n    }\r\n\r\n}\r\n\r\nint main(){\r\n    \/\/n is taken as input from user\r\n    int n;\r\n    printf(\"Write n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/if statement to handle exceptions when user may by mistake enter n to be a non-positive integer at first\r\n    if(n<=0){\r\n        printf(\"This program expects n to be a positive integer\\n\");\r\n        printf(\"Enter n as a positive integer now (or else it will result in unexpected outputs) : \");\r\n        scanf(\"%d\",&n);\r\n    }\r\n\r\n    \/\/printing the proper divisors of n\r\n    printf(\"The proper divisors of %d are \",n);\r\n    int check; \/\/this is used to store sum of the proper divisors of n to check if n is a beautiful number\r\n    \/\/the following function call prints the proper divisors of n and at the same time returns the sum of all the proper divisor of n to check\r\n    check=divisor(1,n,0);\r\n    printf(\"\\n\"); \/\/line break so as print the result of n being a composite or beautiful number in next lines\r\n\r\n    if(check==1){\r\n\r\n        \/\/if n is a prime number or n=1(special case) then check gets the value 1. Prime numbers have only one proper divisor: 1\r\n        \/\/1 is not a beautiful number and neither are prime numbers because check=1 always for prime numbers\r\n        \r\n        if(n==1){\r\n            printf(\"%d is neither composite nor prime number\\n\",n); \/\/1 is neither prime nor composite\r\n        }else{\r\n            printf(\"%d is a prime number\\n\",n);\r\n        }\r\n        printf(\"%d is not a beautiful number\\n\",n);\r\n\r\n    }else if(check==n){\r\n\r\n        \/\/if check is same as n then it fulfills the condition of being a beautiful number and compsoite number at same time\r\n        \/\/this is beacuse all beautiful numbers are composite numbers since prime numbers or 1 cannot be beautiful number\r\n\r\n        printf(\"%d is a composite number\\n\",n);\r\n        printf(\"%d is a beautiful number\\n\",n);\r\n\r\n    }else{\r\n\r\n        \/\/else part arises only when a number is composite but it is not a beautiful number\r\n\r\n        printf(\"%d is a composite number\\n\",n);\r\n        printf(\"%d is not a beautiful number\\n\",n);\r\n\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a C function readData() which does the following : \nTake an integer n as the input from the user \nThe program then keeps on reading floating-point numbers from the user \nuntil the input value is within -1 < x < +1; this value is assigned to a floating-point variable x \nThen the program keeps on reading another set of floating-point numbers from the user \nuntil the input value is within -0.5 < a < 0.5; this value is assigned to a floating-point variable a.\nNow write the following two functions : \nfindSinx(x, n) : This function takes x and n as the input, and compute sin(x) with the value of x up to n terms. \nPrint the value of sin(x) \nfindSinA (a) : This function takes a as the input, and compute sin(a) up to k terms such that the result \nis accurate up to 10-4 approximation. This indicates that the value of sin(a) remains same up to the \n4 decimal position for k and (k+1) terms. Print the value of sin(a) and k (the number of terms) to achieve that value.",
                    "Answer": "#include <stdio.h>\r\n\r\nint readData(float arr[])\r\n{\r\n    int n;\r\n    int check=1,check2=1;\r\n    printf(\"enter the no. of terms :\");\r\n    scanf(\"%d\", &n);\r\n    \r\n    while (check == 1)\r\n    {\r\n        printf(\"\\nenter the integer between -1 to 1\\n\");\r\n        scanf(\"%f\", &arr[0]);\r\n        if (arr[0] < 1 && arr[0] > (-1))\r\n        {\r\n            check = 0;\r\n        }\r\n        else\r\n        {\r\n            printf(\"\\ninvalid input enter again\");\r\n        }\r\n    }\r\n    while (check2 == 1)\r\n    {\r\n        printf(\"\\nenter the integer between -0.5 to 0.5\\n\");\r\n        scanf(\"%f\", &arr[1]);\r\n        if (arr[1] < .5 && arr[1] > (-.5))\r\n        {\r\n            check2 = 0;\r\n        }\r\n        else\r\n        {\r\n            printf(\"\\ninvalid input enter again\");\r\n        }\r\n    }\r\n    return n;\r\n}\r\n\r\nint findSinX(float x,int n)\r\n{\r\n    float sinx;\r\n    for (int i = 1; i <= n; i++)\r\n    {\r\n\r\n        float fac = 1.0;\r\n        for (int j = 1; j <= (2 * i - 1); j++)\r\n        {\r\n            fac = fac * j;\r\n        }\r\n        if (i % 2 == 0)\r\n        {\r\n            sinx -= x \/ fac;\r\n        }\r\n        else\r\n        {\r\n            sinx += x \/ fac;\r\n        }\r\n        x *= x * x;\r\n    }\r\n    printf(\"sinx = %f\", sinx);\r\n    return 0;\r\n}\r\n\r\nint findSinA(float a)\r\n{\r\n    int k = 1;\r\n    while (1)\r\n    {\r\n\r\n        float y = a, z = a;\r\n        float sina = 0, sinb = 0, sinat, sinbt;\r\n        for (int i = 1; i <= k; i++)\r\n        {\r\n\r\n            float fac = 1.0;\r\n            for (int j = 1; j <= (2 * i - 1); j++)\r\n            {\r\n                fac = fac * j;\r\n            }\r\n            if (i % 2 == 0)\r\n            {\r\n                sina -= y \/ fac;\r\n            }\r\n            else\r\n            {\r\n                sina += y \/ fac;\r\n            }\r\n            y *= y * y;\r\n        }\r\n        for (int i = 1; i <= k + 1; i++)\r\n        {\r\n\r\n            float fac = 1.0;\r\n            for (int j = 1; j <= (2 * i - 1); j++)\r\n            {\r\n                fac = fac * j;\r\n            }\r\n            if (i % 2 == 0)\r\n            {\r\n                sinb -= z \/ fac;\r\n            }\r\n            else\r\n            {\r\n                sinb += z \/ fac;\r\n            }\r\n            z *= z * z;\r\n        }\r\n        sinat = sina * 10000;\r\n        int sa = (int)sinat;\r\n        sinbt = sinb * 10000;\r\n        int sb = (int)sinbt;\r\n        if (sa == sb)\r\n        {\r\n            printf(\"\\nsina = %0.4f\\nk=%d\", sina, k);\r\n            break;\r\n        }\r\n        else\r\n        {\r\n            ++k;\r\n            continue;\r\n        }\r\n    }\r\n    return 0;\r\n}\r\nint main()\r\n{\r\n    int n;\r\n    float arr[2];\r\n    n=readData(arr);\r\n    findSinX(arr[0],n);\r\n    findSinA(arr[1]);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "A string S is said to have a palindrome substring of length k (k must be > 1) if there is a substring P of length k in S\r\nwhich is a palindrome. For example, the string \u201Cabababc\u201D has two palindrome substrings of length 5 (\u201Cbabab\u201D\r\nand \u201Cababa\u201D). It also has several palindrome substrings of length 3 (eg., \u201Caba\u201D, etc). You are to read a string S and\r\nfind the largest k (k>1) such that there is a palindrome substring P of length k in S, and print P and k. (If there are\r\nmultiple such palindrome substrings of length k, print all of them). For this, you will write a non-recursive functiopal(S[],i,j) \nwhich takes as arguments address of a string array s and integer indices i and j and returns 1 if the\r\nsubstring formed by the i_th to j_th consecutive characters of S form a palindrome. Otherwise it returns 0. For \r\nexample if S \u201Cabababc\u201D, the call pal(S,2,6) will return 1 (since \u201Cbabab\u201D is a palindrome) while pal(S,1,4) will return\r\n0 (since \u201Cabab\u201D is not a palindrome). This function will be repeatedly called in the main program to solve the\r\nproblem. [Do not distinguish between upper and lower case]     \r\nSave the file as A10_<Roll Number>.c (example A10_21AG10002.c). Build, Run and Test it for the given data as well as\r\nyour own data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a string S and print it. Create a new line.\r\n2. Define and call the function pal appropriately to find all palindrome substrings of length k > 1 in S. Print each of\r\nthem along with their i, j indices.\r\n3. Find the largest palindrome substring  of k > 1 in s and print all of them. If no such, print \u201CNo such\u201D.\r\n4.\r\n[Bonus] If you complete these within the scheduled time, write the function pal in a recursive manner. Call it rpal\r\nand use appropriate parameters. Test it like you test pal. [Bonus will not add to assignment marks]\r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions]\r\nTest Data: ababababc,  Malayalam, Bengal, Tatlallay.",
                    "Answer": "#include <stdio.h>\r\n\r\nint pal(char S[],int i,int j)\r\n{\r\n    int k,test;\r\n    test=1;\r\n    for(k=0;k<((i+j)\/2);k++){\r\n        if(S[i+k]!=S[j-k]){\r\n            test=0;\r\n            {break;}\r\n        }\r\n    }\r\n    return test;\r\n}\r\n\r\nint rpal(char S[], int i, int j)\r\n{\r\n    int test;\r\n    test=1;\r\n    if(i>=j)return test;\r\n    if(S[i]!=S[j]){\r\n        test=0;\r\n        return test;\r\n    }\r\n    else if (S[i]==S[j]){\r\n       test=rpal(S,i+1,j-1);\r\n       return test;\r\n    }\r\n}\r\n\r\nint main(){\r\n    \/\/Declaring and intialising variables\r\n    char S[100];\r\n    int i,j,k,res,A[30],l,temp;\r\n    l=0;\r\n\r\n    \/\/Taking the string from user\r\n    printf(\"Enter a string S:\\n\");\r\n    scanf(\"%s\", S);\r\n    printf(\"%s\\n\", S);\r\n\r\n    \/\/Converting it to all lowercase\r\n    for(i=0;S[i]!='\\0';i++){\r\n        if((S[i]>='A')&&(S[i]<='Z'))S[i]=S[i]-'A'+'a';\r\n    }\r\n\r\n    \/\/for loop which checks for all possible palindromes\r\n    for(i=0;S[i]!='\\0';i++)\r\n        for(j=i+2;S[j]!='\\0';j++){\r\n            res=0;\r\n            res=pal(S,i,j);\r\n            if (res==1){\r\n                A[l]=j-i+1;\r\n                for(k=i;k<=j;k++)printf(\"%c\", S[k]);\r\n                printf(\"\\ti=%d,j=%d\\n\", i+1,j+1);\r\n                l++;\r\n            }\r\n        }\r\n\r\n    \/\/finding the length of the largest palindrome\r\n    temp=A[0];\r\n    for(i=1;i<l;i++){\r\n        if (A[i]>temp)temp=A[i];\r\n    }\r\n\r\n    \/\/Using the length to determine which palindrome are largest as there can be multiple\r\n    if (l!=0){\r\n        printf(\"The largest palindrome are:\\n\");\r\n    for(i=0;S[i]!='\\0';i++)\r\n        for(j=i+2;S[j]!='\\0';j++){\r\n            res=0;\r\n            res=pal(S,i,j);\r\n            if (res==1){\r\n                if ((j-i+1)==temp){\r\n                    for(k=i;k<=j;k++)printf(\"%c\", S[k]);\r\n                    printf(\"\\n\");\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    else printf(\"NO palindrome in the string\\n\");\/\/if no palindromes are found\r\n\r\n    printf(\"\\n\\nChecking using recursive function:\\n\\n\");\r\n    for(i=0;S[i]!='\\0';i++)\r\n        for(j=i+2;S[j]!='\\0';j++){\r\n            res=0;\r\n            res=rpal(S,i,j);\r\n            if (res==1){\r\n                A[l]=j-i+1;\r\n                for(k=i;k<=j;k++)printf(\"%c\", S[k]);\r\n                printf(\"\\ti=%d,j=%d\\n\", i+1,j+1);\r\n                l++;\r\n            }\r\n        }\r\n\r\n    \/\/finding the length of the largest palindrome\r\n    temp=A[0];\r\n    for(i=1;i<l;i++){\r\n        if (A[i]>temp)temp=A[i];\r\n    }\r\n\r\n    \/\/Using the length to determine which palindrome are largest as there can be multiple\r\n    if (l!=0){\r\n        printf(\"The largest palindrome are:\\n\");\r\n    for(i=0;S[i]!='\\0';i++)\r\n        for(j=i+2;S[j]!='\\0';j++){\r\n            res=0;\r\n            res=rpal(S,i,j);\r\n            if (res==1){\r\n                if ((j-i+1)==temp){\r\n                    for(k=i;k<=j;k++)printf(\"%c\", S[k]);\r\n                    printf(\"\\n\");\r\n                }\r\n            }\r\n\r\n        }\r\n    }\r\n    else printf(\"NO palindrome in the string\\n\");\/\/if no palindromes are found\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "You are to read in a positive integer n (n <= 20) and read n distinct positive integers into an array A. After that you are to\r\nrecursively reverse the digits of each number of A and store them a separate array B. You will then sort both the arrays\r\nrecursively, the original one (A) in ascending and one with reversed digits (B) in descending order. \nThen you will find themedian of the combined list of elements of both arrays (that is A and B). For this you will write appropriate recursive\r\nfunctions for (a) reversing a digit (b) sorting in ascending \/ descending order, with an argument for whether it is to be in\r\nascending or descending order, (c) finding the median of 2 sorted arrays. You will print all intermediate parts\r\nappropriately. \r\nSave the file as A11_<Roll Number>.c (example A11_21AG10002.c). Build, Run and Test it for the given data as well as your\r\nown data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a positive integer n and print it. Create a new line. Read in n positive integers in an array A and print them.\r\n2. Reverse the digits of each array element of A to create a new number and store these in another array B. You will write a\r\nrecursive function revdig(n) that reads an integer and returns a number with digits reversed (eg. 785 returns 587, 890\r\nreturns 98, 5 returns 5). \nYou will call function revdig in the main program to reverse all the elements of A and store them\r\nin B. Print the elements of the array B.\r\n3. Write a recursive sorting function rsort(\u2026.) with suitable arguments that you feel appropriate that takes an array and\r\nsorts it in ascending or descending order based on a binary variable called mode which is one of the parameters of rso\nYou will call function rsort appropriately twice in the main program, once to sort A in ascending order (mode = 0) and the\r\nto sort B in descending order (mode = 1) and print these arrays A and B after sorting.\r\n4. Write a recursive function rmed(\u2026.) with suitable arguments that you feel appropriate to find the median of all the \r\nelements of A and B. Call it from the main program and print the final median. \r\n[If you use non-recursive functions for any part where recursive functions are to be used, then the maximum you can get for \r\nthat part will 25% of the marks allotted for it. If you do not write any function for some part, you will get a 0 for that part.]\r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions.]\r\nTest Data: Test it with your own data",
                    "Answer": "#include <stdio.h>\r\n\r\n\/* This function returns a^b *\/\r\nint power(int a, int b)\r\n{\r\n    int d=1;\r\n    for (int i=1; i<=b; i++) d = d*a;\r\n    return d;\r\n}\r\n\r\n\/* This function returns the number of digits in x *\/\r\nint digit(int x)\r\n{\r\n    int k=0;\r\n    while (x>=1)\r\n    {\r\n        x\/=10;\r\n        k++;\r\n    }\r\n    return k;\r\n}\r\n\r\nint revdig(int n)\r\n{\r\n    if (n<10) return n;\r\n    else\r\n    \/* Taking out last digit, puting it to the starting then reversing the remaining number *\/\r\n    \/* If number is 1234, then it returns 4 + reverse(123), which 4321 *\/\r\n    return (n%10)*(power(10,digit(n)-1)) + revdig(n\/10);\r\n}\r\n\r\nvoid rsort(int mode, int z[], int st, int ed, int p)\r\n{\r\n    \/* Sorting z, here st stores starting index, ed stores ending index and p is the index to which we are comparing *\/\r\n    if (st>=ed) return;\r\n    else\r\n    {\r\n        int temp;\r\n        if ((!mode && z[p]<z[st]) || (mode && z[p]>z[st]))\r\n        {\r\n            temp = z[p];\r\n            z[p] = z[st];\r\n            z[st] = temp;\r\n        }\r\n        if (p==ed)\r\n        {\r\n            st++;\r\n            p=st;\r\n        }\r\n        else p++;\r\n        rsort(mode,z,st,ed,p);\r\n        return;\r\n    }\r\n}\r\n\r\nfloat rmed(int x[], int st, int ed)\r\n{\r\n    if (ed-st==1) return (float)(x[st]+x[ed])\/2;\r\n    else if (ed==st) return x[st];\r\n    else return rmed(x,st+1,ed-1);\r\n}\r\n\r\nint main()\r\n{\r\n    \/* Taking input data from the user and printing it *\/\r\n    int n, A[20], B[20];\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n    printf(\"n = %d\\n\",n);\r\n\r\n\r\n    printf(\"Enter the Array A: \");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        scanf(\"%d\", &A[i]);\r\n        \/* Reversing digits in A and storing in B *\/\r\n        B[i] = revdig(A[i]);\r\n    }\r\n\r\n    \/* Printing unsorted Arrays *\/\r\n    printf(\"\\nArray A: \");\r\n    for (int i=0; i<n; i++) if (i==n-1) printf(\"%d\",A[i]); else printf(\"%d, \",A[i]);\r\n    printf(\"\\nArray B: \");\r\n    for (int i=0; i<n; i++) if (i==n-1) printf(\"%d\",B[i]); else printf(\"%d, \",B[i]);\r\n\r\n    \/* Sorting the arrays and printing them *\/\r\n    rsort(0,A,0,n-1,0);\r\n    rsort(1,B,0,n-1,0);\r\n    printf(\"\\n\\nAfter Sorting:\");\r\n    printf(\"\\nArray A: \");\r\n    for (int i=0; i<n; i++) if (i==n-1) printf(\"%d\",A[i]); else printf(\"%d, \",A[i]);\r\n    printf(\"\\nArray B: \");\r\n    for (int i=0; i<n; i++) if (i==n-1) printf(\"%d\",B[i]); else printf(\"%d, \",B[i]);\r\n\r\n    \/* Storing combined array A and B in C, then sorting C so that we can find its median *\/\r\n    int C[40],t=0;\r\n    for (; t<n; t++) C[t] = A[t];\r\n    for (; t<2*n; t++) C[t] = B[t-n];\r\n    rsort(0,C,0,2*n-1,0);\r\n\r\n    \/* Finding the median and printing it *\/\r\n    printf(\"\\n\\nMedian of combination Array A and B = %.1f\\n\\n\", rmed(C,0,2*n-1));\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Read a positive integer n (n <= 20) and print it. Read the elements of an n by n 2-D matrix in which every element is\r\ndistinct. Print the array elements neatly row-wise. Then read in a positive integer k and find the k-th largest\r\nelement in the matrix (without moving the matrix elements from their locations) and print the k-th largest element\r\nalong with its location index [i,j]. Next, you will sort all the elements of each row separately in ascending order\r\nand print the array column-wise (that is first printed line is column 1, 2\r\nnd\r\nprinted line is column 2 and so on) after\r\nall rows are sorted. Now you will find the new location of the k-th largest element [p,q] and print it. \r\n[It is recommended that you write your own functions for k-th largest and sorting, most preferably recursive functions. \nIf you do not use your own functions you will get at most 10 marks if your code is correct. \nIf you use correct non-\r\nrecursive functions for finding k-th largest and sorting, you will get 3 additional marks for each and so a possible \r\nmaximum of 16. If you write correct recursive functions for finding k-th largest and sorting, you will get 5\r\nadditional marks each and so a possible maximum of 20.] \r\nSave the file as A12_<Roll Number>.c (example A12_21AG10002.c). Build, Run and Test it for the given data as well as\r\nyour own data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a positive integer n and print it suitably. Create a new line.\r\n2. Read in an n by n matrix into a 2-D array and print it row-wise. Create a new line.\r\n3. Read in an integer k and find the k-th largest element of the matrix using a function largek(\u2026.) with appropriate\r\narguments, and print it along with its location index. If k is more than the number of elements of the matrix or less\r\nthan 1, print a suitable message.\r\n4. Sort each row of the array separately using a function sortr(\u2026) with appropriate arguments,  in ascending order\r\nand print this version in a column-wise manner.\r\n5. Find the new location of the k-th largest element in the updated array and print the location index.\r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions]\r\nTest Data: Test it with your own data",
                    "Answer": "#include <stdio.h>\r\n\r\nvoid sortr(int z[], int st, int ed, int p)\r\n{\r\n    if (st>=ed) return;\r\n    else\r\n    {\r\n        int temp;\r\n        if (z[p]<z[st])\r\n        {\r\n            temp = z[p];\r\n            z[p] = z[st];\r\n            z[st] = temp;\r\n        }\r\n        if (p==ed)\r\n        {\r\n            st++;\r\n            p=st;\r\n        }\r\n        else p++;\r\n        sortr(z,st,ed,p);\r\n        return;\r\n    }\r\n}\r\n\r\nint largek(int k, int x[], int size)\r\n{\r\n    int max_index=0;\r\n    for (int i=0; i<size; i++)\r\n    if (x[max_index]<x[i]) max_index = i;\r\n\r\n    if (k==1) return x[max_index];\r\n    else\r\n    {\r\n        x[max_index] = -2,147,483,648;\r\n        return largek(k-1,x,size);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    \/* Taking input data from the user and printing it *\/\r\n    int n, k, lk, k_row, k_column, a[20][20], b[400];\r\n    printf(\"Enter the value of n: \");\r\n    scanf(\"%d\",&n);\r\n    printf(\"n = %d\\n\",n);\r\n\r\n    printf(\"Enter the 2-D matrix:\\n\");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        printf(\"Row %d: \",i+1);\r\n        for (int j=0; j<n; j++)\r\n        scanf(\"%d\",&a[i][j]);\r\n    }\r\n\r\n    printf(\"\\nMatrix Entered:\");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        printf(\"\\nRow %d: \",i+1);\r\n        for (int j=0; j<n; j++)\r\n        printf(\"%d \", a[i][j]);\r\n    }\r\n\r\n    for (int i=0; i<n; i++)\r\n    for (int j=0; j<n; j++)\r\n    b[i*n+j] = a[i][j];\r\n\r\n    printf(\"\\n\\nEnter the value of k to find k-th largest integer: \");\r\n    scanf(\"%d\",&k);\r\n    if (k>n*n || k<1) printf(\"Error: Invalid value of k was entered!\\n\");\r\n    else\r\n    {\r\n        lk = largek(k,b,n*n);\r\n        printf(\"\\nk-th largest element of the matrix = %d\\n\", lk);\r\n        for (int i=0; i<n*n; i++)\r\n        if (b[i]==lk)\r\n        {\r\n            k_row = (i\/n)+1;\r\n            k_column = (i%n)+1;\r\n        }\r\n        printf(\"Location indeces ([row,column]): [%d,%d]\", k_row, k_column);\r\n    }\r\n\r\n    for (int i=0; i<n; i++)\r\n    sortr(a[i],0,n-1,0);\r\n\r\n    printf(\"\\n\\nSorted matrix printing column-wize:\");\r\n    for (int i=0; i<n; i++)\r\n    {\r\n        printf(\"\\nColumn %d: \",i+1);\r\n        for (int j=0; j<n; j++)\r\n        printf(\"%d \", a[j][i]);\r\n    }\r\n    for (int i=0; i<n; i++)\r\n    if (a[k_row-1][i]==lk) k_column = i+1;\r\n    printf(\"\\n\\nNew location indeces of k-th largest element ([row,column]): [%d,%d]\\n\\n\",  k_row,k_column);\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to check if the two numbers form a Zazzy pair or not. Two numbers are said\r\nto be Zazzy pair, if they satisfy the following criteria as given below:\r\n(a) Both the numbers should have the same number of digits and their length (number of\r\ndigits) is even.\r\n(b) The number formed from the digits of the first half of the first number (MSB side) is\r\nequal to the reverse of the number formed from the second half of the digits of the second\r\nnumber (LSB side).\r\nYou must use two functions for solving this question,\r\n(a) int checkDigit(int,int) - to check (i) whether two numbers have the same number of digits\r\nor not and (ii) Whether their length is even or not\r\n(b) int isZazzy(int,int) - to check whether the two numbers form a zazzy pair or not. [30]\r\nExample 1:\r\nInput:\r\nNumber 1 = 123456\r\nNumber 2 = 675321\r\nOutput:\r\nZazzy pair\r\n\r\n[Reason: The number formed from the digits of the first half of the first number, i.e \u2018123\u2019 is equal\r\nto the reverse of the number formed from the digits of the last half of the second number, i.e \u2018321\u2019]\r\nExample 2:\r\nInput:\r\nNumber 1= 123456\r\nNumber 2= 321654\r\nOutput:\r\nNot a Zazzy pair\r\nExample 3:\r\nInput:\r\nNumber 1 = 12345\r\nNumber 2 = 54321\r\nOutput:\r\nNot a Zazzy pair\r\nHint:\r\nTo provide you with an additional help as to how to frame and formulate your code using\r\nfunctions for this question, consider the code snippet below. Make careful observations as to\r\nhow you call the appropriate functions at the appropriate places and handle the return values,\r\nif any.\r\n\r\n1 #include<stdio.h>\r\n2\r\n3 int checkDigit(int,int); \/\/Function declaration\r\n4 int isZazzy(int,int); \/\/Function declaration\r\n5\r\n6 int main()\r\n7 { \/\/First, input the two numbers, say the input \u2190-\r\nare stored in variables n and m respectively.\r\n8 \/\/Next proceed to compute for Zazzy pair if and \u2190-\r\nonly if the two numbers satisfy conditions a \u2190-\r\nand b of the question.\r\n\r\n9\r\n10 int flag = 0;\r\n11\r\n12 if(checkDigit(n,m) == 1)\r\n13 { \/\/Now check whether the two numbers are Zazzy or \u2190-\r\n\r\nnot\r\n\r\n14 if(isZazzy(n,m) == 1)\r\n15 {\r\n16 flag = 1;\r\n17 }\r\n18 else\r\n19 {\r\n20 flag = 0;\r\n21 }\r\n22 }\r\n23\r\n24 else\r\n25 {\r\n26 flag = 0;\r\n27 } \/\/Now if flag == 1, then numbers are Zazzy, so \u2190-\r\n\r\nprint accordingly, else print not Zazzy.\r\n\r\n28 } \/\/end of main()\r\n29\r\n30 int checkDigit(int n, int m)\r\n31 { \/\/Returns 1 if two numbers passed as parameters \u2190-\r\nare of equal length and even number of digits, 0 \u2190-\r\notherwise\r\n\r\n32 }\r\n33\r\n34 int isZazzy(int n, int m)\r\n35 { \/\/Returns 1 if n and m passed as parameters form \u2190-\r\n\r\na Zazzy pair, 0 otherwise\r\n\r\n36 }",
                    "Answer":"\/\/ Program 1\r\n\r\n#include<stdio.h>\r\n#include<math.h>\r\n\r\nint checkDigit(int,int); \/\/Function declaration\r\nint isZazzy(int,int); \/\/Function declaration\r\n\r\nint main()\r\n{\r\n    \/\/First, input the two numbers, say the input are stored in variables n and m respectively.\r\n    long long int n, m;\r\n    printf(\"Enter two numbers.\\n\");\r\n    scanf(\"%lld%lld\", &n, &m);\r\n\r\n    \/\/Next proceed to compute for Zazzy pair if and only if the two numbers satisfy conditions a and b of the question.\r\n    int flag = 0;\r\n    if(checkDigit(n,m) == 1)\r\n    {\r\n        \/\/Now check whether the two numbers are Zazzy or not\r\n        if(isZazzy(n,m) == 1)\r\n        {\r\n            flag = 1;\r\n        }\r\n        else\r\n        {\r\n            flag = 0;\r\n        }\r\n    }\r\n    else\r\n    {\r\n        flag = 0;\r\n    }\r\n\r\n    \/\/Now if flag == 1, then numbers are Zazzy, so print accordingly, else print not Zazzy.\r\n    printf((flag == 1) ? \"Numbers form a Zazzy pair.\\n\" : \"Numbers do not form a Zazzy pair.\\n\");\r\n    return 0;\r\n} \/\/end of main()\r\n\r\nint checkDigit(int n, int m)\r\n{\r\n    \/\/Returns 1 if two numbers passed as parameters are of equal length and even number of digits, 0 otherwise\r\n    int length_n = 0, length_m = 0; \/\/ length_n : Stores number of digits in n , length_m : Stores number of digits in m\r\n\r\n    for (int i = 0; n > 0; n \/= 10) \/\/ Computing the number of digits in n\r\n        length_n++;\r\n    for (int i = 0; m > 0; m \/= 10) \/\/ Computing the number of digits in m\r\n        length_m++;\r\n\r\n    return (length_n == length_m) ? (length_n % 2 == 0) ? 1 : 0 : 0; \/\/ (n and m are of same length) ? {(number of digits is even) ? return 1 : return 0} : return 0\r\n}\r\n\r\nint isZazzy(int n, int m)\r\n{\r\n    \/\/Returns 1 if n and m passed as parameters form a Zazzy pair, 0 otherwise\r\n    int length = 0, copy = n, num = 0; \/\/ length : Stores number of digits of n and m , copy : Stores a copy of n's value , num : Stores reversed form of last half of m\r\n\r\n    for (int i = 0; copy > 0; copy \/= 10) \/\/ Computing the number of digits in n and m\r\n        length++;\r\n    for (int i = length; i > length \/ 2; i--) \/\/ Computing reversed form of last half of m and storing it in num\r\n    {\r\n        num = num * 10 + m % 10;\r\n        m \/= 10;\r\n    }\r\n\r\n    return (num == n \/ (int)pow(10, length \/ 2)) ? 1 : 0; \/\/ If num equals first half of m return 1 ,else return 0\r\n}"
                },
                {
                    "Question":"Consider a standard deck of cards containing 52 playing cards divided into four sets of spades,\r\n\r\nheart, diamond and clubs, with each set containing 13 cards, nine number cards with the num-\r\nbers \u20182\u2019 to \u201810 printed on them and four letter cards with the letters \u2018A (Ace)\u2019, \u2018J (ack)\u2019, \u2018K\r\n\r\n(King)\u2019 and \u2018Q (Queen)\u2019 printed on them. Now for simplicity, consider the number card \u201810\u2019\r\nremoved from each set, so each set now contains 12 cards in total. Three siblings Alice, Bob,\r\nSarah play a game, where five cards are randomly picked from the deck of cards and given to\r\none of them. In the same manner, five cards are given to each of the remaining two players.\r\nThe player with the highest sum of the cards wins the game. The cards J (Jack), K (King),\r\nQ (Queen), A (Ace) have values of 11, 12, 13 and 1 respectively. For winning the game, only\r\nthe sum of the card values matter, their corresponding set does not matter. Write a C program\r\nfollowing the below points to play this game.\r\n\r\n(a) Write a C function int counting cards(char arr[ ]) that computes the sum of the cards\r\nof a player as per the character array passed as argument.\r\n(b) Take three character arrays (char Alice[5], char Bob[5], and char Sarah[5]) to take the cards\r\ndistributed to each sibling and find the winner. Your input should be either from \u20182\u2019 to \u20189\u2019\r\n(as characters, not int) for denoting the number cards (note that card number \u201810\u2019 has been\r\nremoved) or \u2018A\u2019, \u2018J\u2019, \u2018K\u2019 and \u2018Q\u2019 for the four letter cards, for each of the three siblings. You\r\nmust call int counting cards(char arr[]) from main() for each of the three siblings, determine\r\nthe winner and display the winner in main() itself. In case there is a tie among sum values\r\nfor any two or all of the siblings, simply print \u2018game tied\u2019. [30]\r\nExample 1:\r\nInput:\r\nAlice: AJ23K\r\nBob: 234Q8\r\nSharah: 12678\r\nOutput:\r\nAlice total: 29\r\nBob total: 30\r\nSarah total: 24\r\nBob wins!",
                    "Answer":"#include <stdio.h>\r\n\r\nchar Alice[5], Bob[5], Sarah[5];\r\nint counting_cards (char arr[ ]);\r\n\r\nint main()\r\n{\r\n    \/\/ Prompting user for input of Cards gotten by the siblings and storing them in the respective strings.\r\n    printf(\"Enter the cards Alice has got.\\n\");\r\n    scanf(\"%s\", &Alice);\r\n    printf(\"Enter the cards Bob has got.\\n\");\r\n    scanf(\"%s\", &Bob);\r\n    printf(\"Enter the cards Sarah has got.\\n\");\r\n    scanf(\"%s\", &Sarah);\r\n\r\n    \/\/ Computing the sum of cards of the three siblings and storing them in their respective variables.\r\n    \/\/ a : Alice , b : Bob , s : Sarah\r\n    int a = counting_cards(Alice), b = counting_cards(Bob), s = counting_cards(Sarah);\r\n\r\n    \/\/ Printing the sum of cards of the three siblings.\r\n    printf(\"\\nTotal of Alice's cards is %d.\\n\", a);\r\n    printf(\"Total of Bob's cards is %d.\\n\", b);\r\n    printf(\"Total of Sarah's cards is %d.\\n\\n\", s);\r\n\r\n    \/\/ Printing the final result of the game\r\n    \/\/ As stated in problem statement,  if there is TIE AMONG SUM VALUES FOR ANY TWO SIBLINGS\r\n    if (a == b || b == s || s == a)\r\n        printf(\"Game tied.\\n\");\r\n    \/\/ If all three sum values are distinct\r\n    else\r\n    {\r\n        printf((a > b) ? (a > s) ? \"Alice\" : \"Sarah\" : (b > s) ? \"Bob\" : \"Sarah\");\r\n        printf(\" wins!\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nint counting_cards (char arr[ ])\r\n{\r\n    \/\/ Stores the sum value of cards.\r\n    int sum = 0;\r\n\r\n    \/\/ Checks each character in the string.\r\n    for (int i = 0; i < 5; i++)\r\n        switch (arr[i])\r\n        {\r\n            case 'A' : sum += 1;\r\n                       break;\r\n            case '2' : sum += 2;\r\n                       break;\r\n            case '3' : sum += 3;\r\n                       break;\r\n            case '4' : sum += 4;\r\n                       break;\r\n            case '5' : sum += 5;\r\n                       break;\r\n            case '6' : sum += 6;\r\n                       break;\r\n            case '7' : sum += 7;\r\n                       break;\r\n            case '8' : sum += 8;\r\n                       break;\r\n            case '9' : sum += 9;\r\n                       break;\r\n            case 'J' : sum += 11;\r\n                       break;\r\n            case 'K' : sum += 12;\r\n                       break;\r\n            case 'Q' : sum += 13;\r\n                       break;\r\n        }\r\n\r\n    return sum;\r\n}"
                },
                {
                    "Question":"Two rectangles are said to overlap if there exists a common point lying inside or on the boundary\r\nof both rectangles.Assume that all rectangles have edges parallel to the x and y axes, \nand all rectangles lie completely within the first quadrant itself (i.e their corner point coordinates are all positive numbers). \nThe rectangle can be represented by a pair of diagonal points (x1, y1) and (x2, y2), using an array rect[4] = {x1, y1, x2, y2}.\r\n(a) Write a C function int overlap(float [ ], float [ ]) that receives the diagonally opposite\r\ncorner points of two rectangles as arguments. The function returns 1 if the rectangles\r\noverlap, otherwise 0.\r\n(b) Write a main() program that reads the values of coordinates of diagonally opposite corner\r\npoints for three rectangles r1, r2 and r3 . For coordinates, consider floating point numbers\r\nas well. Hence, for the three rectangles, consider each unique pair of rectangles and print\r\nwhether the pair overlaps or not. Call the function int overlap(float [ ], float [ ]) to check\r\nfor each pair. For output, simply print the rectangle pair and its overlap status. [40]\r\nFor example:\r\n(r1, r2) \u2014 Overlaps\r\n(r1, r3) \u2014 Does not overlap\r\n(r2, r3) \u2014 Overlaps\r\nIf all the 3 pairs of rectangles overlap, then you may print (r1, r2, r3) - overalp",
                    "Answer":"#include <stdio.h>\r\n\r\nint overlap(float [ ], float [ ]);\r\nint inside (float [ ], float, float);\r\n\r\nint main()\r\n{\r\n    \/\/ Stores the co-ordinates of the diagonal points of each of the three rectangles.\r\n    float arr1[4], arr2[4], arr3[4];\r\n\r\n    \/\/ Prompting user for input of co-ordinates of the diagonal points of each of the three rectangles.\r\n    printf(\"Enter the co-ordinates of the diagonal points of the first rectangle.\\n\");\r\n    for (int i = 0; i < 4; i++)\r\n        scanf(\"%f\", &arr1[i]);\r\n    printf(\"Enter the co-ordinates of the diagonal points of the second rectangle.\\n\");\r\n    for (int i = 0; i < 4; i++)\r\n        scanf(\"%f\", &arr2[i]);\r\n    printf(\"Enter the co-ordinates of the diagonal points of the third rectangle.\\n\");\r\n    for (int i = 0; i < 4; i++)\r\n        scanf(\"%f\", &arr3[i]);\r\n\r\n    \/\/ Computing if the three rectangles overlap and storing result in respective variables.\r\n    \/\/ rij : Stores whether rectangle i and rectangle j overlap. If they overlap rij equals 1, else equals 0\r\n    int r12 = overlap(arr1, arr2), r23 = overlap(arr2, arr3), r31 = overlap(arr3, arr1);\r\n\r\n    \/\/ Printing final result of overlapping of rectangles.\r\n    \/\/ Since rij can take only 0 or 1, only if r12 = r23 = r31 = 1, will below condition be satisfied.\r\n    if (r12 * r23 * r31 == 1)\r\n        printf(\"All three rectangles overlap.\\n\");\r\n    \/\/ If all three rectangles don't overlap with each other\r\n    else\r\n    {\r\n        printf((r12 == 1) ? \"Rectangles 1 and 2 overlap.\\n\" : \"Rectangles 1 and 2 do NOT overlap.\\n\");\r\n        printf((r23 == 1) ? \"Rectangles 2 and 3 overlap.\\n\" : \"Rectangles 2 and 3 do NOT overlap.\\n\");\r\n        printf((r31 == 1) ? \"Rectangles 3 and 1 overlap.\\n\" : \"Rectangles 3 and 1 do NOT overlap.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\/\/ Returns 1 if rectangles given by a and b overlap.\r\nint overlap(float a[ ], float b[ ])\r\n{\r\n    return (inside(a, b[0], b[1]) || inside(a, b[0], b[3]) || inside(a, b[2], b[3]) || inside(a, b[2], b[1])) ? 1 : 0;\r\n    \/\/ If any of the 4 vertices of rectangles given by b[] lies inside rectangle given by a[], the rectangles are overlapping.\r\n    \/\/ So, we check using inside() function for each of the 4 vertices of b[], and even if one of them is true, the rectangles are overlapping.\r\n}\r\n\r\n\/\/ Returns 1 if point with co-ordinates (x,y) lies inside rectangle given by a[], else gives 0.\r\nint inside (float a[ ], float x, float y)\r\n{\r\n    return ((x - a[0]) * (x - a[2]) <= 0) ? ((y - a[1]) * (y - a[3]) <= 0) ? 1 : 0 : 0;\r\n    \/\/ (x - a[0]) * (x - a[2]) <= 0 only if x lies between a[0] and a[2] (both inclusive) --> Condition 1\r\n    \/\/ (y - a[1]) * (y - a[3]) <= 0 only if y lies between a[1] and a[3] (both inclusive) --> Condition 2\r\n    \/\/ If conditions 1 and 2 are satisfied, (x,y) lies inside or on rectangle given by a[].\r\n}"
                },
                {
                    "Question":"Consider the following recursive formula for calculating the n\u2019th term of a series,\r\n\r\nan = 2 \u2217 (an\u22121) + 3 \u2217 (an\u22122), a0 = 1, a1 = 1\r\n\r\nThe first few terms of the sequence (starting from a0) is 1, 1, 5, 13, 41, 121. . . ..Write a C\r\nprogram to input a number \u2018n\u2019 less than 20 and print the value of an . You must call a recursive\r\nfunction to calculate the value of an. Also in main(), you must keep a check that the input value\r\nof \u2018n\u2019 must be less than 20. If the input is greater than 20, then the program must display error\r\n\u2018Out of Range\u2019 and wait for the user to enter a valid input again.",
                    "Answer":"#include<stdio.h>       \/\/HEADER FILE FOR INPUT-OUTPUT\r\nint seq(int);               \/\/FUNCTION DECLARATION FOR COMPUTING THE VALUE OF A(N)\r\nint main()            \/\/MAIN() FUNCTION\r\n{\r\n   \/\/DECLARATION OF VARIABLES\r\n   int n=0;             \/\/INPUT VARIABLES\r\n   long int A=0;         \/\/OUTPUT VARIABLES\r\n\r\n   \/\/INPUT\r\n   printf(\"\\nENTER THE VALUE OF n (NO. OF TERM) AND IT MUST BE LESS THAN 20 : \");\r\n   scanf(\"%d\",&n);\r\n   while(n>20)          \/\/FOR MAINTAINNG THE VALUE OF N LESS THAN 20\r\n   {\r\n       printf(\"\\nOUT OF RANGE!!!\\n\\n\");\r\n       printf(\"\\nENTER THE VALUE OF n (NO. OF TERM) AND IT MUST BE LESS THAN 20 : \");\r\n       scanf(\"%d\",&n);\r\n   }\r\n\r\n   \/\/COMPUTATION\r\n   for(int i = 0; i<= n ;i++)\r\n   {\r\n        \/\/CALLING THE RECURSIVE FUNCTION TO PRINT THE SERIES ONE BY ONE\r\n        printf(\"%d  \",seq(i));\r\n   }\r\n\r\n   printf(\"\\n\");\r\n\r\n\r\n   return 0;      \/\/RETURNING A VALUE\r\n}\r\nint seq(int n)     \/\/FUNCTION DEFINATION FOR COMPUTING THE VALUE OF A(N)\r\n{\r\n    if(n==0)            \/\/BASE CASE\r\n    {\r\n       return 1;\r\n    }\r\n    else if (n==1)      \/\/BASE CASE\r\n    {\r\n       return 1;\r\n    }\r\n    else\r\n    {\r\n        return((2* seq(n-1))+(3*seq(n-2)));  \/\/CALLING THE FUMCTION RECURSIVELY  TO FIND THE SERIES\r\n    }\r\n\r\n}"
                },
                {
                    "Question":"Take an integer array as input from the user. Write a recursive function to find the absolute\r\ndifference of the consecutive two elements in that array from beginning to end of the array. To\r\nsolve this problem, you need to write 2 functions: Function-1 computes the absolute difference\r\nbetween 2 numbers and returns the same. Function-2 is a recursive function which computes\r\nthe successive differences between the elements of an array from beginning to end of an array.\r\nFunction-2 uses the Function-1 for calculating the difference between 2 numbers, and it should\r\ntake only the integer array and its size as input arguments.\r\nExample:\r\nEnter the number of elements of the array: 6\r\nEnter a number: 12\r\nEnter a number: 23\r\nEnter a number: 34\r\nEnter a number: 45\r\nEnter a number: 56\r\nEnter a number: 67\r\nThe absolute difference of 12 and 23 is: 11\r\nThe absolute difference of 23 and 34 is: 11\r\nThe absolute difference of 34 and 45 is: 11\r\nThe absolute difference of 45 and 56 is: 11\r\nThe absolute difference of 56 and 67 is: 11",
                    "Answer":"#include<stdio.h>   \t\t\/\/HEADER FILE FOR INPUT-OUTPUT\r\nint F1(int , int);          \/\/FUNCTION DECLARATION FOR THE FUNCTION THE RETURN THE ABSOLUTE DIFFERENCE\r\nint F2(int [],int);        \/\/FUNCTION DECLARATION FOR THE RECURSIVE FUNCTION TO PRINT THE ABS. DIFFENCE BETWEEN SUCCESSIVE ENTRY\r\nint main()         \t\t\/\/MAIN() FUNCTION\r\n{\r\n   \/\/DECLARATION OF VARIABLES\r\n   int ar[100],n=0;         \/\/INPUT VARIABLES\r\n\r\n   \/\/INPUT\r\n   printf(\"\\nENTER THE SIZE OF THE ARRAY(n) :\");\r\n   scanf(\"%d\",&n);\r\n   printf(\"\\nENTER THE VALUES IN THE ARRAY:\\n\");\r\n   for(int i=0;i<n;++i)\r\n   {\r\n       printf(\"Element %d : \",i+1);\r\n       scanf(\"%d\",&ar[i]);\r\n   }\r\n   F2(ar,n);                \/\/CALLING THE FUNCTION TO PRINT THE ABS. DIFFERENCE BETWEEN SUCCCESSIVE ENTRY\r\n   printf(\"\\n\");            \/\/JUST PRINTING NEW LINE IN ORDER TO IMPROVE READIBILITY OF THE OUTPUT, JUST TO HAVE A LINE GAP BETWEEN\r\n                            \/\/ OUTPUT AND THE EXECUTION MESSAGE\r\n   return 0;      \/\/RETURNING A VALUE\r\n}\r\nint F1(int a, int b)              \/\/FUNCTION DEFINATION FOR THE FUNCTION THE RETURN THE ABSOLUTE DIFFERENCE\r\n{\r\n    return(b-a);                \/\/RETURNING THE VALUE B-A WHERE A,B ARE SUCCESSIVE ENTRY IN THE ENTERED ARRAY AND B>A\r\n}\r\nint F2(int A[],int n)            \/\/FUNCTION DEFINATION FOR THE RECURSIVE FUNCTION TO PRINT THE ABS. DIFFENCE BETWEEN SUCCESSIVE ENTRY\r\n{\r\n    static int i=0;             \/\/STATIC SO THAT THE MEMORY LOCATION DOESN'T CHANGE,SO CHANGE IN THIS VALUE WILL BE REMEMBERED EVEN IN\r\n                                \/\/ CALLING THE FUNCTION RECURSIVELY\r\n    int absdif=0;\r\n    if(i==n-1)                  \/\/BASE CASE\r\n        return 1;\r\n\r\n    \/\/CHECKING WHICH IS ONE GREATER OF THE SUCCESSIVE PAIR,AS F1 TAKES A,B SUCH THAT B>A ONLY\r\n    if(A[i+1]>A[i])\r\n        absdif=F1(A[i],A[i+1]);\r\n    else\r\n        absdif=F1(A[i+1],A[i]);\r\n\r\n    \/\/PRINTING THE ABS. DIFFERENCE BETWEEN SUCCESSIVE ENTRY\r\n    printf(\"\\nTHE ABSOLUTE DIFFERENCE OF %d AND %d IS :%d\",A[i],A[i+1],absdif);\r\n    ++i;                \/\/ CHANGING i IN ORDER TO MOVE IN THE ARRAY,SO THAT NEXT SUCCESSIVE DIFFERENCE CAN BE COMPUTED\r\n    F2(A,n);            \/\/CALLING F2 RECURSIVELY\r\n}\r\n"
                },   
                {
                    "Question":"Write a C program using recursive functions to compute the binary equivalent for a given deci-\r\nmal fractional number.\r\n\r\n[Hint: In the first step, separate integer and decimal parts of a given decimal fractional num-\r\nber. For each part write a separate C recursive function. void int to bin(int, int[ ]), void\r\n\r\nfrac to bin(int, int[ ]). Consider the max size of the array is 16 for storing the binary equivalents\r\nof integer and fractional parts. While printing the binary equivalent of a given decimal fractional\r\nnumber in the main(), only required portions of binary digits to be displayed.]\r\nExample:\r\nEnter a decimal number\r\n13.625\r\ninteger part 13\r\ndecimal part 0.625000\r\nBinary equivalent:\r\n1101.101",
                    "Answer":"\/*program using recursive functions to compute the binary \r\nequivalent for a given decimal fractional number.*\/\r\n#include<stdio.h>\r\n\r\n\/\/to convert integer to binary\r\n\r\nstatic int c1 = 0;\r\nstatic int c2 = 0;\r\nvoid int_to_bin(int n,int a[])\r\n{\r\n    \r\n    if(n==0)\r\n    {\r\n    a[c1]=0;\r\n    }\r\n    else\r\n    {\r\n        a[c1]=(n%2);\r\n        c1++;\r\n        int_to_bin(n\/2,a);   \/\/recursive call\r\n    }\r\n    \r\n\r\n}\r\n\r\n\/\/to convert fractional part to array\r\nvoid frac_to_bin(double n, int a[])\r\n{\r\n    \r\n    \r\n    n=n*2.0;\r\n    if(n>1.0){\r\n        a[c2]=1;\r\n        n = (n-(int)n);\r\n        c2++;\r\n        frac_to_bin(n,a);}  \/\/The recursive call\r\n    else if(n==1.0)\r\n    {\r\n        a[c2]=1;    \r\n    }\r\n    else\r\n    {\r\n        a[c2]=0;\r\n        c2++;\r\n        frac_to_bin(n,a);\r\n    }\r\n    \r\n\r\n}\r\n\r\n\/\/main function\r\nint main()\r\n{\r\n    \/\/inputing the value\r\n    double n;\r\n    printf(\"Enter a decimal number: \");\r\n    scanf(\"%lf\",&n);\r\n\r\n    int a[16]; int b[16];\r\n    double f=n-(int)n;\r\n    int bd=(int)n;\r\n    printf(\"integer part: %d\\n\",bd);\r\n    printf(\"decimal part: %lf\\n\",f);\r\n    printf(\"Binary Equivalent: \\n\");\r\n    int_to_bin(bd,a);\r\n    frac_to_bin(f,b);\r\n\r\n    \/\/Printing the binary equivalent of the integer part\r\n    for (int i=c1-1;i>=0;i--)\r\n    {\r\n        printf(\"%d\",a[i]);\r\n    }\r\n\r\n    printf(\".\");\r\n\r\n    \/\/Printing the binary equivalent of the fractional part\r\n    for(int i=0;i<c2+1;i++)\r\n    {\r\n        printf(\"%d\",b[i]);\r\n    }\r\n\r\n   \r\n    \r\n}\r\n\r\n\/*NOTE: Since you are all learning recursion now, it is okay if you use global\/static variables. But as you write more \r\n        advanced codes later on, for recursion problems, try not to use global\/static variables. Usig global\/static variables\r\n        does not go well with recursion. *\/"
                },
                {
                    "Question": "Write a function int integerPower(int base, int exponent) that returns the value \r\nof base^exponent. For example, integerPower( 3, 4 ) = 3 * 3 * 3 * 3. Assume that \r\nexponent is a positive, nonzero integer, and base is an integer. The function \r\nshould use a loop to control the calculation. Do not use any math library \r\nfunctions. In the main function read two integers (<5) , call the function and print \r\nthe result.",
                    "Answer": "#include <stdio.h>\r\n\/*\r\n*Function: integerPower\r\n*returns the the value of base^exponent\r\n*\r\n*base: integer value as base\r\n*exponent: integer value as exponent\r\n*\r\n*returns: the value of base^exponent\r\n*\/\r\nint integerPower(int base, int exponent)\r\n{\r\n    int result=1;\r\n\r\n    \/\/loop for calculating the result\r\n    for(int i=0;i<exponent;i++)\r\n    {\r\n        result*=base;\r\n    }\r\n    return result;      \/\/returning the result\r\n}\r\n\r\nint main()\r\n{\r\n    int base_input, exponent_input;\r\n    \/\/base_input will store the value of base as input by the user\r\n    \/\/exponent_input will store the value of exponent as input by the user\r\n\r\n    printf(\"Please enter the value for base: \");\r\n    scanf(\"%d\",&base_input);        \/\/reading value of base\r\n\r\n    printf(\"Please enter the value for exponent: \");\r\n    scanf(\"%d\",&exponent_input);    \/\/reading value of exponent\r\n\r\n    printf(\"The result is: %d\",integerPower(base_input,exponent_input));    \/\/calling the integerPower() function\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a function int digitSum(int x) to compute the sum of digits of x. Example: \r\ndigitsSm(1572) is 15. Write another function int eqdigitSum(int x, int y) to check if \r\ninputs x and y have equal digit sums. The function returns 1, if x and y have the \r\nsame digit sum, and 0, otherwise. The second function should call the first \r\nfunction. Write a main function to read two integers and print if they have equal \r\ndigit sum.",
                    "Answer": "#include <stdio.h>\r\n\r\n\/*\r\n*Function: digitSum\r\n*returns the sum of digits of the number\r\n*\r\n*x: integer whose sum of digits has to found\r\n*\r\n*returns: the sum of digits of x\r\n*\/\r\nint digitSum(int x)\r\n{\r\n    int sum=0;\r\n\r\n    \/\/loop to find the sum of digits\r\n    while(x>0)\r\n    {\r\n        sum+=x%10;\r\n        x\/=10;\r\n    }\r\n    return sum;\r\n}\r\n\r\n\/*\r\n*Function: eqdigitSum\r\n*return whether the two numbers have the same sum of digits\r\n*\r\n*x: first number\r\n*y: second number\r\n*\r\n*returns: 1 if sum of digits of x and y are equal, 0 if sum of digits of x and y is not equal\r\n*\/\r\nint eqdigitSum(int x, int y)\r\n{\r\n    return (digitSum(x)==digitSum(y));\r\n}\r\n\r\n\r\nint main()\r\n{\r\n    int first_num, sec_num;\r\n\r\n    \/\/reading the first number from user\r\n    printf(\"Please enter the first number: \");\r\n    scanf(\"%d\",&first_num);\r\n\r\n    \/\/reading the second number from user\r\n    printf(\"Please enter the second number: \");\r\n    scanf(\"%d\",&sec_num);\r\n\r\n    if(eqdigitSum(first_num,sec_num))\r\n    {\r\n        printf(\"Entered numbers have EQUAL sum of digits.\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Entered numbers have UNEQUAL sum of digits.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a function int arrayMax(int A[], int n), which takes as input an integer array \r\nA[], and the number of elements in the array n (<100). The function returns the \r\nvalue of maximum element of the array. Write a main program, to first read n, \r\nand then read A[] element by element. Next call the function arrayMax and print \r\nthe value of the maximum element of the array A[].",
                    "Answer": "#include <stdio.h>\r\n\r\n\/*\r\n*Function: arrayMax\r\n*returns the maximum element of the array\r\n*\r\n*array: array of integer values\r\n*length: number of integer values in array\r\n*\r\n*returns: the maximum element from array\r\n*\/\r\nint arrayMax(int array[],int length)\r\n{\r\n    int max_indx=0; \/\/max_indx will be used to store index of maximum element of array\r\n\r\n    \/\/loop to find index of maximum element of array\r\n    for(int i=0;i<length;i++)\r\n    {\r\n        if(array[i]>array[max_indx])\r\n        {\r\n            max_indx=i;\r\n        }\r\n    }\r\n    return array[max_indx]; \/\/returns the value of maximum element of the array\r\n}\r\n\r\nint main()\r\n{\r\n    int arr[100], length_arr;\r\n    \/\/arr[100] will store the integers input by the user\r\n    \/\/length_arr will store the number of integers input by the user\r\n\r\n    \/\/reading number values to be read from user\r\n    printf(\"Please enter the number of values: \");\r\n    scanf(\"%d\",&length_arr);\r\n\r\n    \/\/reading values from user and storing those values in arr\r\n    printf(\"Please enter the values: \");\r\n    for(int i=0;i<length_arr;i++)\r\n    {\r\n        scanf(\"%d\",&arr[i]);\r\n    }\r\n\r\n    \/\/printing the result\r\n    printf(\"The maximum value is: %d\",arrayMax(arr,length_arr));    \/\/calling the arrayMax() function\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "The choose function C(n,k) defines the number of ways k items can be chosen \r\nfrom a set of n items. Mathematically, it is defined as\r\nC(n,k) = n!\/(k!(n-k)!). Recursively, it can be defined as C(n,k) = (n* C(n-1,k-1))\/k \r\ni. Write a recursive function that computes the above mathematical \r\nfunction. Make sure that you cover the base cases.\r\nii. Write a program to test the above function. The program inputs n and k \r\nand outputs C(n,k). Assume that n >= k and both n and k are positive \r\nintegers.",
                    "Answer": "#include <stdio.h>\r\n\r\n\/*\r\n*Function: n_choose_k\r\n*returns the value of C(n,k) by using recursion\r\n*\r\n*total_elements: total elements(n) from which k elements have to be chosen\r\n*elements_to_be_chosen: number of elements to be chosen from total_elements\r\n*\r\n*returns: the number of ways elements_to_be_chosen(k) items can be chosen from total_elements (n items)\r\n*\/\r\nlong int n_choose_k(int total_elements,int elements_to_be_chosen)\r\n{\r\n    if(elements_to_be_chosen==0) return 1;      \/\/C(n,0)=1 always\r\n    if(elements_to_be_chosen==1) return total_elements;     \/\/C(n,1)=n always\r\n    return n_choose_k(total_elements-1,elements_to_be_chosen-1)*total_elements\/elements_to_be_chosen;       \/\/C(n,k)=(n\/k)*C(n-1,k-1)\r\n}\r\n\r\nint main()\r\n{\r\n    int n_total,k_to_be_chosen;\r\n    \/\/n_total is used to store the value of n,i.e., the total number of items\r\n    \/\/k_to_be_chosen is used to store the value of k,i.e. the number of items to be selected out of n\r\n\r\n    \/\/reading n_total\r\n    printf(\"Enter a positive value for n: \");\r\n    scanf(\"%d\",&n_total);\r\n\r\n    \/\/reading k_to_be_chosen\r\n    printf(\"Enter a non-negative value not greater than n: \");\r\n    scanf(\"%d\",&k_to_be_chosen);\r\n\r\n    \/\/displaying result\r\n    printf(\"\\n%d items can be chosen from %d items in %ld ways.\\n\",k_to_be_chosen,n_total,n_choose_k(n_total,k_to_be_chosen));\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Define a sequence Gn as:\r\n Gn = 0 if n = 0,\r\n = 1 if n = 1,\r\n = 2 if n = 2,\r\n = Gn-1 + Gn-2 + Gn-3 if n >= 3.\r\nWrite a recursive function for the computation of Gn for a given n. From the main \r\nfunction read an integer n, (<10) and then print Gn.",
                    "Answer": "#include <stdio.h>\r\n\/*\r\n*Function: function_g\r\n*returns the value of G(n) such that\r\n                G(n)=0  ,   if n=0\r\n                G(n)=1  ,   if n=1\r\n                G(n)=2  ,   if n=2\r\n                G(n)=G(n-1)+G(n-2)+G(n-3)   ,   if n>=3\r\n*\r\n*n: parameter for G(n)\r\n*\r\n*returns: the value of G(n) such that\r\n                G(n)=0  ,   if n=0\r\n                G(n)=1  ,   if n=1\r\n                G(n)=2  ,   if n=2\r\n                G(n)=G(n-1)+G(n-2)+G(n-3)   ,   if n>=3\r\n*\r\n*\/\r\nint function_g(int n)\r\n{\r\n    if(n==0) return 0;          \/\/G(0)=0\r\n    else if(n==1) return 1;     \/\/G(1)=1\r\n    else if(n==2) return 2;     \/\/G(2)=2\r\n    else return (function_g(n-1)+function_g(n-2)+function_g(n-3));      \/\/G(n)=G(n-1)+G(n-2)+G(n-3)\r\n}\r\n\r\nint main()\r\n{\r\n    int x;\r\n    \/\/x is used to store the value of the parameter for G(x)\r\n\r\n    \/\/reading value of x\r\n    printf(\"Enter a non-negative value for n: \");\r\n    scanf(\"%d\",&x);\r\n\r\n    \/\/displaying the result\r\n    printf(\"\\nThe value of G(%d) is: %d\\n\",x,function_g(x));\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a recursive function int arraymax(int A[], int n) to compute the largest \r\ninteger in an array A[] of n elements. Assume all array\r\nelements to be distinct. Write a main function to read n, then read n distinct \r\nintegers into the array A[]. Call the function and print the largest element of the \r\narray. Do not sort the array.",
                    "Answer": "#include <stdio.h>\r\n\r\n\/*\r\n*Function: array_max\r\n*returns the maximum element of array, recursively\r\n*\r\n*arr[]: integer array\r\n*len: number of elements in arr[]\r\n*\r\n*returns: the maximum element of arr[] using recursion\r\n*\/\r\nint array_max(int arr[],int len)\r\n{\r\n    if(len==1) return arr[len-1];       \/\/if array has only 1 element, then that element is maximum\r\n    if(arr[len-1]>array_max(arr,len-1)) return arr[len-1];\r\n    else return array_max(arr,len-1);\r\n}\r\n\r\nint main()\r\n{\r\n    int array[100],length;\r\n    \/\/array[] is an array and is used to store all values\r\n    \/\/length is used to store number of values to be read\r\n\r\n    \/\/reading length\r\n    printf(\"Enter number of values: \");\r\n    scanf(\"%d\",&length);\r\n\r\n    \/\/reading elements of array\r\n    printf(\"Enter %d values: \",length);\r\n    for(int i=0;i<length;i++)\r\n    {\r\n        scanf(\"%d\",&array[i]);\r\n    }\r\n\r\n    \/\/displaying result\r\n    printf(\"\\nThe maximum element is: %d\\n\",array_max(array,length));\r\n    return 0;\r\n}"
                },
                {
                    "Question": "1. Generate two tables of the form {ID, Card Number, Usage Limit} and {ID, User Name}. \ni Your program should take the number of entries in the database n from the user \nand generate the first table and the second table by calling two different functions. \nIn the first table 16-digit card numbers must be randomly generated (First digit of the card numbers should not be zero). \nRandomly assign a \u2019Usage Limit\u2019 less than 1000 for each card. \nUse a one dimensional integer array to store the first table. Card numbers must be distinct. \nIn the second table the names of the users should be provided by the user ( names must be at most 10 character long). \nNote that ID in both the tables link each user name to their respective Card Number and Usage Limit.\r\nWrite functions to print those tables and call them from the main(). \r\n2. Write functions to search those tables based on the ID and based on user names. \nThe function should print the result in case the search is successful, otherwise it should print an error message.\r\n3. Write a function to update Usage Limit corresponding to a user name. Print the updated result. \nIf the name is not not valid, print an error message. \r\n4. Write a function using which each user can use their card. The function takes card number and an amount as input, \nchecks whether the card number is valid. If the card is valid then it checks whether the amount is less than or equal to the Usage Limit. \nIf that is the case then the transaction should take place. In the case of a failure, the program should output appropriate error messages \nlike Invalid Card Number, Limit exceeded.\r\nSample Output: Here is one sample output:\r\nPlease enter n: 3\r\nTable 1:\r\nID 1: Card Number: 9128 8726 0987 2701  Limit: 351\r\nID 2: Card Number: 5110 0476 6657 6363  Limit: 430\r\nID 3: Card Number: 9765 7784 2411 8240  Limit: 783\r\nTable 2:\r\nID 1: Name: Ram\r\nID 2: Name: Shyam\r\nID 3: Name: Madhu\r\n\r\nEnter 1 to Search\r\nEnter 2 to Update\r\nEnter 3 to Use card\r\nEnter 4 to exit\r\n\r\nPlease enter your choice: 1\r\nEnter 1 to search by ID and 2 to search by name\r\nEnter your choice: 1\r\nPlease enter an ID: 2\r\nID 2: Name: Shyam Card Number: 5110 0476 6657 6363  Limit: 430\r\n\r\nEnter 1 to Search\r\nEnter 2 to Update\r\nEnter 3 to Use card\r\nEnter 4 to exit\r\n\r\nPlease enter your choice: 1\r\nEnter 1 to search by ID and 2 to search by name\r\nEnter your choice: 2\r\nPlease enter a Name: Ram\r\nID 1: Name: Ram Card Number: 9128 8726 0987 2701  Limit: 351\r\n\r\nEnter 1 to Search\r\nEnter 2 to Update\r\nEnter 3 to Use card\r\nEnter 4 to exit\r\n\r\nPlease enter your choice: 2\r\nPlease enter the name: Ram\r\nPlease enter new Limit: 400\r\n\r\nUpdated Table 1:\r\nID 1: Card Number: 9128 8726 0987 2701 Limit: 400\r\nID 2: Card Number: 5110 0476 6657 6363 Limit: 430\r\nID 3: Card Number: 9765 7784 2411 8240 Limit: 783\r\n\r\nEnter 1 to Search\r\nEnter 2 to Update\r\nEnter 3 to Use card\r\nEnter 4 to exit\r\n\r\nPlease enter your choice: 3\r\nEnter card number: 9765 7784 2411 8240\r\nEnter amount: 900\r\nError: The limit is less than the amount entered\r\n\r\nEnter 1 to Search\r\nEnter 2 to Update\r\nEnter 3 to Use card\r\nEnter 4 to exit\r\n\r\nPlease enter your choice: 4\r\nGoodbye!\r\n",
                    "Answer": "#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<time.h>\r\n\r\nvoid printTable1(int table[], int entries){\r\n\tprintf(\"Table 1:\\n\");\r\n\tfor(int i=0; i<22*entries;){\r\n\t\tprintf(\"ID %d%d%d: \", table[i++], table[i++], table[i++]);\r\n\t\tprintf(\"  Card Number: %d%d%d%d \", table[i++], table[i++], table[i++], table[i++]);\r\n\t\tprintf(\"%d%d%d%d %d%d%d%d %d%d%d%d\", table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++]);\r\n\t\tprintf(\"  Limit: %d%d%d\\n\", table[i++], table[i++], table[i++]);\r\n\t}\r\n}\r\n\r\nvoid printTable2(char table[], int entries){\r\n\tprintf(\"\\nTable 2:\\n\");\r\n\tfor(int i=0; i<12*entries;){\r\n\t\tprintf(\"ID %d%d%d:  \", table[i++], table[i++], table[i++]);\r\n\t\tprintf(\"  Name: %c%c%c%c%c%c%c%c%c%c\\n\", table[i++],  table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++], table[i++]);\r\n\t}\r\n}\r\n\r\nvoid generateTable1(int table[], int entries){\r\n\t\/\/ Generating table number 1\r\n\tfor(int i=0, index=3; i<22*entries; i++){\r\n\t\ttable[i]=rand()%10;\r\n\t\t\/\/ making sure the first number of credit card is not 0.\r\n\t\tif (table[index]==0){\r\n\t\t\ttable[index]=1+rand()%9;\r\n\t\t\tindex+=23;\r\n\t\t}\r\n\t\telse if(i == index){\r\n\t\t\tindex+=23;\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid generateTable2(char table[], int table1[], int entries){\r\n\t\/\/ Generating table number 2\r\n\t\r\n\t\/\/ Copying ID from the table1 \r\n\tfor(int i1=0, i2=0; i2<12*entries; i1+=22, i2+=12){\r\n\t\tfor(int j=0; j<3; j++){\r\n\t\t\ttable[i2+j]=table1[i1+j];\r\n\t\t}\r\n\t}\r\n\t\/\/ Taking input from the user for usernames\r\n\tfor(int i=0; i<12*entries; i+=12){\r\n\t\tfor(int j=3; j<13; j++){\r\n\t\t\tprintf(\"Enter username for ID %d%d%d: \", table[i++], table[i++], table[i++]);\r\n\t\t\tscanf(\" %c\", table[i+j]);\r\n\t\t}\r\n\t}\r\n}\r\n\r\nvoid idSearch(int id, int table1[], int table2[], int entries){\r\n\tint temp_id, digit, found;\r\n\tfor(int i=0; i<22*entries; i+=22){\r\n\t\ttemp_id=id;\r\n\t\tfor(int j=2; j<=0; j--){\r\n\t\t\tdigit=temp_id%10;\r\n\t\t\tif(digit==table1[i+j]){\r\n\t\t\t\ttemp_id\/=10;\r\n\t\t\t\tfound++;\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tfound=0;\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\r\n\t\t\tif(found=3){\r\n\t\t\tprintf(\"ID %d%d%d: \", table1[i++], table1[i++], table1[i++]);\r\n\t\t\tprintf(\"  Card Number: %d%d%d%d \", table1[i++], table1[i++], table1[i++], table1[i++]);\r\n\t\t\tprintf(\"%d%d%d%d %d%d%d%d %d%d%d%d\", table1[i++], table1[i++], table1[i++], table1[i++],table1[i++], table1[i++], table1[i++], table1[i++], table1[i++], table1[i++], table1[i++],table1[i++]);\r\n\t\t\tprintf(\"  Limit: %d%d%d\\n\", table1[i++], table1[i++], table1[i++]);\r\n\t\t\t\r\n\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tprintf(\"Invalid ID!\\n\");\r\n}\r\n\r\nvoid usernameSearch(char username, int table1[], int table2[], int entries){\r\n\r\n}\r\n\r\nvoid updateLimit(int newlimit, int table1[], int table2[], int entries){\r\n\r\n}\r\n\r\nvoid transaction(int card_number, int amount, int table1[], int table2[], int entries){\r\n\r\n}\r\n\r\nint main(){\r\n\r\n\tsrand(time(0)); \/\/ seeding the rand function\r\n\r\n\t\/\/ taking input for the number of entries\r\n\tint n, i, index;\r\n\tprintf(\"Please enter n: \"); scanf(\"%d\", &n);\r\n\r\n\t\/\/ Declaring tables\r\n\tint table1[23*n];\r\n\tchar table2[13*n];\r\n\r\n\t\/\/ Generating both the tables\r\n\tgenerateTable1(table1, n);\r\n\tprintTable1(table1, n);\r\n\t\r\n\tgenerateTable2(table2, table1, n);\r\n\t\r\n\t\/\/printing both the tables\r\n\tprintTable2(table2, n);\r\n\r\n\t\/\/ Searching the tables\r\n\tprintf(\"Enter 1 to Search\\n\");\r\n\tprintf(\"Enter 2 to Update\\n\");\r\n\tprintf(\"Enter 3 to Use card\\n\");\r\n\tprintf(\"Enter 4 to exit\\n\");\r\n\r\n\tint choice=0;\r\n\tprintf(\"\\nEnter your choice: \"); scanf(\"%d\", &choice);\r\n\r\n\twhile (choice!=4){\r\n\t\tif(choice==1) {\r\n\t\t\tint oneChoice;\r\n\t\t\tprintf(\"Enter 1 to search by ID and 2 to search by name\\n\");\r\n\t\t\tprintf(\"Enter your choice: \"); scanf(\"%d\", &oneChoice);\r\n\t\t\tif(oneChoice==1){\r\n\t\t\t\tint id;\r\n\t\t\t\tprintf(\"Please enter an ID: \"); scanf(\"%d\", id);\r\n\t\t\t\tidSearch(id, table1, table2, n);\r\n\t\t\t}\r\n\t\t\telse if(oneChoice==2){\r\n\t\t\t\tchar username[]={};\r\n\t\t\t\tprintf(\"Please enter an Name: \"); scanf(\"%s\", username);\r\n\t\t\t\tusernameSearch(username, table1, table2, n);\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (choice==2){\r\n\t\t\tchar username[]={};\r\n\t\t\tint newLimit;\r\n\t\t\tprintf(\"Please enter the name: \"); scanf(\"%s\", username);\r\n\t\t\tprintf(\"Please enter new Limit: \"); scanf(\"%d\", newLimit);\r\n\t\t\tupdateLimit(newLimit, table1, table2, n);\r\n\t\t\tprintf(\"Updated \");\r\n\t\t\tprintTable1(table1, n);\r\n\t\t}\t\r\n\t\telse if (choice==3){\r\n\t\t\tunsigned long long int cardnumber;\r\n\t\t\tint amount;\r\n\t\t\tprintf(\"Enter card number: \"); scanf(\"%llu\", &cardnumber);\r\n\t\t\tprintf(\"Enter amount: \"); scanf(\"%d\", amount);\r\n\t\t\ttransaction(cardnumber, amount, table1, table2, n);\r\n\t\t}\r\n\t}\r\n\r\n\tif(choice==4){\r\n\t\tprintf(\"Goodbye!\\n\");\r\n\r\n\t    return 0;\r\n\t}\r\n}\r\n"
                },
                {
                    "Question": "In this Question, we will test if a generated password in some website is valid or not. A user \r\n                will give a username and a password as string inputs. Our task is to verify if the password is \r\n                acceptable or not, which is checked from the following rules:\r\n                a. The password can not be the same as the username, and it can't contain the username as a \r\n                part of it \r\n                b. There should be at least 8 characters in the password \r\n                c. The maximum length of the password can be 15 \r\n                d. It should contain at least one lowercase, one uppercase, and at least two characters from the \r\n                following: $, *, +, \/, #, @, <, >, ?, _, !\r\n                e. There can be maximum 5 consecutive digits in the password\r\n                f. There can't be more than 5 repeated characters\r\n                You are not allowed to use\/call any String.h library functions. Feel free to write your own \r\n                functions and invoke them. \r\n                Example 1:\r\n                username: harrisjh\r\n                password: h67dQ*+R62 \r\n                Acceptable\r\n                Example 2:\r\n                username: david1\r\n                password: 45Cxdavid1*?I\r\n                Not acceptable\r\n                Example 3:\r\n                username: jdoe123\r\n                password: uPG10\/rrX\r\n                Not acceptable",
                    "Answer": "#include<stdio.h>\r\n\r\nint strln(char s[])\r\n{\r\n    int len = 0;\r\n    while ((s++) != '\\0' )\r\n    {\r\n        len++;\r\n    }\r\n    return len;\r\n}\r\n\r\nint main() {\r\n    char un[100], ps[100];\r\n    printf(\"Username: \");\r\n    scanf(\"%s\",un);\r\n    printf(\"Password: \");\r\n    scanf(\"%s\",ps);\r\n    int up=0,low=0,sp=0,num=0;\r\n    int len = strln(ps);\r\n    int lu = strln(un);\r\n    int flag =0;\r\n\r\n    for (int i=0; i<len; i++){\r\n        if (ps[i]>=65 && ps[i]<=90){\r\n            up+= 1;\r\n        }\r\n    }\r\n\r\n    for (int i=0; i<len; i++){\r\n        if (ps[i]>=97 && ps[i]<=122){\r\n            low+= 1;\r\n        }\r\n    }\r\n\r\n    for (int i=0; i<len; i++){\r\n        if (ps[i] == '$' || ps[i] == '' ||ps[i] == '_' ||ps[i] == '@' ||ps[i] == '#' ||ps[i] == '\/' ||ps[i] == '<' ||ps[i] == '>' ||ps[i] == '!' || ps[i] == '+' ||ps[i] == '?' ){\r\n            sp+= 1;\r\n        }\r\n    }\r\n\r\n    for (int j=0; j<len; j++)\r\n    {\r\n        num =0;\r\n        for (int i=j; i<len;i++)\r\n        {\r\n\r\n          if (ps[i] == '0' || ps[i] == '1' ||ps[i] == '2' ||ps[i] == '3' ||ps[i] == '4' ||ps[i] == '5' ||ps[i] == '6' ||ps[i] == '7' ||ps[i] == '8' || ps[i] == '9' )\r\n          {\r\n             num+= 1;\r\n          }\r\n\r\n        }\r\n\r\n    if (!(len<=15 && len >=8)){\r\n        printf(\"Not Acceptable\");\r\n         return 0;\r\n    }\r\n    \/\/counting uppercase and lowercase\r\n\r\n    else if (up < 1){\r\n        printf(\"Not Acceptable\");\r\n         return 0;\r\n    }\r\n\r\n    else if (low < 1){\r\n        printf(\"Not Acceptable\");\r\n         return 0;\r\n    }\r\n\r\n    else if (sp < 2){\r\n        printf(\"Not Acceptable\");\r\n         return 0;\r\n    }\r\n\r\n    else if (num==5){\r\n        printf(\"Not Acceptable\");\r\n         return 0;\r\n        break;\r\n    }\r\n\r\n    for (int i=0; i<len-lu+1; i++)\r\n    {\r\n        flag =0;\r\n        for(int j=0;j<lu;j++)\r\n        {\r\n\r\n            if(un[j]==ps[j+i])\r\n            {\r\n\r\n                flag ++;\r\n                if (flag == lu){\r\n                  printf(\"Not Acceptable\\n\");\r\n                  return 0;\r\n\r\n                  break;\r\n                }\r\n            }\r\n\r\n\r\n            else\r\n            {\r\n                break;\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n    \/\/   printf(\"%d\\n\", flag);\r\n\r\n    \/\/maximun 5 digits\r\n\r\n    \/\/ printf(\"%d\",num);\r\n\r\n    }\r\n\r\n    for(int i=0;i<len;i++){\r\n      int f=0;\r\n      for(int j=i;j<len;j++){\r\n        if(ps[i]==ps[j]){\r\n          f++;\r\n        }\r\n      if(f==5){\r\n\r\n        break;\r\n      }\r\n      }\r\n      if(f==5){\r\n      printf(\"Not Acceptable\\n\");\r\n      return 0;\r\n      break;\r\n      }\r\n    }\r\n    printf(\"Acceptable\");\r\n\r\n\r\n}\r\n"

                },
                {
                    "Question": "A genetic sequence is a string formed from a four-letter alphabet {Adenine (A), Thymine \r\n                    (T), Guanine (G), Cytosine (C)} of biological macromolecules referred to together as the DNA \r\n                    bases. A gene is a genetic sequence that contains the information needed to construct a protein. \r\n                    Following are some examples of parts of gene structures:\r\n                    ATTGCATGGACCTGCGAATCTGAGGCTA\r\n                    GGTCCAAGAGATTAACTGTGCAAAC\r\n                    CTAGGCTGCAAGTCACAATCGTGTGTAACAAGGT\r\n                    Dr. Xu is performing some study with the genes of Sars Covid19 virus and some of its variants. \r\n                    In the study, he needs to find the similarity between two genes coming from two different \r\n                    Covid variants by means of a \"similarity score\". The goal is that, if the two genetic sequences \r\n                    are similar enough, we might expect them to have similar functions. Dr. Xu wants to measure \r\n                    the similarity of two genetic sequences by the following procedure. The two sequences will be \r\n                    aligned, and we will pay a penalty for each mismatch between two corresponding characters. \r\n                    However if the two sequences do not have the same length, then \"gaps\" (represented by '-') will \r\n                    be inserted to the shorter sequence to make the two sequences have the same length. For \r\n                    simplicity, we consider maximum 2 gaps in the sequences (that means, the length of the two \r\n                    sequences will differ by maximum 2 characters). There can be many possibilities of inserting \r\n                    the gap(s) in a sequence. Our goal is to find the gap positions for which the \"similarity score\" \r\n                    is the minimum. The following rules are followed for the penalty and cost:\r\n                    Penalty Cost\r\n                    ------- ----\r\n                    Per gap 2\r\n                    Per mismatch 1\r\n                    Per match 0\r\n                    For example, consider the following two sequences: AACAGTTACC and TAAGGTCA. Two \r\n                    possible alignments can be:\r\n                    Example 1\r\n                    Sequence1 AACAGTTACC \r\n                    Sequence2 TAAGGTCA - -\r\n                    Penalty 10 1 1 0 0 1 0 2 2\r\n                    Similarity score = 8\r\n                    Example 2\r\n                    Sequence1 AACAGTTACC \r\n                    Sequence2 TA - AGGT- CA\r\n                    Penalty 10 2 0 0 10 2 01\r\n                    Similarity score = 7\r\n                    There can be many other combinations of inserting gaps. Your task is to write a C program \r\n                    which takes the two sequences as two strings from the user as input. \r\n                    If the sequences have different lengths, then find the alignment of the two sequences for which \r\n                    the Similarity score is minimum. \r\n                    If the sequences have same length, then simply find the similarity score by the above mentioned \r\n                    rules. Your output should display the aligned sequences (along with the gaps represented by '-\r\n                    '), as well as the similarity score.\r\n                    You are not allowed to use\/call any String.h library functions. Feel free to write your own \r\n                    functions and invoke them. (May use ASCII code etc to identify the special characters)",
                    "Answer": "#include <stdio.h>\r\n\r\nint main(){\r\n\tchar sequence1[1000],sequence2[1000];\r\n\tprintf(\"Enter Sequence 1:\");\r\n\tscanf(\"%s\",sequence1);\r\n\tprintf(\"Enter Sequence 2:\");\r\n\tscanf(\"%s\",sequence2);\r\n\tint len1 = 0,len2 = 0;\r\n\tint i,j,k,l;\r\n\tfor(len1 = 0;sequence1[len1] != '\\0';len1++);\r\n\tfor(len2 = 0;sequence2[len2] != '\\0';len2++);\r\n\t\r\n\tint dash = len1 - len2;\r\n\t\/\/\tlen1 > len2\r\n\tif(len1 >= len2){\r\n\t\tint score,minScore,pos1,pos2;\r\n\t\tif(dash == 2){\r\n\t\t\tscore = 0,minScore = 100000;\r\n\t\t\tfor(i = 0;i < len1-1;i++){\r\n\t\t\t\tfor(j = i+1;j < len1;j++){\r\n\t\t\t\t\tscore = 0;\r\n\t\t\t\t\tfor(k = 0,l = 0;k < len1 && l < len2;k++,l++){\r\n\t\t\t\t\t\tif(k == i || k == j){\r\n\t\t\t\t\t\t\tl--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(sequence1[k] != sequence2[l])\r\n\t\t\t\t\t\t\tscore++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(minScore > score){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tminScore = score;\r\n\t\t\t\t\t\tpos1 = i;\r\n\t\t\t\t\t\tpos2 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminScore += 2*dash;\r\n\t\t\tprintf(\"\\nSequence 2: Position 1:%d\\tPosition 2:%d\\tScore:%d\\n\",pos1,pos2,minScore);\r\n\t\t} else if(dash == 1) {\r\n\t\t\tscore = 0,minScore = 100000;\r\n\t\t\tfor(i = 0;i < len1;i++){\r\n\t\t\t\tscore = 0;\r\n\t\t\t\tfor(k = 0,l = 0;k < len1 && l < len2;k++,l++){\r\n\t\t\t\t\tif(k == i){\r\n\t\t\t\t\t\tl--;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(sequence1[k] != sequence2[l])\r\n\t\t\t\t\t\tscore++;\r\n\t\t\t\t}\r\n\t\t\t\tif(minScore > score){\r\n\t\t\t\t\t\r\n\t\t\t\t\tminScore = score;\r\n\t\t\t\t\tpos1 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminScore += 2*dash;\r\n\t\t\tprintf(\"\\nSequence 2: Position 1:%d\\tScore:%d\\n\",pos1,minScore);\r\n\t\t} else {\r\n\t\t\tfor(k = 0,l = 0;k < len1 && l < len2;k++,l++){\r\n\t\t\t\tif(sequence1[k] != sequence2[l])\r\n\t\t\t\t\tscore++;\r\n\t\t\t}\r\n\t\t\tif(minScore > score)\r\n\t\t\t\tminScore = score;\r\n\t\t\tprintf(\"\\nScore:%d\\n\",minScore);\r\n\t\t}\r\n\t} else {\r\n\t\tdash *= -1;\r\n\t\tint score,minScore,pos1,pos2;\r\n\t\tif(dash == 2){\r\n\t\t\tscore = 0,minScore = 100000;\r\n\t\t\tfor(i = 0;i < len2-1;i++){\r\n\t\t\t\tfor(j = i+1;j < len2;j++){\r\n\t\t\t\t\tscore = 0;\r\n\t\t\t\t\tfor(k = 0,l = 0;k < len2 && l < len1;k++,l++){\r\n\t\t\t\t\t\tif(k == i || k == j){\r\n\t\t\t\t\t\t\tl--;\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif(sequence2[k] != sequence1[l])\r\n\t\t\t\t\t\t\tscore++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(minScore > score){\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tminScore = score;\r\n\t\t\t\t\t\tpos1 = i;\r\n\t\t\t\t\t\tpos2 = j;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminScore += 2*dash;\r\n\t\t\tprintf(\"\\nSequence 1: Position 1:%d\\tPosition 2:%d\\tScore:%d\\n\",pos1,pos2,minScore);\r\n\t\t} else {\r\n\t\t\tscore = 0,minScore = 100000;\r\n\t\t\tfor(i = 0;i < len2;i++){\r\n\t\t\t\tscore = 0;\r\n\t\t\t\tfor(k = 0,l = 0;k < len2 && l < len1;k++,l++){\r\n\t\t\t\t\tif(k == i){\r\n\t\t\t\t\t\tl--;\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif(sequence2[k] != sequence1[l])\r\n\t\t\t\t\t\tscore++;\r\n\t\t\t\t}\r\n\t\t\t\tif(minScore > score){\r\n\t\t\t\t\t\r\n\t\t\t\t\tminScore = score;\r\n\t\t\t\t\tpos1 = i;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tminScore += 2*dash;\r\n\t\t\tprintf(\"\\nSequence 1: Position 1:%d\\tScore:%d\\n\",pos1,minScore);\r\n\t\t}\r\n\t}\r\n}\r\n"
                },
                {
                    "Question": "User supplies a list of n distinct integers sorted in increasing order. First check if the list is \r\n                    sorted (in increasing order). He\/She also supplies a key x, which is an integer. Assume that n \r\n                    lies in [1,20].\r\n                    Store the list as a 1D array and write a program to search x in the array using (a) linear search \r\n                    and (b) binary search. Implement the linear search in linear_search() function and binary \r\n                    search in bin_search() function. Both the functions should take the list and the key x as \r\n                    argument and should return the index (for successful search, -1 for unsuccessful search).\r\n                    Ask the user to choose the required searching algorithm and invoke the respective function. \r\n                    In case of successful search, print in the main() the position of x in the array. Position of an \r\n                    element is indicated by its array index. In case of unsuccessful search, print -1. \r\n                    Implement the binary search using iterative procedure, NOT by recursion. \r\n                    In both the cases, print the messages in main function.\r\n                    Example 1: \r\n                    Enter the number of elements n: 5\r\n                    Enter the elements in sorted order: 4, 8, 12, 18, 21\r\n                    Enter the key element x, which you want to search: 12\r\n                    Choose the algorithm: Type 1 for linear search and 2 for binary search\r\n                    2\r\n                    Executing the binary search algorithm \r\n                    Successful search\r\n                    Element 12 has been found at the index 2\r\n                    Example 2: \r\n                    Enter the number of elements n: 5\r\n                    Enter the elements in sorted order: 8, 4, 12, 18, 21\r\n                    Not sorted. Enter again \r\n                    Enter the elements in sorted order: 4, 9, 12, 18, 21",
                    "Answer": "#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\n\r\nint bin_search(int x, int a[100], int s, int l)\r\n{\r\n  while (s <= l)\r\n  {\r\n    int m = s + (l-s)\/2;\r\n    if (a[m] == x)\r\n        return m;\r\n    if (a[m] < x)\r\n        s = m + 1;\r\n    else\r\n         l = m - 1;\r\n  }\r\n  return -1;\r\n}\r\n\r\n\r\n\r\nint linear_search(int n,int x,int a[100]){\r\n\r\n    for(int i=0;i<n;i++){\r\n        if(a[i]==x){\r\n            return i;\r\n        }\r\n    }\r\n\r\n    return -1;\r\n\r\n}\r\n\r\n\r\n\r\n\r\nint main(){\r\n    int n;\r\n    int x;\r\n    int a[100];\r\n    printf(\"Enter the number of elements n:\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"Enter the elements in sorted order:\");\r\n\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\"%d\",&a[i]);\r\n    }\r\n\r\n    int flag=0;\r\n    for(int j=0;j<n-1;j++){\r\n        if(a[j]>=a[j+1]){\r\n            flag=-1;\r\n            break;\r\n        }\r\n     }\r\n           printf(\"Enter the key element x, which you want to search:\\n\");\r\n     scanf(\"%d\",&x);\r\n\r\n\r\n\r\n     if(flag==-1){\r\n      printf(\"Not sorted. Enter again \\n\");\r\n      main();\r\n     }else{\r\n        printf(\"Choose the algorithm: Type 1 for linear search and 2 for binary search\\n\");\r\n        scanf(\"%d\",&flag);\r\n        if(flag==1){\r\n            printf(\"Successful search \\nElement %d has been found at the index %d\",x,linear_search(n,x,a));\r\n            \/\/printf(\"%d\",linear_search(n,x,a));\r\n        }if(flag==2){\r\n            printf(\"Successful search \\nElement %d has been found at the index %d\",x,bin_search(x,a,0,n-1));\r\n           \/\/ printf(\"%d\",bin_search(x,a,0,n-1));\r\n\r\n        }\r\n\r\n\r\n     }\r\n\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "Given three lines of the form ax+by=c, your program has to compute their points of intersection and \r\n                    hence the area of the triangle described by them. Take the co-efficients (a, b, c) of each line in main().\r\n                    Then, write a function that takes as input (as parameter) the coefficients (a,b,c) of two lines and \r\n                    computes their intersection point if they are not mutually parallel. Call this function three times from \r\n                    main() and print required results (intersection points, side length, area, messages etc) in main() as shown \r\n                    in examples. You may use an array to pass the intersection points from function to main().\r\n                    You can use sqrt function of math.h.\r\n                    Examples:\r\n                    $ Enter the coefficients (a, b, c) of three lines:\r\n                    Line 1: 1 0 0\r\n                    Line 2: 0 1 0\r\n                    Line 3: 1 1 1\r\n                    Point of intersection between L1 and L2 = (0.000000, -0.000000).\r\n                    Point of intersection between L2 and L3 = (1.000000, 0.000000).\r\n                    Point of intersection between L3 and L1 = (-0.000000, 1.000000).\r\n                    Side lengths = 1.000000, 1.414214, 1.000000.\r\n                    Area = 0.500000\r\n                    $ Enter the coefficients (a, b, c) of three lines:\r\n                    Line 1: 1 0 0\r\n                    Line 2: 1 0 1\r\n                    Line 3: 1 1 1\r\n                    Lines 1 and 2 are parallel; so no point of intersection.",
                    "Answer": "#include <stdio.h>\r\n#include <math.h>\r\n\r\ndouble pointOfIntersection(int a1,int b1,int c1,int a2,int b2,int c2){\r\n\treturn (c1*b2-c2*b1)\/(a1*b2 - a2*b1);\r\n}\r\n\r\ndouble distanceFormula(double x1,double x2,double y1,double y2){\r\n\treturn (sqrt(pow(x2-x1,2) + pow(y2-y1,2)));\r\n}\r\n\r\ndouble area(double len1,double len2,double len3){\r\n\tdouble s = (len1+len2+len3)\/2;\r\n\treturn (sqrt(s*(s-len1)(s-len2)(s-len3)));\r\n}\r\n\r\nint main(){\r\n\tprintf(\"Enter the coefficients (a, b, c) of three lines:\\n\");\r\n\tint a1,a2,a3,b1,b2,b3,c1,c2,c3;\r\n\tprintf(\"Line 1:\");\r\n\tscanf(\"%d %d %d\",&a1,&b1,&c1);\r\n\tprintf(\"Line 2:\");\r\n\tscanf(\"%d %d %d\",&a2,&b2,&c2);\r\n\tprintf(\"Line 3:\");\r\n\tscanf(\"%d %d %d\",&a3,&b3,&c3);\r\n\r\n\tif((a1*b2 - a2*b1) == 0){\r\n\t\tif((c1*b2-c2*b1) != 0 || (c1*a2-c2*a1) != 0)\r\n\t\t\tprintf(\"Lines 1 and 2 are parallel; so no point of intersection\");\r\n\t\telse\r\n\t\t\tprintf(\"Lines 1 and 2 are same; so no unique point of intersection\");\r\n\r\n\t\treturn 0;\r\n\t}\r\n\tdouble x1 = pointOfIntersection(a1,b1,c1,a2,b2,c2),y1 = pointOfIntersection(b1,a1,c1,b2,a2,c2);\r\n\r\n\tif((a2*b3 - a3*b2) == 0){\r\n\t\tif((c2*b3-c3*b2) != 0 || (c2*a3-c3*a2) != 0)\r\n\t\t\tprintf(\"Lines 2 and 3 are parallel; so no point of intersection\");\r\n\t\telse\r\n\t\t\tprintf(\"Lines 2 and 3 are same; so no unique point of intersection\");\r\n\r\n\t\treturn 0;\r\n\t}\r\n\tdouble x2 = pointOfIntersection(a2,b2,c2,a3,b3,c3),y2 = pointOfIntersection(b2,a2,c2,b3,a3,c3);\r\n\r\n\tif((a3*b1 - a1*b3) == 0){\r\n\t\tif((c3*b1-c1*b3) != 0 || (c3*a1-c1*a3) != 0)\r\n\t\t\tprintf(\"Lines 3 and 1 are parallel; so no point of intersection\");\r\n\t\telse\r\n\t\t\tprintf(\"Lines 3 and 1 are same; so no unique point of intersection\");\r\n\r\n\t\treturn 0;\r\n\t}\r\n\tdouble x3 = pointOfIntersection(a3,b3,c3,a1,b1,c1),y3 = pointOfIntersection(b3,a3,c3,b1,a1,c1);\r\n\r\n\tprintf(\"Point Of Intersection L1 and L2:(%lf, %lf)\\n\",x1,y1);\r\n\tprintf(\"Point Of Intersection L2 and L3:(%lf, %lf)\\n\",x2,y2);\r\n\tprintf(\"Point Of Intersection L3 and L1:(%lf, %lf)\\n\",x3,y3);\r\n\r\n\tdouble len1 = distanceFormula(x1,x2,y1,y2),len2 = distanceFormula(x2,x3,y2,y3),len3 = distanceFormula(x3,x1,y3,y1);\r\n\tprintf(\"Side Lengths: %lf %lf %lf\\n\",len1,len2,len3);\r\n\r\n\tprintf(\"Area: %lf\",area(len1,len2,len3));\r\n\treturn 0;\r\n}\r\n\r\n"
                },
                {
                    "Question": "Suppose you are given an integer array a[]. The array may contain repeated numbers. \nYou are also given an integer 'l'. Your task is to find all possible combinations of numbers in a[] \nthat have length 'l' (repetition is allowed). For example, consider a[] = {5, 7, 12} and l = 2. \nThen the possible combinations are: (5, 5), (5, 7), (5, 12), (7,7), (7, 12), (12, 12). \nIf a[] = {5, 7, 12, 3} and l = 3, then there can be following combinations:\r\n                    5 5 5\r\n                    5 5 7\r\n                    5 5 12\r\n                    5 5 3\r\n                    5 7 7\r\n                    5 7 12\r\n                    5 7 3\r\n                    5 12 12\r\n                    5 12 3\r\n                    5 3 3\r\n                    7 7 7\r\n                    7 7 12\r\n                    7 7 3\r\n                    7 12 12\r\n                    7 12 3\r\n                    7 3 3\r\n                    12 12 12\r\n                    12 12 3\r\n                    12 3 3\r\n                    3 3 3\r\n                    \r\n                    Your task is to write a recursive function to solve the problem. \n                   The user should supply the array a[] and an integer l as input, \n                    and the program should list all possible such combinations (order of numbers does not matter).\r\n                    Comment and indent your code properly.",
                    "Answer": "null"
                },
                {
                    "Question": "Suppose that you are changing your hostel room. \nSo you have to carry all of your belongings from your current hostel to the new hostel. \nThe institute has notified that you need to do the shifting within 'n' number of days \nand you can have only ONE single trip per day. Suppose that you don't have a big bag, \nand have to carry all of your belongings by hand, which you can't transfer all at a time and need \nmultiple trips to complete this. Say you have a 'k' number of items in your room (we assume that k>n). \nAs you don't have any bag, you can carry a maximum 'm' number of items per trip. \nThe set of trips to complete the hostel transfer makes one 'journey'. \nYour task is to determine the number of ALL possible journeys to transfer all of your belongings for a given 'n', 'k', and 'm'. \nYou have to write a recursive function myHostelChangingTrips(k, i ,n, m), where 'i' is the starting day (which is initially 1).\r\n\r\n                    Your program should take 'n', 'k', and 'm' from the user, and compute \nthe ALL possible number of journeys in the recursive function myHostelChangingTrips(), and output the Answer.\r\n                    \r\n                    Ex: n=4, k=15, m=6\r\n                    All possible Journeys : 140\r\n                    say, (6, 6, 3), (4, 4, 4, 3), (4, 5, 5, 1), ....................",
                    "Answer": "null"
                },
                {
                    "Question": "Write a program to implement a queue using structures. In queue, you have two ends, namely \u2018front\u2019 and \u2018rear\u2019. \nThe elements can be inserted at the rear end and can be removed from the front end. \nHence, the element, that you have inserted first, will be removed first (First In First Out).\r\n\r\nWrite a menu driven program to implement a queue using structures.  \nThe structure will contain the list of elements (of size MAX) and the index of the front and rear element. \nImplement enque() and deque() operations. Enque() function will take the input from the user\n and insert the element in the queue. Deque() removes the element from the queue, \nalso prints the removed element. Print the state of the queue after enque and deque operation.\r\n                    \r\n                    Please remember, during enque(), the newly inserted element will be the rear element. \n                    During deque(), the front element will be removed. Take all the input and print all the output inside the main() only.  \n                    The code should handle the overflow and underflow too.\r\n                    \r\n                    Example:\r\n                    \r\n                    Enter the option: 1. Enque, 2. Deque\r\n                    \r\n                    2\r\n                    \r\n                    The queue is empty!\r\n                    \r\n                    Enter the option: 1. Enque, 2. Deque, 3. Exit\r\n                    \r\n                    1\r\n                    Enter the element: 5\r\n                    \r\n                    The queue contains 5\r\n                    \r\n                    Enter the option: 1. Enque, 2. Deque 3. Exit\r\n                    \r\n                    1\r\n                    \r\n                    Enter the element:12\r\n                    \r\n                    The queue contains 5, 12\r\n                    \r\n                    Enter the option: 1. Enque, 2. Deque 3. Exit\r\n                    \r\n                    1\r\n                    \r\n                    Enter the element: 7\r\n                    \r\n                    The queue contains 5, 12, 7\r\n                    \r\n                    Enter the option: 1. Enque, 2. Deque 3. Exit\r\n                    \r\n                    2\r\n                    \r\n                    Removed element 5\r\n                    \r\n                    The queue contains 12, 7",
                    "Answer": "null"
                },
                {
                    "Question": "A positive integer is said to have an increasing digit k-sequence (of length k), if the first k digits are in strictly\r\nincreasing value sequence. For example, the k-sequence of 58345 is 2, 23567 is 5, 71289 is 1, 45667 is 3. Write a\r\nnon-recursive  function seq(n) which takes an integer n and returns the increasing digit sequence number of n.\r\nThen in the main program, you should read in a positive integer m, read m integers, calculate the k-sequence of\r\neach integer you have read by calling the function seq(n) and print the results obtained. Also identify which of\r\nthese integers are completely in increasing digit sequence (e.g., 23567). \r\nSave the file as A09_<Roll Number>.c (example A09_21AG10002.c). Build, Run and Test it for the given data as well as \r\nyour own data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a positive integer m and print it suitably. Create a new line.\r\n2. Read in m positive integers, repeatedly call the function seq (which you will define) for each of the m numbers\r\nthat are read.  Print each number and its k-sequence value appropriately in a new line each.\r\n3. Among the above integers read, suitably print all those which are completely in increasing digit sequence. \nIf therare no such, print \u201CNone have such a sequence\u201D.\r\n4.\r\n[Bonus] If you complete these within the scheduled time, write the function seq in a recursive manner. Call it rseq\r\nand use appropriate parameters. Test it like you tested seq. [Bonus will not add to assignment marks]\r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions]\r\nTest Data: \r\na) m = 5, numbers are 3456, 1237, 8888, 787,  7321\r\nb) m = 5, numbers are 1, 23456, 134, 56789, 7897\r\nc) m = 4, numbers are  351, 531, 1345, 68153 ",
                    "Answer": "null"
                }   
            ]
        },
        {
            "type": "theory",
            "Elements": [
                
                {
                    "Question":"Write a C function that has three positive integer arguments n, m, k and returns \nthe third largest integer p, p <= k, such that p divides both n and m. \nIt returns 0 if there is no such third largest p > 0. \nFor example, n = 200, m = 100, k = 80, result is 20. \nAgain, if n = 35, m = 25, k = 18, then the result is 0. \nDo not use arrays or any library functions other than standard input and output. \nWrite the function and the main program. \nIn the main program, read the inputs, call the function and print the result.\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint third(int n, int m, int k)\r\n{\r\n    int count, i;\r\n    count = 0;\r\n    for(i = k; i> 0; i--)\r\n    {\r\n        if ((n%i == 0) && (m%i == 0)) count++;\r\n        if (count == 3) break;\r\n    }\r\n    if (count == 3) return (i);\r\n    else return (0);\r\n}\r\nmain()\r\n{\r\n    int n, m, k;\r\n    scanf(\"%d%d%d\", &n, &m, &k);\r\n    printf(\"n = %d, m = %d, k = %d \\n\", n, m, k);\r\n    printf(\"Result = %d \\n\", third(n,m,k));\r\n}\r\n"
                },
                {
                    "Question":"Write a function which takes as input two integer arrays, a[ ] and b[ ], \nof size n and prints only those numbers which appear in both the arrays. \nAssume that for each array, the elements are provided in ascending order. Each array stores n elements, \nwith no duplication of the elements. Also, assume that n \u2264 100.\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint main(){\r\nint a[100], b[100], n;\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\", &n);\r\n    printf(\"%d\\n\", n);\r\n    printf(\"Enter numbers in array a: \\n\");\r\n    for (int i=0; i<n; i++){\r\n        scanf(\"%d\", &a[i]);       \r\n    }\r\n    printf(\"\\nEnter numbers in array b: \\n\");          \r\n    for (int i=0; i<n; i++){\r\n        scanf(\"%d\", &b[i]);\r\n    }\r\n    printf(\"\\nThe numbers that appear in both arrays are: \\n\");\r\n    for (int i=0; i<n;i++){\r\n        for (int j=0; j<n; j++){\r\n            if (a[i]==b[j]){\r\n                printf(\"%d \", a[i]);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n"
                },
                {
                    "Question":"Write a recursive function that takes as input an integer n and returns \nthe sum of all its digits that are \u2264 5. \nFor example, on input 934072856, the output should be 14. \nIn the main() function, read an integer x and print the whatever the function returns on input x.\r\n",
                    "Answer":"#include <stdio.h>\r\n\r\nint sumDigits5(int n){\r\n    int sum = 0, d;\r\n    if(n == 0)\r\n        return 0;\r\n    if(n%10 <= 5)\r\n        sum = sumDigits5(n\/10) + (n%10);\r\n    else\r\n        sum = sumDigits5(n\/10);\r\n    return sum;\r\n}\r\n\r\nint main(){\r\n    int x;\r\n    printf(\"x = \");\r\n    scanf(\"%d\", &x);\r\n    printf(\"%d\\n\",sumDigits5(x));\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "Write a recursive function that takes a positive integer n as its argument \nand returns the largest digit in n as the result. \nFor example, if n = 51398, the function should return 9. \nThe function should not use any array, nor should it have any loop. \nWrite both the function and the main program. \nRead the input in the main program and print the input read and result (obtained on calling the recursive function) \nin the main program.",
                    "Answer": "#include <stdio.h>\r\n\r\nint max(int n, int m)\r\n{\r\n    if (n == 0)\r\n        return m;\r\n    else\r\n    {\r\n        if (n % 10 > m)\r\n            return max(n \/ 10, n % 10);\r\n        else\r\n            return max(n % 10, m);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int n;\r\n    scanf(\"%d\", &n);\r\n    int maxm = max(n, 0);\r\n    printf(\"maximum is %d\", maxm);\r\n    return 0;\r\n}"
                },
                {
                    "Question": "In a compounded \uFB01xed deposit investment, a one-time principal amount P is invested for N\r\nyears with interest computed yearly at R percent per annum. The interest I(i) = A(i\u22121)(r\/100)\r\n(earned at the end of the i-th year) on the amount A(i \u2212 1) (accrued at the beginning of the\r\nyear i, i = 1, 2, ...,N), is added to A(i \u2212 1) to get amount A(i) (accrued at the end of the i-th\r\nyear), that is, A(i) = A(i \u2212 1) + I(i) = A(i \u2212 1) + A(i \u2212 1)(r\/100). So, A(0) = P and A(1) =\r\nA(0)+I(1) = A(0)+A(0)r\/100 = P(1+r\/100) and A(2) = A(1)+I(2) = A(1)+A(1)(r\/100)\r\nand so on.\r\n (a) Write a C function simpleinterest with prototype \uFB02oat simpleinterest(\uFB02oat Principal, \uFB02oat\r\n      R) to compute and return I(i) given Principal=A(i \u2212 1) at rate of interest R percent per\r\n      annum, as inputs.\r\n (b) Write another C function with prototype \uFB02oat compoundinterest(\uFB02oat Principal, \uFB02oat R,\r\n      int N) that computes and returns A(N), given Principal = A(0) = P, the interest rate\r\n      R and the number of years N, as inputs. This function must repeatedly use the above\r\n      de\uFB01ned function simpleinterest N times.\r\n      An investor invests an amount P in the beginning of every year i, i = 1, 2, 3,N for N\r\n      consecutive years, for earning \uFB01xed deposit interest for the next N \u2212 i + 1 years.\r\n (c) Write the main C program for computing the accrued amount at the end of N years using\r\n      the function compoundinterest above N times, viewing the total accrued amount as a\r\n      sum of N \uFB01xed deposits of principal amounts P, for varying periods N,N \u2212 1, ..., 1 years,\r\n      respectively.\r\nYou must not use any math.h functions.",
                    "Answer": null
                },
                {
                    "Question": "Write a C function that takes as arguments three integer arrays, A, B, C along with integers\r\nm, n indicating the number of elements in A and B, respectively. The arrays A is assumed\r\nto be sorted in ascending order and B is assumed to be sorted in descending order. You are\r\nrequired to store in C all elements that are present in both A and B, in ascending order. You\r\nmay assume that A and B individually may have duplicate elements within them. In the result,\r\nthere should not be any duplicates in C. The function should return the number of elements\r\nin C. For example, if A = {8, 8, 12, 12, 15, 67} and B = {88, 67, 67, 45, 15, 12, 12, 9, 1} with\r\nm = 6, n = 9, the resulting C should be {12, 15, 67} and 3 should be returned. Do not use any\r\nadditional arrays or any library functions other than standard input and output. Write only\r\nthe required function. No need to write the main function.",
                    "Answer": null
                },
                {
                    "Question": "Consider the following recurrence relation: 5f(n) = f(n + 1) + 6f(n \u2212 1), where f(0) = 0,\r\nf(1) = 1. Write a recursive function to compute f(n).",
                    "Answer": null
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question":"You are to develop a menu driven program to store marks for n students (n<=20) in a 2-D array and perform certain operations\r\nbased on user options. Each row of the array will store the roll number and marks for Physics and Chemistry subjects \nfoa student (all integers within 100). Then you will (in a suitable continuous loop) choose an option among 0, 1, 2, 3 and 4.\r\nIn option 1, you will add a new student with roll number and marks for the two subjects. \nFor option 2, you will change themarks of the two subjects of an existing student. \nFor option 3, you will print the merit list and rank based on the total\r\nmarks obtained (descending order) with ties resolved in favour of marks in Physics. \nFor option 4, you will list the Gold\r\nMedal winners, on total as well as subject-wise. For option 0, you will exit from the program. Options can be in any order\r\nand can repeat. You will write your own appropriate functions to implement each of options 1, 2, 3 and 4.\r\nSave the file as T03_<Roll Number>.c (example T03_21AG10002.c). Build, Run and Test it for your own data. \nThen upload the .cfile for the Assignment. \r\n[25 Marks: 8 marks for intermediate submission, 17 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Write a function to add a new student with roll number and subject marks. The function will take as argument the array\r\nname, current number of students and new roll number. The marks will be read within the function. If a duplicate roll\r\nnumber is given, you will give a warning and ask for input again. If number exceeds 20, give a message, go to main menu.\r\n2. Write a function to change marks for an existing student. The function will take as argument the array name, current\r\nnumber of students and a roll number. The new marks will be read within the function. If the roll number does not exist,\r\nthen you will give a warning and take input again. If there are no students, then give a message and go to main menu.\r\n3. Write a function to calculate and print the merit list with rank, roll number, individual and total marks, row-wise. This \r\nfunction will take as argument the array name and current number of students. Ties in total marks will be resolved by \r\nmarks in Physics. If there is a tie in all marks then they will get the same rank. For example, if three people get rank 4 then\r\nthe next rank will start from 7. If there are no students, you will give a suitable message and go to main menu. \r\n4. Write a function to list the winners of three Gold Medals. The three Gold Medals are for highest in total (with preference to\r\nPhysics as in item 3 above), as well as highest in Physics and Chemistry. If there are ties, all those who are respective \r\ntoppers will be selected for the specific Gold Medals. If there are no students, give a suitable message, go to main menu. \r\n5. Write a main program that takes in the options of the user and calls the appropriate functions. \r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions]\r\nTest Data: Test it with your own data for different cases",
                    "Answer": "#include <stdio.h>\r\nint main(void)\r\n{\r\n    char a[128], b[128];\r\n    int i, alen, blen, a1[128]={0}, b1[128]={0};\r\n\r\n    \/\/input and print strings a and b\/\/\r\n    printf(\"Enter a : \");\r\n    scanf(\"%s\",a);\r\n    printf(\"Enter b : \");\r\n    scanf(\"%s\",b);\r\n    printf(\"a : %s\\n\",a);\r\n    printf(\"b : %s\\n\",b);\r\n\r\n    \/\/ find length of strings, convert lowercase to uppercase, store frequency in a1 and b1\/\/\r\n    for(i=0; a[i]!='\\0';- i++){\r\n        if(a[i]>='A' && a[i]<='Z') a[i]=a[i]+'a'-'A';\r\n        a1[a[i]]++;\r\n    }\r\n    alen=i;\r\n\r\n    for(i=0; b[i]!='\\0'; i++){\r\n        if(b[i]>='A' && b[i]<='Z') b[i]=b[i]+'a'-'A';\r\n        b1[b[i]]++;\r\n    }\r\n    blen=i;\r\n\r\n    \/\/ print frequency of unique characters in a and b\/\/\r\n    printf(\"Frequency of each character in a : \\n\");\r\n    for(i=0; i<128; i++){\r\n        if(a1[i]!=0){\r\n            printf(\"%c = %d\\n\",(char)i, a1[i]);\r\n        }\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    printf(\"Frequency of each character in b : \\n\");\r\n    int flag=0;\r\n    for(i=0; i<128; i++){\r\n        if(b1[i]!=0){\r\n            printf(\"%c = %d\\n\",(char)i, b1[i]);\r\n        }\r\n        \/\/compare frequency in a and b\/\/\r\n        if(b1[i]<a1[i] || b1[i]==0){\r\n            flag++;\r\n        }\r\n    }\r\n    printf(\"\\n\");\r\n\r\n\r\n    if(flag==128){\r\n        printf(\"Yes, every character present in B is present in A strictly more number of times than in B\\n\");\r\n    }\r\n    else{\r\n        printf(\"No, every character present in B is not present in A strictly more number of times than in B\\n\");\r\n    }\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"You are to read in a character string into an array A. After that you will write a function that takes as one of the arguments, an\r\ninteger k and forms a new string B with the first k characters of A reversed followed by the rest of the characters of A.\r\nFor example, if A = abcadg and k = 4, then B will be acbadg. You will then find out the number of character mismatches\r\nbetween A and B. Upper and lower cases of the same character will be treated as the same for matching purposes. In the\r\nabove example, the number of mismatches is 2. This will be done for all values of k from 1 to the length of the string A.\r\nThe mismatch result will be printed for all k values along with the relevant partly reversed string. \r\nIn order to implement this you will develop both non-recursive and recursive functions for (a) conversion of a string A to B by\r\nreversing the first k characters of A and leaving the rest intact (b) Matching two strings to find the number of \r\nmismatches. You will call these functions  appropriately in the main program to find the solutions as desired above, for \r\nthe same input, using both non-recursive and recursive function calls.\r\nSave the file as T04_<Roll Number>.c (example T04_21AG10002.c). Build, Run and Test it for the given and your own data.\r\nThen upload the .c file for the Assignment.\r\n[25 Marks: 8 marks for intermediate submission, 17 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read in a character string A and print it. Create a new line.\r\n2. Write a non-recursive function krev with appropriate arguments to reverse the first k characters of A to form B.\r\n3. Write a non-recursive function mism with appropriate arguments to find the number of mismatches between A and B.\r\n4. You will call the above functions in the main program for all values of k from 1 to length of string A and for every k neatly \r\nprint the string B along with the number of mismatches between A and B for that k, in a new line for each k. \r\n5. You will write recursive versions of 2 and 3 above calling these functions rkrev and rmism, respectively.\r\n6. You will repeat step 4 using the recursive versions for the same input A and print the result. You will not read A again.\r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions, including to find \r\nthe length of a character string.]\r\nTest Data: Test it with the following: A = abcadg, A = $baB$aaaBaaa, A = Malayalam as well as your own data covering various cases.",
                    "Answer": "#include<stdio.h>\r\nint main()\r\n{\r\n    char A[100],B[100];\r\n    printf(\"\\nWRITE THE STRING A:\\n\");\r\n    scanf(\"%s\",A);\r\n    printf(\"\\nWRITE THE STRING B:\\n\");\r\n    scanf(\"%s\",B);\r\n\r\n    printf(\"\\nTHE STRING A IS %s\",A);\r\n    printf(\"\\nTHE STRING B IS %s\",B);\r\n\r\n     \/* DETERMINING CHARACTER AND FREQUENCY IN STRING A.*\/\r\n    \r\n    int i,j,k=0,l=0,AF[100],BF[100],flag=0;\r\n    char AU[100],BU[100];\r\n\r\n     for ( i = 0; A[i]!='\\0'; i++)\r\n     {\r\n         if (A[i]>=65&&A[i]<=90)\r\n         {\r\n             A[i]=A[i]+32;\r\n         }\r\n\r\n         for ( j = 0; j<k; j++)\r\n         {\r\n             if (AU[j]==A[i])\r\n             {\r\n                 flag=1;\r\n                 break;\r\n             }\r\n             \r\n         }\r\n         if (flag==0)\r\n         {\r\n             AU[k]=A[i];\r\n             AF[k]=1;\r\n             k++;\r\n\r\n         }\r\n         if (flag==1)\r\n         {\r\n             AF[j]=AF[j]+1;\r\n             flag=0;\r\n         }\r\n         \r\n         \r\n         \r\n     }\r\n\r\n     printf(\"\\n\\nTHE STRING A WITH EVERY CHAR (FREQUENCY)\\n\");\r\n     \r\n      for ( i = 0; i <k; i++)\r\n      {\r\n          printf(\" %c (%d times) ,\",AU[i],AF[i]);\r\n      }\r\n\r\n    \/* CHARACTER AND FREQUENCY DETERMINATION OF STRING B*\/\r\n    flag=0;\r\n     for ( i = 0; B[i]!='\\0'; i++)\r\n     {\r\n         if (B[i]>=65&&B[i]<=90)\r\n         {\r\n             B[i]=B[i]+32;\r\n         }\r\n\r\n         for ( j = 0; j<l; j++)\r\n         {\r\n             if (BU[j]==B[i])\r\n             {\r\n                 flag=1;\r\n                 break;\r\n             }\r\n             \r\n         }\r\n         if (flag==0)\r\n         {\r\n             BU[l]=B[i];\r\n             BF[l]=1;\r\n             l++;\r\n\r\n         }\r\n         if (flag==1)\r\n         {\r\n             BF[j]=BF[j]+1;\r\n             flag=0;\r\n         }\r\n         \r\n         \r\n         \r\n     }\r\n\r\n     printf(\"\\n\\nTHE STRING B WITH EVERY CHAR (FREQUENCY)\\n\");\r\n     \r\n      for ( i = 0; i <l; i++)\r\n      {\r\n          printf(\" %c (%d times) ,\",BU[i],BF[i]);\r\n      }\r\n      \r\n     \/* FINAL COMPARISION INBETWEEN STRING FOR THE LAST CONDITION*\/\r\n\r\n     int x=0;\r\n\r\n      for ( i = 0; i <l; i++)\r\n      {\r\n          for ( j = 0; j <k; j++)\r\n          {\r\n              if (AU[j]==BU[i])\r\n              {\r\n                  if (AF[j]>BF[i])\r\n                  {\r\n                      x++;\r\n                  }\r\n                  \r\n              }\r\n              \r\n          }\r\n          \r\n          \r\n      }\r\n      \r\n      if (x!=l)\r\n      {\r\n          printf(\"\\n\\nNO IT DONOT SATISFY THE CONDITION\");\r\n      }\r\n      if (x==l)\r\n      {\r\n          printf(\"\\n\\nYES IT SATISY THE CONDITION\");\r\n      }\r\n      \r\n\r\n\r\n  return 0;\r\n}"
                },
                {
                    "Question":"Write a C program that performs the following operations. It prints \u2018n\u2019 rows of binary bit\r\npatterns (\u20180\u2019s and \u20181\u2019s) by following the rules as given below.\r\n(a) Consider that the first row always starts with value 0.\r\n(b) In each subsequent row, considering the previous row, replace each occurrence of 0 in the\r\nprevious row with 01 in this row, and each occurrence of 1 in the previous row with 10 in\r\nthis row. Continue like this for every subsequent row till you have \u2018n\u2019 rows. Consider the\r\nexample given below to understand this concept clearly.\r\nWrite a program to input the value \u2018n\u2019 and print the n different rows. You must use a recursive\r\nC function int theithSymbol() to generate each successive row from the previous one. You are\r\nfree to use any additional data variables and arrays (1D array, 2D array etc) that you may wish.\r\nYou are also free to choose whether you would print the i\u2019th row within the recursive function,\r\nor you would print the i\u2019th row in main() and the recursive function will only return the i\u2019th\r\nrow output to main() (say for example by filling up an array representing the i\u2019th row). But\r\nyou must ensure that the logic that you use to get each successive row from the previous one is\r\nrecursive. The order of arguments of the recursive function is also your choice.\r\nExample:\r\nInput:\r\nEnter the value of n: 5\r\n\r\nOutput:\r\nValue of Row 1: 0\r\nValue of Row 2: 01\r\nValue of Row 3: 0110\r\nValue of Row 4: 01101001\r\nValue of Row 5: 0110100110010110\r\n[Note how each row is being generated from the previous row by replacing 0 with 01 and 1 with\r\n10. The first row contains 0 by default]",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n\r\nvoid theithSymbol(int [], int);\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the number of rows you want(n).\\n\");\r\n    scanf(\"%d\", &n);\r\n    int size = (int)pow(2, n), arr[size];\r\n    arr[0] = 0;\r\n    for (int i = 1; i < size; i++)\r\n        arr[i] = 2;\r\n    printf(\"\\nThe required rows are:\\n\");\r\n    theithSymbol(arr, n);\r\n    return 0;\r\n}\r\nvoid theithSymbol(int a[], int n)\r\n{\r\n    static int count = 1;\r\n    int i = 0;\r\n    printf(\"\\nValue of Row %d: \", count++);\r\n    for (; a[i] != 2; i++)\r\n        printf(\"%d \", a[i]);\r\n    if (count > n)\r\n        return;\r\n    for (int j = i - 1; j >= 0; j--)\r\n    {\r\n        a[2 * j + 1] = (a[j]) ? 0 : 1;\r\n        a[2 * j] = a[j];\r\n    }\r\n    theithSymbol(a, n);\r\n}"
                },
                {
                    "Question":"Take input an integer number of \u2018n\u2019 digits and check whether the number is a Narcissistic\r\nnumber or not. A Narcissistic number is a number which is equal to the sum of its digits,\r\neach raised to the power of the number of digits of the original number. For example, 153 is\r\nNarcissistic since it is of 3 digits and 153 = 13 + 53 + 33\r\n\r\n. Similarly 1634 is also Narcissistic as\r\n\r\n1634 = 14 + 64 + 34 + 44\r\n\r\n. You must use the following function,\r\n\r\n\u2022 int isNarcissistic(int n) - checks whether a number is Narcissistic or not. Returns 1 if\r\nNarcissistic, 0 otherwise.\r\nYou must take the original number as input from main() and call the respective function and\r\n\r\ndisplay the appropriate result in main(). You may assume that the input will always be a posi-\r\ntive integer of commensurate number of digits.\r\n\r\nExample:\r\nInput:\r\n153\r\nOutput:\r\nNumber of digits = odd\r\nNumber is a Narcissistic number\r\nInput:\r\n632\r\nOutput:\r\nNumber of digits = odd\r\nNumber is not a Narcissistic number",
                    "Answer":"#include<stdio.h>\r\n#include<stdlib.h>\r\n#include<math.h>\r\n\r\n\/\/Creating the function\r\nint isNarcissistic(int n)\r\n{\r\n    int sum=0,m=n,k=n,no_of_digits=0; \/\/Declaring required variables\r\n\r\n    \/\/Counting no of digits\r\n    while(m!=0)\r\n    {\r\n        no_of_digits++;\r\n        m=m\/10;\r\n    }\r\n\r\n    \/\/finding the sum of its digits,each raised to the power of the number of digits of the original number\r\n    int i;\r\n    while(n!=0)\r\n    {\r\n        i=n%10; \/\/this is initializing the i as digit\r\n        sum+=pow(i,no_of_digits);\r\n        n=n\/10; \/\/n is now divided by 10\r\n    }\r\n    \/\/sum is equal to k=n,ie, original no. then returning 1\r\n    if(sum==k)\r\n    {\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        return 0;\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    int n,m,no_of_digits=0;\r\n\r\n    printf(\"Input:\\n\");\r\n    scanf(\"%d\",&n);\r\n\r\n    m=n;\r\n    \/\/Finding no. of digits\r\n    while(m!=0)\r\n    {\r\n        no_of_digits++;\r\n        m=m\/10;\r\n    }\r\n\r\n    \/\/printing results accordingly\r\n    if(no_of_digits%2==1)\r\n    {\r\n        printf(\"\\nNumber of digits = odd\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"\\nNumber of digits = even\\n\");\r\n    }\r\n\r\n\r\n    \/\/if value returned is 1 then its a narcissistic no. else not narcissistic\r\n    if(isNarcissistic(n)==1)\r\n    {\r\n        printf(\"Number is a Narcissistic number\\n\");\r\n    }\r\n    else\r\n    {\r\n        printf(\"Number is not a Narcissistic number\\n\");\r\n    }\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question" : "Definition \r\n\r\nHamming distance of two strings : \r\n      Let there be 2 strings $\u2081, $2 with respective lengths \u2081, l2 such that l\u20812 (wlog). \nAssuming the strings start with index 0, let the number of indices 0 \u2264 i \u2264l 2-1 where the two strings differ be t. \nAll indices between \u2081 - 1 and 2 - 1 will be considered to be diferring. \nThen the Hamming distance of the two strings is t. \nEg : The two strings abcd and bbdefgh are of respective lengths 4 and 7 \nand among the indices between 0 and 6, they differ in indices 0, 2, 3, 4, 5, 6. \nTherefore, the Hamming distance of the two strings is 6. \r\n\r\nQuestion \r\n\r\nSubmit one (single) C program. \r\n    Write a C program to perform the following tasks. \r\n    1. The objective is to change an existing password to one which differs from the current one. \r\n    2. Ask the user to enter the existing password, say s. \r\n    3. Then ask the user to enter a new password s'. Here are the requirements for the new password : \r\n            \u25B7 (a) The string s' has to have at least 1 vowel \r\n            \u25B7 (b) It has to have at least 1 digit between 0-9 \r\n            \u25B7 (c) It must have at least 1 special character \r\n            \u25B7 (d) The Hamming distance of s and s' must be at least length(s s')\/3.\r\n\r\nUntil all 4 conditions are satisfied, you have to keep asking for a suitable new password, \nwhile outputting the reason(s) the current s' does not qualify as a new password. \nEg. Suppose s = vft1! and s' = vftc!. Then this s' cannot be set as a new password as conditions (b) and (d) are not satisfied. \r\n\r\nYou may need to use math library function : #include imath.h as well as functions related to strings. \r\nIf you want to compile useing the terminal then use the command gcc.\/program.c -lm \r\nProper commenting, indentation and output commands carry marks.",
                    "Answer" : "null"
                }
                
            ]
        }
    ],
    "structuresAndPointers": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question":"In this program you will sort a list of student records.\r\n\r\n\uE00C Declare a global structure named student in main() that can store the roll number and the\r\nname of a student. Assume that the name consists of at most 99 English letters, and the roll\r\nnumber is a combination of 9 digits and English letters as we see in IITKGP.\r\n\uE00C Ask the user for the number of students. Then dynamically allocate an array of structure\r\nstudent of appropriate size. Populate it with user input. Use scanf(\u201C%[^\\n]s\u201D...) for\r\nscanning the name.\r\n\uE00C Ask the user to enter to sort the array by roll number, and to sort the array by name.\r\n\uE00C Use bubble sort to sort the array. The order should be the lexicographic order of the respective\r\nstring. To swap two structure variables in the list, you must use a function with the following\r\nprototype:\r\nvoid swap(struct student *A, struct student *B);\r\n\uE00C Print the sorted student records as shown in the examples below.",
                    "Answer":
                    "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\ntypedef struct student{\r\n  char roll[10];\r\n  char name[100];\r\n} *std;\r\n\r\n\r\nvoid swap(std A, std B){\r\n  struct student temp;\r\n  temp=*A;\r\n  (*A)=(*B);\r\n  (*B)=temp;\r\n}\r\n\r\n\r\nint main(){\r\n  int n, i, j, b;\r\n  struct student temp;\r\n  std studlist;\r\n  \r\n  printf(\"How many students? \");\r\n  scanf(\"%d\", &n);\r\n  studlist=(std)malloc(n*sizeof(struct student));\r\n  \r\n  printf(\"Enter roll numbers and names:\\n\");\r\n  for(i=0; i<n; i++)\r\n    scanf(\"%s%[^\\n]s\", studlist[i].roll, studlist[i].name);    \r\n  \r\n  printf(\"\\nEnter 1 to sort by roll number, 0 to sort by name: \");\r\n  scanf(\"%d\", &b);\r\n  \r\n  for(i=n-2; i>=0; i--)\r\n    for(j=0; j<=i; j++)\r\n      if((b)? (strcmp(studlist[j].roll, studlist[j+1].roll)>0) : (strcmp(studlist[j].name, studlist[j+1].name)>0))\r\n        swap(studlist+j, studlist+j+1);\r\n      \r\n   printf(\"After sorting by %s:\\n\\n\", (b==1)? \"roll number\" : \"name\");\r\n   for(i=0; i<n; i++)\r\n     printf(\"%3d. %9s %s\\n\", i+1, studlist[i].roll, studlist[i].name);\r\n   \r\n   return 0;\r\n}\r\n"
                },
                {
                    "Question":"In this program, you will search for a prefix in a list of student records sorted by roll numbers.\r\n(Definition of prefix will be explained. Ex: The string \u201Cabc\u201D has three prefixes \u2013 \u201Ca\u201D, \u201Cab\u201D, \u201Cabc\u201D.)\r\n\uE00C Define a global structure named student as given in the first problem.\r\n\uE00C Ask the user for the number of student records. Then dynamically allocate an array of\r\nstructures of appropriate size.\r\n\r\n\uE00C Populate it with user input. Assume that the user enters student records in increasing\r\n(lexicographic) order of the roll numbers.\r\n\uE00C The user should then enter a search string s.\r\n\uE00C The program should then use binary search to search for and print all student records that have s\r\nas a prefix.",
                    "Answer":
                    "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\ntypedef struct student\r\n{\r\n  char name[100];\r\n  char roll[10];\r\n} *std;\r\n\r\n\r\nint prefixmatch(char *roll, char *s)\r\n{\r\n  int i=0;\r\n  while(s[i]!='\\0')\r\n  {\r\n    if(roll[i]!=s[i])\r\n      return 0;\r\n    i++;\r\n  }\r\n  return 1;\r\n}\r\n\r\n\r\nint binsearch(std studlist, int l, int r, char s[])\r\n{\r\n  int mid;\r\n  if(l==r)\r\n    return l;\r\n  mid=(l+r)\/2;\r\n  if(strcmp(s, studlist[mid].roll)<=0)\r\n    binsearch(studlist, l, mid, s);\r\n  else binsearch(studlist, mid+1, r, s);\r\n}\r\n\r\n\r\nint main()\r\n{\r\n  int n, i;\r\n  std studlist;\r\n  char s[100];\r\n  \r\n  printf(\"How many students? \");\r\n  scanf(\"%d\",&n);\r\n  studlist=(std)malloc(n*sizeof(struct student));\r\n  \r\n  printf(\"Enter roll numbers and names (sorted by roll number):\\n\");\r\n  for(i=0; i<n; i++){\r\n    scanf(\"%s \",studlist[i].roll);\r\n    scanf(\"%[^\\n]s\",studlist[i].name);\r\n  }\r\n  \r\n  printf(\"\\nEnter prefix: \");\r\n  scanf(\"%s\", s);\r\n  \r\n  i=binsearch(studlist, 0, n-1, s);\r\n  if(!prefixmatch(studlist[i].roll, s)){ \r\n    printf(\"None found!\\n\");\r\n    return 1;\r\n  }\r\n  \r\n  printf(\"\\nFound:\\n\");\r\n  for(; prefixmatch(studlist[i].roll, s) && i<n; i++)\r\n    printf(\"%s %s\\n\", studlist[i].roll, studlist[i].name);\r\n  return 0;\r\n}"
                },
                {
                    "Question":"1. Write the following text editor program in C. For this, you need to write the following\r\nfunctions. For simplicity, assume that all inputs to the program 1s in lower case\r\ncharacters only.\r\na) main: Define a global array of 100 string pointers and name it as sptr. In an infinite loop, display a\r\nmenu and prompt the user to enter a choice(l-6). Based on the user choice (1--6), call the appropriate\r\nfunction (1->create(), 2->lengthStat(),., 6->searchReplace()) described in the following. Terminate,\r\nwhen the user enters '0.\r\nb) create: Prompt the user how many words (n< 100) to enter. Read n words of various\r\nlengths (each less that 30chars) from the keyboard one at a time, dynamically allocate just\r\nenough memory for each word entered, and store it so that the next element of sptr points to it [Note\r\nthat each element of sptr is a string pointer]. The entered words therefore get sequentially placed in\r\nsptr. Display all the words that have been entered by the user.\r\nc)lengthStat: Display the number of words that are of lengths: between 1--2 letters, between 3 - 5\r\nletters, and larger than 5 letters.\r\nd) letterstat: Find and display the number of occurrences of the vowels ('a to \"u) by considering\r\nall the words together.\r\ne)search: Read a word from the user and check if the word is present in sptr. If present, display the\r\nsequence number in sptr at which it 1s present. If it is present multiple times, display each occurrence\r\nand the sequence number in sptr at which the word is present.\r\nf)removeDuplicate: Find all duplicate words, deallocate the duplicates, and display the updated list\r\nof words.\r\ng) searchReplace: Read a word from the user and check if the word is present in sptr. If so, prompt the\r\nuser to enter the new word for replacement. Replace (deallocate old word and allocate the new word)\r\nthe word with the new word. If a word being searched is present at multiple locations, replace only the\r\nfirst occurence. Display the updated list of words\r\n\r\nTotal-30 Marks|",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include<string.h>\r\n\r\nint n;\/\/ creating a global variable for the number of strings entered\r\n\r\nvoid create(char *x[]){\r\n    char string[30];\r\n    printf(\"Enter the no. of words to enter: \\n\");\r\n    scanf(\"%d\", &n);\r\n    for(int i=0; i<n; i++){\r\n        printf(\"Enter string %d\\n\", i+1);\r\n        scanf(\"%s\", string);\r\n        printf(\"-----------------------------------------------------------------------------\\n\");\r\n        x[i]= (char *)malloc((strlen(string)+1)* sizeof(char));\/\/ allocation of memory space\r\n        strcpy(x[i], string);\/\/ copying string into the memory space\r\n    }\r\n    printf(\"The strings entered by the user are....\\n\");\r\n\r\n    for(int i=0; i<n; i++){\r\n            printf(\"%s\\n\", x[i]);\r\n    }\r\n    \r\n}\r\n\r\nvoid lengthStat(char *x[]){\r\n    int length,a,b,c;\r\n    a=b=c=0;\r\n    printf(\"From the words entered by the user:\\n\");\r\n    for(int i=0; i<n; i++){\r\n        length= strlen(x[i]);\r\n        if(length<3)a++;\r\n        else if(length<6 && length>2)b++;\r\n        else if(length>5)c++;\r\n    }\r\n    printf(\"%d have length between 1--2 letters\\n\", a);\r\n    printf(\"%d have length between 3--5 letters\\n\", b);\r\n    printf(\"%d have length greater than 5 letters\\n\", c);\r\n}\r\n\r\nvoid letterStat(char *x[]){\r\n    int num=0;\r\n    for(int i=0; i<n; i++){\r\n        for(int j=0; *x[i]!='\\0'; j++, *x[i]++){\r\n            if(*x[i]=='a' ||*x[i]=='e' ||*x[i]=='i' ||*x[i]=='o' ||*x[i]=='u'){\/\/ condition check\r\n                num++;\r\n            }\r\n        }\r\n    }\r\n    printf(\"From all the words entered, the number of vowels that occur are %d.\\n\", num);\r\n}\r\n\r\nvoid search(char *x[]){\r\n    int pos;\r\n    char word[30];\r\n    printf(\"Enter the word to be searched\\n\");\r\n    scanf(\"%s\", word);\r\n    printf(\"-----------------------------------------------------------------------------\\n\");\r\n    for(int i=0; i<n; i++){\r\n            int k= strcmp(word, x[i]);\/\/ comparing the strings\r\n            if(k==0){\r\n                printf(\"The word is present at the position %d\\n\", i+1);\r\n            }\r\n    }\r\n    printf(\"The word is not present at any other positions.\\n\");\r\n}\r\n\r\nvoid removeDuplicate(char *x[]){\r\n    int z=0;\r\n    for(int i=0; i<n-z; i++){\r\n        for(int j=i+1; j<n-z; j++){\r\n            if(strcmp(x[i],x[j])==0){\/\/ condition check\r\n                free(x[j]);\/\/ deallocating the memory space\r\n                z++; \/\/ counter is initialised to know the number of strings deallocated\r\n            }\r\n        }\r\n    }\r\n    printf(\"The updated strings are....\\n\");\r\n\r\n    for(int i=0; i<n-z; i++){\/\/ since the new no. of strings now left are n-z.\r\n            printf(\"%s\\n\", x[i]);\r\n    }\r\n}\r\n\r\nvoid searchReplace(char *x[]){\r\n    int pos;\r\n    char word[30];\r\n    printf(\"Enter the word to be searched\\n\");\r\n    scanf(\"%s\", word);\r\n    for(int i=0; i<n; i++){\r\n            int k= strcmp(word, x[i]);\/\/ string comparision\r\n            if(k==0){\r\n                printf(\"The word is present!!\\nEnter the new word you wish to replace\\n\");\r\n                scanf(\"%s\", word);\r\n                strcpy(x[i], word);\/\/ copying the new word \r\n                break;\r\n            }\r\n    }\r\n    printf(\"-----------------------------------------------------------------------------\\n\");\r\n    printf(\"The updated strings are....\\n\");\r\n\r\n    for(int i=0; i<n; i++){\r\n            printf(\"%s\\n\", x[i]);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    char *sptr[100];\r\n    int choice;\r\n    for(;;){\r\n        printf(\"-----------------------------------------------------------------------------\\n\");\r\n        printf(\"1.Create charecter strings\\n2.Display the number of words of specific length\\n\");\r\n        printf(\"3.Display the number of occurences of vowels\\n4.Search a word\\n5.Remove the duplicate words entered\\n\");\r\n        printf(\"6.Search and replace\\n0.Exit the loop\\nEnter your choice\\n\");\r\n        scanf(\"%d\", &choice);\r\n        printf(\"\\n\");\r\n        switch(choice){\r\n            case 0: return 0;break;\r\n            case 1: create(sptr);break;\r\n            case 2: lengthStat(sptr);break;\r\n            case 3: letterStat(sptr);break;\r\n            case 4: search(sptr);break;\r\n            case 5: removeDuplicate(sptr);break;\r\n            case 6: searchReplace(sptr);break;\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Part-I\r\nSubmit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\n1. Define a structure num which has 2 arrays Bin and Oct. The objective of the 2 arrays is to store the\r\nbinary representation and octal representation, respectively, of a decimal number that lies between\r\n-500 and 500.\r\nBin[0] contains the least significant bit of the binary representation. Negative numbers will be\r\nrepresented as 1\u2019s complement in binary representation.\r\nSimilarly, Oct[0] contains the least significant bit of the octal representation. Negative numbers will\r\nbe represented as 8\u2019s complement in the octal representation.\r\n2. Define a 2D array A[][] of type num, where the number of rows is at most 20 and the number of\r\ncolumns is at most 20.\r\n3. Take as input two positive integers n,m 6 20.\r\n4. For 0 6 i < n, 0 6 j < m, take as input a decimal integer aij and store in A[i][j] a structure of type\r\nnum that stores the binary and octal representations of aij.\r\n5. Define a 2D array B[][] of type bool, where the number of rows is at most 20 and the number of\r\ncolumns is at most 20.\r\n6. Set B[i][j] to 1 if in A[i][j] both the conditions are true:\r\n  (i) the ith element in the binary representation of aij is 0, (If there is no ith element then\r\nconsider the value to be 0).\r\n  (ii) the jth element in the octal representation is at most 4 (If there is no jth element in the\r\noctal representation then consider the value to be 0). In all other cases, set B[i][j] to 0.\r\n7. Print B as a 2D array. In other word, if there are n rows and m columns that are filled in B, then\r\nthe output should be printed in n rows and m columns.\r\nYou can write your own functions wherever necessary, but proper commenting is required to explain\r\nthe purpose of the function.\r\n\r\n\r\nPart-II\r\n\r\nSample Output\r\n\r\nEnter positive integer n less than equal to 20: 2\r\nEnter positive integer m less than equal to 20: 2\r\nEnter an integer between -500 and 500 for A[0][0]: 3\r\nEnter an integer between -500 and 500 for A[0][1]: 9\r\nEnter an integer between -500 and 500 for A[1][0]: 1\r\nEnter an integer between -500 and 500 for A[1][1]: -5\r\nThe matrix B is as follows:\r\n0 0\r\n1 0",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n\r\n    \/\/Task 1\r\n    struct num{\r\n        int Bin[9]; \/\/array for storing binary representation of number associated with A[i][j]\r\n        int Oct[3]; \/\/array for storing octal representation of number associated with A[i][j]\r\n        int n_bin; \/\/integer to store the length of the bin array of number associated with A[i][j]\r\n        int n_oct; \/\/integer to store the length of the oct array of number associated with A[i][j]\r\n    };\r\n\r\n    \/\/Task 2\r\n    struct num A[20][20]; \/\/2D array of type num declared\r\n\r\n    \/\/Task 3\r\n    \/\/Taking input n and m from user\r\n    int n,m;\r\n    printf(\"Enter positive integer n less than equal to 20: \");\r\n    scanf(\"%d\",&n);\r\n    printf(\"Enter positive integer m less than equal to 20: \");\r\n    scanf(\"%d\",&m);\r\n\r\n    \/\/Task 4\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            int a;\r\n            \/\/a is taken as input whose binary and octal representation are to be stored in num in arrays Bin[] and Oct[] resepectively\r\n            printf(\"Enter an integer between -500 and 500 for A[%d][%d]: \",i,j);\r\n            scanf(\"%d\",&a);\r\n            if(a>=0){ \/\/case when a is non-negetive\r\n                \/\/Special case fo a=0\r\n                if(a==0){\r\n                    \/\/0 is stored in both arrays as binary and octal equivalent of 0 are 0 only\r\n                    \/\/1 is stored in lengths of both arrays\r\n                    A[i][j].Bin[0]=0;\r\n                    A[i][j].Oct[0]=0;\r\n                    A[i][j].n_bin=1;\r\n                    A[i][j].n_oct=1;\r\n                }\r\n\r\n                \/\/a is stored in temp so that a is preserved for furthur use and count takes care of indexes of arrays in structure num\r\n                int temp=a,count=0;\r\n\r\n                \/\/Storing the required binary representation of a in Bin[]\r\n                while(temp>0){\r\n                    A[i][j].Bin[count]=temp%2;\r\n                    temp\/=2;\r\n                    count++;\r\n                }\r\n\r\n                if(a!=0){ \/\/since case of a=0 is already handled separately\r\n                    A[i][j].n_bin=count;\r\n                }\r\n\r\n                \/\/temp and count are reused for use in Oct[]\r\n                temp=a;\r\n                count=0;\r\n\r\n                \/\/Storing the required octal representation of a in Oct[]\r\n                while(temp>0){\r\n                    A[i][j].Oct[count]=temp%8;\r\n                    temp\/=8;\r\n                    count++;\r\n                }\r\n\r\n                if(a!=0){ \/\/since case of a=0 is already handled separately\r\n                    A[i][j].n_oct=count;\r\n                }\r\n\r\n            }else{ \/\/case when a is negetive\r\n                \/*absolute value of a is stored in temp so that a is preserved for furthur use and \r\n                count takes care of indexes of arrays in structure num*\/\r\n                int temp=-a,count=0;\r\n\r\n                \/\/Storing the required binary representation of a in Bin[]\r\n                while(temp>0){\r\n                    A[i][j].Bin[count]=1-(temp%2); \/\/here 1-(temp%2) is done to find 1's complement representation of a as it is negetive\r\n                    temp\/=2;\r\n                    count++;\r\n                }\r\n\r\n                A[i][j].n_bin=count;\r\n                \/\/temp and count are reused for use in Oct[]\r\n                temp=-a;\r\n                count=0;\r\n\r\n                \/\/Storing the 7's complement octal representation of a in Oct[]\r\n                while(temp>0){\r\n                    A[i][j].Oct[count]=7-(temp%8); \/\/here 7-(temp%2) is done to find 7's complement representation of a as it is negetive\r\n                    temp\/=8;\r\n                    count++;\r\n                }\r\n                A[i][j].n_oct=count;\r\n\r\n                \/\/Now we change the octal representation form 7's complement to as required which is the 8's complement\r\n                \r\n                count=0; \/\/resetting count to 0\r\n                \/*Initialising carry with 1. This carry will help to keep track of any carry during addition of 1\r\n                to the 7's complement representation and at the same time since it initially 1 it also helps to\r\n                start the process of adding*\/\r\n                int carry=1;\r\n                while(count<A[i][j].n_oct){\r\n                    if(A[i][j].Oct[count]+carry==8){ \/\/when this condition is satisfied then a carry of 1 is introduced\r\n                        A[i][j].Oct[count]=0; \/\/digit which was 7 is changed to 0 with a carry of 1\r\n                        carry=1; \/\/carry is changed to 1 to take the carry furthur\r\n                    }else{\r\n                        A[i][j].Oct[count]+=carry; \/\/carry is added to the digit if final digit is <=7\r\n                        carry=0; \/\/no need to take the carry furthur so it is made 0\r\n                    }\r\n                    count++; \/\/count now moves to the next digit of the 7's complement\r\n                }\r\n                \/\/Finally we check if any more carry is left. If yes then we append that to the end of the 8's complement\r\n                if(carry==1){\r\n                    A[i][j].Oct[count]=1;\r\n                    count++; \/\/count is modified to new value\r\n                }\r\n                A[i][j].n_oct=count; \/\/length of the array Oct[] is modified to new value of count which may be the old one too\r\n            }\r\n        }\r\n    }\r\n\r\n    \/\/Task 5\r\n    int B[20][20]; \/\/array B declared\r\n\r\n    \/\/Task 6\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            \/*Checking if there is no ith element in array Bin[](then element is taken to be 0) or Bin[i]=0 : \r\n            in any one case first condition is satisfied\r\n            Then checking if there is no jth element in array Oct[](then element is taken to be 0 which is less than 4) or Oct[j]<=4 : \r\n            in any one case second condition is satisfied\r\n            And finally we check if both first condition and second condition are satisfied, then only B[i][j] is 1 else 0*\/\r\n            if((i>=A[i][j].n_bin || A[i][j].Bin[i]==0) && (j>=A[i][j].n_oct || A[i][j].Oct[j]<=4)){\r\n                B[i][j]=1;\r\n            }else{\r\n                B[i][j]=0;\r\n            }\r\n        }\r\n    }\r\n\r\n    \/\/Task 7\r\n    \/\/Printing B as a 2D array\r\n    printf(\"\\nThe matrix B is as follows:\\n\");\r\n    for(int i=0;i<n;i++){\r\n        for(int j=0;j<m;j++){\r\n            printf(\"%d \",B[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Take 10 names, which include the first name and the surname, as input from the user. Assume that\r\nany first name and any surname contains at most 50 characters. Sort these 10 names in dictionary\r\naccording to their first names and output. Also sort these 10 names in dictionary order according to their\r\nsurnames and output.\r\n\r\nYou are not allowed to copy one string into another either by using strcpy function\r\nor by writing a loop to copy character-by-character or by any other means.\r\nHint: Use pointers.\r\n\r\nSubmit one (single) C\/C++ program.\r\n\r\nSample Output\r\n\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$ .\/a.out\r\nWrite 10 names\r\nRam Das\r\nSham Mondal\r\nSachin Tendulkar\r\nLata Mangeskar\r\nSourav Ganguly\r\nSunil Gavaskar\r\nRitwik Roshan\r\nSatyajit Ray\r\nRabindranath Tagore\r\nPrakash Deb\r\nSorted according to first name:\r\nLata Mangeskar\r\nPrakash Deb\r\nRabindranath Tagore\r\nRam Das\r\nRitwik Roshan\r\nSachin Tendulkar\r\nSatyajit Ray\r\nSham Mondal\r\nSourav Ganguly\r\nSunil Gavaskar\r\nSorted according to last name:\r\nRam Das\r\nPrakash Deb\r\nSourav Ganguly\r\nSunil Gavaskar\r\nLata Mangeskar\r\nSham Mondal\r\nSatyajit Ray\r\nRitwik Roshan\r\nRabindranath Tagore\r\npalash@palash-ThinkPad-X1-Yoga-3rd:~$",
                    "Answer": "#include<stdio.h>\r\n\r\nint main(){\r\n    char *p[10],*q[10]; \/\/character pointer arrays to store addresses of strings name[i] and surname[i] respectively\r\n    int n=10; \/\/stores the number of names to be taken as input which is 10 in this program\r\n    char name[10][50],surname[10][50]; \/*name and surname 2-D character arrays or in other words string arrays to store \r\n                                        name and surname respectively*\/\r\n    \/\/Taking input from user\r\n    printf(\"Write 10 names\\n\");\r\n    for(int i=0; i<n; i++){\r\n        scanf(\"%s %s\", name[i], surname[i]);\r\n        \/\/name[i] can be used to point to the address of name[i][0] which is stored in p[i] for later use\r\n        \/\/Same with surname\r\n        p[i] = name[i];\r\n        q[i] = surname[i];\r\n    }\r\n    \r\n    \/\/Sorting according to name in dictionary order using bubble sort\r\n    for(int i=0; i<n-1; i++){\r\n        for(int j=0;j<n-i-1;j++){\r\n            int m; \/\/it is used to traverse through the p[j] and p[j+1] simultaneously while comparing their characters\r\n            int check; \/\/it is used to check whether two string are equal, less or more lexicographically\r\n            char ch1 = p[j][0]; \/\/used to store value of p[j][m], here it is intialised with p[j][0]\r\n            char ch2 = p[j+1][0]; \/\/Same like ch1\r\n            for(m=0;ch1!='\\n' && ch2!='\\n';m++){ \/\/loop runs till one of the string ends or till break is encountered\r\n                ch1 = p[j][m];\r\n                ch2 = p[j+1][m];\r\n                \/\/ch1 and ch2 if in uppercase are changed to lowercase so that comparison of their ascii can be done fairly\r\n                if(ch1>=65 && ch1<=90) ch1=ch1+32;\r\n                if(ch2>=65 && ch2<=90) ch2=ch2+32;\r\n                if(ch1>ch2){\r\n                    check=1; \/\/if p[j] is lexicographically greater than p[j+1] then they need to be swapped and so check is made one\r\n                    break; \/\/no need to check further from point of 1st dissimilarity\r\n                }else if(ch1<ch2){\r\n                    check=0; \/\/if p[j] is lexicographically smaller than p[j+1] then they need not to be swapped and so check is made zero\r\n                    break; \/\/no need to check further from point of 1st dissimilarity\r\n                }else{\r\n                    check=2; \/\/if p[j] is lexicographically equal to p[j+1] till this position then check is made two\r\n                }\r\n            }\r\n            if(check==2){ \/\/if check is 2 then either one is prefix of another or they are equal\r\n                if(ch1!='\\n') check=1; \/\/if p[j] is prefix of p[j+1] then we do not swap\r\n                else check=0;\r\n            }\r\n            if(check){ \/\/swap only if check=1\r\n                char *temp; \/\/temporary variable to store value of p[j] which is address of p[j][0]\r\n                \/\/address of p[j][0] and p[j+1][0] are interchanged so that the pointers now point to interchanged strings\r\n                \/\/p[j] now points to the intial p[j+1] string and reverse for p[j+1]\r\n                temp=p[j];\r\n                p[j]=p[j+1];\r\n                p[j+1]=temp;\r\n                \/\/same is done for q[j] and q[j+1]\r\n                temp=q[j];\r\n                q[j]=q[j+1];\r\n                q[j+1]=temp;\r\n            }\r\n        }\r\n    }\r\n    \/\/Final list of names sorted according to first name is printed\r\n    printf(\"\\n\\nSorted according to first name:\\n\");\r\n    for(int i=0; i<n; i++){\r\n        printf(\"%s %s\\n\", p[i],q[i]);\r\n    }\r\n\r\n    \/\/Same logic is for this part where we sort according to last name and so we deal with q instead of p\r\n    for(int i=0; i<n-1; i++){\r\n        for(int j=0;j<n-i-1;j++){\r\n            int m;\r\n            int check;\r\n            char ch1 = q[j][0];\r\n            char ch2 = q[j+1][0];\r\n            for(m=0;ch1!='\\n' && ch2!='\\n';m++){\r\n                ch1 = q[j][m];\r\n                ch2 = q[j+1][m];\r\n                if(ch1>=65 && ch1<=90) ch1=ch1+32;\r\n                if(ch2>=65 && ch2<=90) ch2=ch2+32;\r\n                if(ch1>ch2){\r\n                    check=1;\r\n                    break;\r\n                }else if(ch1<ch2){\r\n                    check=0;\r\n                    break;\r\n                }else{\r\n                    check=2;\r\n                }\r\n            }\r\n            if(check==2){\r\n                if(ch1!='\\n') check=1;\r\n                else check=0;\r\n            }\r\n            if(check){\r\n                char *temp;\r\n                temp=p[j];\r\n                p[j]=p[j+1];\r\n                p[j+1]=temp;\r\n                temp=q[j];\r\n                q[j]=q[j+1];\r\n                q[j+1]=temp;\r\n            }\r\n        }\r\n    }\r\n    \/\/Final list of names sorted according to last name is printed\r\n    printf(\"\\n\\nSorted according to last name:\\n\");\r\n    for(int i=0; i<n; i++){\r\n        printf(\"%s %s\\n\", p[i],q[i]);\r\n    }\r\n}"
                },
                {
                    "Question": "You will read in positive integers m and n. Then you will dynamically allocate two strings A and B of sizes m and n, \r\nrespectively. You will read the two strings A and B, each having lower case alphabets only.  You will write three separate\r\nfunctions to find the following: The number of unique characters in their union, intersection, difference. These\r\nfunctions will be called for A and B, and the results returned to the main program, from where they will be printed\r\nneatly in a suitably understandable form. Once this is done, you will write another set of three functions to return the\r\nrespective strings of their union, intersection and difference. For this you will dynamically declare the character arrays\r\nof the results based on the sizes of m and n. These functions will be called for A and B and the results returned to the\r\nmain program. These returned results will be printed neatly in a suitably understandable form in the main program.\r\nSave the file as A14_<Roll Number>.c (example A14_21AG10002.c). Build, Run and Test it for the given data as well as your\r\nown data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Read positive integers m and n and dynamically allocate strings A and B of sizes m and n. Take as input strings A and B\r\nand print them. Assume valid inputs will be provided.\r\n2. Write functions to find the number of unique letters in union, intersection and difference of two strings and return the\r\nsame. Call these in the main program for the various combinations of A and B, as respective arguments and print the\r\nresults suitably from the main program.\r\n3. Write functions to find the actual unique letters in the union, intersection and difference of two strings and return the\r\nsame as a string pointer. Dynamically allocate the resulting string at the places needed, so that the result can be sent\r\nand received through the function calls. Call these functions in the main program for the various combinations of A and\r\nB and print the results suitably from the main program.\r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined functions. They may be nonrecursive\r\nor\r\nrecursive,\r\nas\r\nper\r\nyour\r\nchoice]\r\nTest Data: Test it with your own data for various cases.",
                    "Answer": "#include<stdio.h>\r\n#include<stdlib.h>\r\nint union_num(char*a ,char*b,int x,int y)\r\n{\r\n    int i,c[26] = {0},j=0;\r\n    for(i=0;i<26;i++)c[i]=0;\r\n    for(i=0;i<x;i++)c[a[i]-'a']=1;\r\n    for(i=0;i<y;i++)c[b[i]-'a']=1;\r\n    for(i=0;i<26;i++)\r\n    {\r\n        if(c[i]!=0)\r\n            j=j+1;\r\n    }\r\n    return j;\r\n}\r\n\r\nchar* unionn(char* a,char* b,int x,int y)\r\n{\r\n    int c[26] = {0};\r\n    char*temp = (char*)malloc((100)*sizeof(char));\r\n    int i;\r\n    for(i=0;i<x;i++)c[a[i]-'a']=1;\r\n    for(i=0;i<y;i++)c[b[i]-'a']=1;\r\n    int l = 0;\r\n    for(i=0;i<26;i++)\r\n    {\r\n        if(c[i]==1)\r\n        {\r\n            temp[l] = i+'a';\r\n            l++;\r\n        }\r\n    }\r\n    temp[l] = '\\0';\r\n    return temp;\r\n}\r\n\r\nchar* inters(char* a,char* b,int x,int y)\r\n{\r\n    char* temp = (char*)malloc((x+y)*sizeof(char));\r\n    int i,d[26],e[26];\r\n    for(i=0;i<26;i++)\r\n    {\r\n        d[i]=0;\r\n        e[i]=0;\r\n    }\r\n    for(i=0;i<x;i++)e[a[i]-'a']=1;\r\n    for(i=0;i<y;i++)d[b[i]-'a']=1;\r\n    int l = 0;\r\n    for(i=0;i<26;i++)\r\n    {\r\n        if(e[i]!=0 && d[i]!=0)\r\n        {\r\n            temp[l] = i+'a';\r\n            l++;\r\n        }\r\n    }\r\n    temp[l] = '\\0';\r\n    return temp;\r\n}\r\n\r\nint inters_num(char* a,char* b,int x,int y)\r\n{\r\n    int i,c[26]={0},d[26]={0},j=0;\r\n    for(i=0;i<x;i++)c[a[i]-'a']=1;\r\n    for(i=0;i<y;i++)d[b[i]-'a']=1;\r\n    for(i=0;i<26;i++)if(c[i]!=0 && d[i]!=0)j=j+1;\r\n    return j;\r\n}\r\n\r\n\r\nint diffnum(char* a, char* b, int x, int y)\r\n{\r\n    int i,j=0,c[26];\r\n    for(i=0;i<26;i++)c[i]=0;\r\n    for(i=0;i<x;i++)\r\n        c[a[i]-'a']=1;\r\n    for(i=0;i<y;i++)\r\n        c[b[i]-'a']=0;\r\n    for(i=0;i<26;i++)\r\n    {\r\n        if(c[i])\r\n            j=j+1;\r\n    }\r\n    return j;\r\n}\r\n\r\nchar* diff(char* a,char* b,int x,int y)\r\n{\r\n    int i,j=0;\r\n    int c[26];\r\n    for(i=0;i<26;i++)c[i]=0;\r\n    for(i=0;i<x;i++)c[a[i]-'a']=1;\r\n    for(i=0;i<y;i++)c[b[i]-'a']=0;\r\n    char* temp =(char*)malloc((100)*sizeof(char));\r\n    int l = 0;\r\n    for(i=0;i<26;i++)\r\n    {\r\n        if(c[i]==1)\r\n        {\r\n            temp[l] = i+'a';\r\n            l++;\r\n        }\r\n    }\r\n    temp[l] = '\\0';\r\n    return temp;\r\n}\r\n\r\n\r\n\r\nint main()\r\n{\r\n    int m,n,sizep=0,sizeq=0;\r\n    char *p,*q;\r\n    printf(\"Enter the values of m and n respectively.\");\r\n    scanf(\"%d%d\",&m,&n);\r\n    p=(char*)malloc((m+1)*sizeof(char));\r\n    q=(char*)malloc((n+1)*sizeof(char));\r\n    printf(\"\\nEnter two strings of max %d and %d length:\",m,n);\r\n    scanf(\"%s%s\",p,q);\r\n    printf(\"\\n%s and %s\",p,q);\r\n    int i=0;\r\n    while(p[i]!='\\0')\r\n    {\r\n        sizep++;\r\n        i++;\r\n    }\r\n    i=0;\r\n    while(q[i]!='\\0')\r\n    {\r\n        sizeq++;\r\n        i++;\r\n    }\r\n    printf(\"\\nno. of elements in union=%d & string=%s\",union_num(p,q,sizep,sizeq),unionn(p,q,sizep,sizeq));\r\n    printf(\"\\nno. of elements in intersection=%d & string=%s\",inters_num(p,q,sizep,sizeq),inters(p,q,sizep,sizeq));\r\n    printf(\"\\nno. of elements in A-B=%d & string=%s\",diffnum(p,q,sizep,sizeq),diff(p,q,sizep,sizeq));\r\n    printf(\"\\nno. of elements in B-A=%d & string=%s\\n\",diffnum(q,p,sizeq,sizep),diff(q,p,sizeq,sizep));\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question":"A country has \u2018n\u2019 number of zoos, where each zoo has a certain number of tigers, lions and\r\nelephants. It is required to perform some analysis on the number of animals within each zoo of\r\nthe country. Declare a structure named \u2018zoo\u2019 that contains three integer type values, each to hold\r\nthe number of tigers, lions and elephants within that zoo. Also declare an array \u2018zoo count[ ]\u2019 of\r\nsize n, which is an array of structure of the type \u2018zoo\u2019 that holds the information about all the\r\nn zoos of the country. Take, \u2018n\u2019 as input from the keyboard and fill out the array \u2018zoo count[ ]\u2019\r\ntaking the number of tigers, lions and elephants of each zoo as user input. Note that zoo count[0]\r\nholds the number of animals (tigers, lions and elephants) of the first zoo, zoo count[1] holds the\r\nnumber of animals of the second zoo and so on. Also as zoo count[ ] is an array of structures,\r\neach element of the array is actually a structure of type \u2018zoo\u2019. After you have taken input,\r\nperform the following three operations and print the result.\r\n\u2022 Print the total number of tigers in all the zoos within the county.\r\n\u2022 Print all the zoo numbers (i.e., the index of the zoo count[ ] array) that contains less than\r\nor equal to 6 lions.\r\n\u2022 Print the zoo numbers (i.e., the indices of the zoo count[ ] array) according to the increasing\r\norder of the number of elephants contained within each zoo.\r\nExample:\r\nInput:\r\nEnter \u2018n\u2019 : 3\r\nEnter for zoo 1\r\nTigers - 4\r\nLions - 3\r\nElephants - 10\r\nEnter for zoo 2\r\nTigers - 2\r\nLions - 8\r\nElephants - 5\r\nEnter for zoo 3\r\nTigers - 8\r\nLions - 5\r\nElephants - 4\r\nOutput:\r\nTotal number of tigers = 14\r\nZoos with lions less than or equal to 6 = 1, 3\r\nZoo indices as per increasing order of elephants = 3, 2, 1",
                    "Answer":"#include <stdio.h>\r\nmain()\r\n{\r\n    int n,sum=0,i,j,min,count;\r\n    printf(\"Enter the number of zoos in the country : \");\r\n    scanf(\"%d\",&n);\r\n    int temp_array[n];\r\n    \/\/Defining the structure.\r\n    struct zoo\r\n    {\r\n        int elephant;\r\n        int tiger;\r\n        int lion;\r\n    };\r\n    struct zoo zoo_count[n]; \/\/Defining the array variable for structure.\r\n    printf(\"\\n\");\r\n    \/\/Inputting data for various zoos.\r\n    for (i=0;i<n;++i)\r\n    {\r\n        printf(\"-- Enter data for ZOO %d --\\n\",i+1);\r\n        printf(\"No. of Elephants : \");\r\n        scanf(\"%d\",&zoo_count[i].elephant);\r\n        printf(\"No. of Tigers : \");\r\n        scanf(\"%d\",&zoo_count[i].tiger);\r\n        printf(\"No. of Lions : \");\r\n        scanf(\"%d\",&zoo_count[i].lion);\r\n        printf(\"\\n\");\r\n    }\r\n    \/\/Finding the total number of tigers in all zoo.\r\n    for (i=0;i<n;++i)\r\n    {\r\n        sum+=zoo_count[i].tiger;\r\n    }\r\n    printf(\"Total number of tigers in all the zoo within the country is : %d \\n\\n\",sum);\r\n    printf(\"Zoos with number of lions less than or equal to 6 are : \");\r\n    \/\/Searching for zoos with lions less than or equal to 6.\r\n    for (i=0;i<n;++i)\r\n    {\r\n       if (zoo_count[i].lion<=6)\r\n       {\r\n           printf(\"%d \",i+1);\r\n       }\r\n    }\r\n    printf(\"\\n\\n\");\r\n    printf(\"Zoos as per increasing order of elephant : \");\r\n    \/\/Storing the number of elephants in different zoo in a temporary array.\r\n    for (i=0;i<n;++i)\r\n    {\r\n        temp_array[i]=zoo_count[i].elephant;\r\n    }\r\n    \/\/Performing bubble sort on the temporary array to sort the number of elephants in ascending order.\r\n    for (i=0;i<n;++i)\r\n    {\r\n        for (j=i+1;j<n;++j)\r\n        {\r\n            if (temp_array[j]<temp_array[i])\r\n            {\r\n                temp_array[j]=temp_array[j]-temp_array[i];\r\n                temp_array[i]=temp_array[j]+temp_array[i];\r\n                temp_array[j]=temp_array[i]-temp_array[j];\r\n            }\r\n        }\r\n    }\r\n    \/\/Comparing the value and printing the index of the zoo.\r\n    for (i=0;i<n;++i)\r\n    {\r\n        for (j=0;j<n;++j)\r\n        {\r\n            if (temp_array[i]==zoo_count[j].elephant)\r\n            {\r\n                printf(\"%d \",j+1);\r\n            }\r\n        }\r\n    }\r\n    printf(\"\\n\");\r\n}"
                },
                {
                    "Question":"Consider a date calculator that performs the following operations as per the following C functions\r\n-\r\ni leap year(date) - checks if the date belongs to a leap year or not, returns 1 if date is in leap\r\nyear, returns 0 otherwise.\r\nii day identify (date) - identify the day of the date i.e., Monday, Tuesday. . . It does not return\r\nanything, prints the day within the function.\r\niii diff(date1, date2) - calculates the difference between two dates passed as arguments in the\r\nnumber of days and returns it.\r\niv date identify(date1, n)- identify the date that is after n days from the given date. This\r\nreturns the final date.\r\nWrite a program that performs all the above operations as per the menu selected by the user\r\n(see example below). For storing the date, use a structure named date that contains three\r\nmembers of integer type: namely day, month and year. You must declare a function for each of\r\nthe above mentioned operations. For taking input the dates, you can follow the example shown\r\nbelow. No need to keep a separate logic that checks whether the input date is valid or not, you\r\n\r\n3\r\n\r\nmay assume that the user always enters a valid date.\r\nExample 1:\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check leap year\r\n2. Identify corresponding day of a given date\r\n3. Compute difference between two dates\r\n4. Calculate the next date after n days from a given date\r\nEnter your option:\r\n1\r\nEnter date:\r\nDay -12\r\nMonth -5\r\nYear - 2022\r\nOutput:\r\nThe given date is does not belongs to a leap year\r\n\r\nExample 2:\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check leap year\r\n2. Identify corresponding day of a given date\r\n3. Compute difference between two dates\r\n4. Calculate the next date after n days from a given date\r\nEnter your option:\r\n2\r\nEnter date:\r\nDay - 12\r\nMonth - 1\r\nYear - 2022\r\nOutput:\r\nThe corresponding day of the given date is Wednesday\r\n\r\nExample 3:\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check leap year\r\n2. Identify corresponding day of a given date\r\n3. Compute difference between two dates\r\n4. Calculate the next date after n days from a given date\r\nEnter your option:\r\n3\r\nEnter first date:\r\nDay - 12\r\nMonth - 2\r\nYear - 2022\r\nEnter second date:\r\nDay - 29\r\nMonth - 1\r\nYear - 2022\r\n[NOTE:- The first date need not necessarily always be before the second date as per calendar\r\norder. Please consider this fact]\r\nOutput:\r\nThere are 14 days between the given two dates.\r\n\r\nExample 3:\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check leap year\r\n2. Identify corresponding day of a given date\r\n3. Compute difference between two dates\r\n4. Calculate the next date after n days from a given date\r\nEnter your option:\r\n3\r\nEnter first date:\r\nDay - 12\r\nMonth - 2\r\nYear - 2022\r\nEnter second date:\r\nDay - 29\r\nMonth - 1\r\nYear - 2022\r\n[NOTE:- The first date need not necessarily always be before the second date as per calendar\r\norder. Please consider this fact]\r\nOutput:\r\nThere are 14 days between the given two dates.\r\n\r\nExample 4:\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check leap year\r\n2. Identify corresponding day of a given date\r\n3. Compute difference between two dates\r\n4. Calculate the next date after n days from a given date\r\nEnter your option:\r\n4\r\nEnter date:\r\nDay - 28\r\nMonth -1\r\nYear - 2022\r\nEnter number of days: 12\r\nOutput:\r\nThe corresponding date after 12 days is 9\/2\/2022 [Print in format dd\/mm\/yyyy]",
                    "Answer":"#include <stdio.h.>\r\n#include <string.h>\r\n#include <math.h>\r\n\r\ntypedef struct\r\n{\r\n    int day, month, year;\r\n}\r\ndate;\r\n\r\nint leap_year (date);\r\nvoid day_identify (date, int);\r\nint _diff (date, date);\r\ndate date_identify (date, int);\r\n\r\ndate m_to_d (date x); \/\/ Converts months to days e.g. 20\/3\/2003 becomes 31(Jan) + 28(Feb) + 20 \/3\/2003 = 79\/3\/2003\r\n\r\nint main()\r\n{\r\n    \/\/ Variable Declaration\r\n    date input, input2; \/\/ input : Stores first date , input2 : Stores second date\r\n    char day[10]; \/\/ day : Stores day of 1st January of year of second date\r\n    int choice, days; \/\/ choice : Stores choice in Menu , days : number of days they want after entered date\r\n\r\n    \/\/ Prompting user for inputting date and storing input.\r\n    printf(\"Enter a date in dd, mm & yyyy format.\\n\");\r\n    scanf(\"%d%d%d\", &input.day, &input.month, &input.year);\r\n\r\n    \/\/ Printing Menu\r\n    printf(\"\\n------------------------------MENU------------------------------\\n\");\r\n    printf(\"1. Check if entered date lies in a leap year.\\n\");\r\n    printf(\"2. Get day on which the entered date lies.\\n\");\r\n    printf(\"3. Calculate the number of days between entered date and another date.\\n\");\r\n    printf(\"4. Get the date that lies a particular number of days after entered date.\\n\\n\");\r\n\r\n    \/\/ Prompting user to enter choice in Menu and storing input.\r\n    printf(\"Enter number corresponding to your choice.\\n\");\r\n    scanf(\"%d\", &choice);\r\n\r\n    switch (choice)\r\n    {\r\n    case 1: \/\/ Check if entered date lies in a leap year.\r\n        printf((leap_year(input) == 1) ? \"\\n\\nEntered date lies in a leap year.\\n\" : \"\\n\\nEntered date does not lie in a leap year.\\n\");\r\n        break;\r\n\r\n    case 2: \/\/ Get day on which the entered date lies.\r\n        printf(\"\\nEnter day of 1st January, %d.\\n\", input.year);\r\n        scanf(\"%s\", day);\r\n        strlwr(day); \/\/ Reducing string containing day to lowercase.\r\n        \/\/ Linking each day with a number, so as to make computations easier, and calling function with appropriate parameters.\r\n        if (strcmp(\"sunday\", day) == 0)\r\n            day_identify(input, 0);\r\n        else if (strcmp(\"monday\", day) == 0)\r\n            day_identify(input, 1);\r\n        else if (strcmp(\"tuesday\", day) == 0)\r\n            day_identify(input, 2);\r\n        else if (strcmp(\"wednesday\", day) == 0)\r\n            day_identify(input, 3);\r\n        else if (strcmp(\"thursday\", day) == 0)\r\n            day_identify(input, 4);\r\n        else if (strcmp(\"friday\", day) == 0)\r\n            day_identify(input, 5);\r\n        else if (strcmp(\"saturday\", day) == 0)\r\n            day_identify(input, 6);\r\n        break;\r\n\r\n    case 3: \/\/ Calculate the number of days between entered date and another date.\r\n        printf(\"\\nEnter a date in dd, mm & yyyy format.\\n\");\r\n        scanf(\"%d%d%d\", &input2.day, &input2.month, &input2.year);\r\n        printf(\"\\n\\nDifference between the two dates is %d days.\\n\", _diff(input, input2));\r\n        break;\r\n\r\n    case 4: \/\/ Get the date that lies a particular number of days after entered date.\r\n        printf(\"\\nEnter number of days.\\n\");\r\n        scanf(\"%d\", &days);\r\n        date output = date_identify(input, days);\r\n        printf(\"\\n\\nThe required date is %2d\/%2d\/%d\\n\", output.day, output.month, output.year);\r\n        break;\r\n\r\n    default:\r\n        printf(\"Invalid Choice.\\n\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nint leap_year (date input) \/\/ returns 1 if date lies in a leap year and returns 0 otherwise.\r\n{\r\n    \/\/ If year is divisible by 400, it a leap year. If indivisible by 400, but divisible by 100 it is not a leap year. All other years divisible by 4 are leap years.\r\n    return (input.year % 400 == 0) ? 1 : (input.year %100 == 0) ? 0 : (input.year % 4 == 0) ? 1 : 0;\r\n}\r\n\r\nvoid day_identify (date input, int day) \/\/ Prints day on which date falls.\r\n{\r\n    input = m_to_d(input); \/\/ Converts all months to days(excess)\r\n\r\n    switch ((input.day  + day) % 7 - 1) \/\/ (input.day + day) % 7 - 1 gives odd\/excess days\r\n    {\r\n    case 0:\r\n        printf(\"\\n\\nIts a Sunday.\\n\");\r\n        break;\r\n\r\n    case 1:\r\n        printf(\"\\n\\nIts a Monday.\\n\");\r\n        break;\r\n\r\n    case 2:\r\n        printf(\"\\n\\nIts a Tuesday.\\n\");\r\n        break;\r\n\r\n    case 3:\r\n        printf(\"\\n\\nIts a Wednesday.\\n\");\r\n        break;\r\n\r\n    case 4:\r\n        printf(\"\\n\\nIts a Thursday.\\n\");\r\n        break;\r\n\r\n    case 5:\r\n        printf(\"\\n\\nIts a Friday.\\n\");\r\n        break;\r\n\r\n    case 6:\r\n        printf(\"\\n\\nIts a Saturday.\\n\");\r\n    }\r\n}\r\n\r\nint _diff (date input, date input2) \/\/ Returns number of days between the two dates.\r\n{\r\n    int diff = 0; \/\/ Stores required output\r\n\r\n    \/\/ Converts all months of both dates into days(excess).\r\n    input = m_to_d(input);\r\n    input2 = m_to_d(input2);\r\n\r\n    \/\/ max : stores date with year that comes later , min : stores date with year that comes earlier\r\n    date max = (input.year > input2.year) ? input : input2, min = (input.year > input2.year) ? input2 : input;\r\n\r\n    for (int i = min.year; i < max.year; i++)\r\n        diff += (i % 4 == 0) ? 366 : 365; \/\/ Adds number of days that max is ahead of min in years\r\n\r\n    return abs(diff + max.day - min.day); \/\/ Adds number of days that max is ahead of min in days and returns it\r\n}\r\n\r\ndate date_identify (date input, int days) \/\/ Returns date that lies a particular number of days after entered date.\r\n{\r\n    input.day += days; \/\/ input.days now stores excess days.\r\n    int flag = 0, num; \/\/ flag: To keep track of when all excess days have been converted to months , num : To store number of days in Feb\r\n\r\n    \/\/ Converting excess days to months.\r\n    while (flag == 0) \/\/ While there are excess days, that need to be converted.\r\n    {\r\n        switch (input.month % 12) \/\/ Months might be greater than 12 (excess), so we take month % 12. Dec = 0 instead of 12\r\n        {\r\n            \/\/ 31 day months\r\n        case 0: \/\/ December\r\n        case 1: \/\/ January\r\n        case 3: \/\/ March\r\n        case 5: \/\/ May\r\n        case 7: \/\/ July\r\n        case 8: \/\/ August\r\n        case 10: \/\/ October\r\n            if (input.day > 31)\r\n            {\r\n                input.day -= 31; \/\/ Removes excess days for current 31-day month.\r\n                input.month += 1; \/\/ Updates month to next month.\r\n            }\r\n            switch (input.month % 12) \/\/ Checks if there are still excess days left and updates flag accordingly.\r\n            {\r\n            case 2: \/\/ February (next month after January)\r\n                if (input.day <= (leap_year(input) == 0) ? 28 : 29) \/\/ If excess days remain\r\n                    flag++;\r\n                    break;\r\n\r\n                \/\/ 30 day months\r\n            case 4: \/\/ April (next month after March)\r\n            case 6: \/\/ June (next month after May)\r\n            case 9: \/\/ September (next month after August)\r\n            case 11: \/\/ November (next month after October)\r\n                if (input.day <= 30) \/\/ If excess days remain\r\n                    flag++;\r\n                    break;\r\n\r\n                \/\/ 31 day months\r\n            case 1: \/\/ January (next month after December)\r\n            case 8: \/\/ August (next month after July)\r\n                if (input.day <= 31) \/\/ If excess days remain\r\n                    flag++;\r\n            }\r\n            break;\r\n\r\n            \/\/ 30 day months\r\n        case 4: \/\/ April\r\n        case 6: \/\/ June\r\n        case 9: \/\/ September\r\n        case 11: \/\/ November\r\n            if (input.day > 30)\r\n            {\r\n                input.day -= 30; \/\/ Removes excess days of current 30-day month.\r\n                input.month += 1; \/\/ Updates month to next month.\r\n            }\r\n            if (input.day <= 31) \/\/ All months after 30 day months are 31 day months.\r\n                flag++;\r\n            break;\r\n\r\n        case 2: \/\/ February\r\n            num = (leap_year(input) == 1) ? 29 : 28;\r\n            if (input.day > num)\r\n            {\r\n                input.day -= num; \/\/ Removes excess days of current month.\r\n                input.month += 1; \/\/ Updates month to next month.\r\n            }\r\n            if (input.day <= 31) \/\/ Next month is March with 31 days.\r\n                flag++;\r\n        }\r\n    }\r\n\r\n    \/\/ Converting excess months to years.\r\n    while (input.month > 12)\r\n    {\r\n        input.month -= 12; \/\/ Removes excess months of current year.\r\n        input.year += 1; \/\/ Updates year to next year.\r\n    }\r\n\r\n    return input;\r\n}\r\n\r\ndate m_to_d (date x) \/\/ Converts months to days e.g. 20\/3\/2003 becomes 31(Jan) + 28(Feb) + 20 \/3\/2003 = 79\/3\/2003\r\n{\r\n    switch (x.month)\r\n    {\r\n    case 12: \/\/ If month = December, add number of days of November = 31, and move on to next case, as there is no break statement. Similar for following cases.\r\n        x.day += 30;\r\n\r\n    case 11:\r\n        x.day += 31;\r\n\r\n    case 10:\r\n        x.day += 30;\r\n\r\n    case 9:\r\n        x.day += 31;\r\n\r\n    case 8:\r\n        x.day += 31;\r\n\r\n    case 7:\r\n        x.day += 30;\r\n\r\n    case 6:\r\n        x.day += 31;\r\n\r\n    case 5:\r\n        x.day += 30;\r\n\r\n    case 4:\r\n        x.day += 31;\r\n\r\n    case 3:\r\n        x.day += (leap_year(x) == 0) ? 28 : 29;\r\n\r\n    case 2: \/\/ If month = February, add number of days of January = 31\r\n        x.day += 31;\r\n    }\r\n\r\n    return x;\r\n}"
                },
                {
                    "Question":"A user is asked to input two n-dimensional vectors but the dimension is not known initially. We\r\nuse a structure to define a vector type variable, which contains two elements, an integer number\r\ndenoting the dimension of the vector the structure is currently storing and a float pointer that\r\npoints to a dynamically allocated array that stores the vector components corresponding to each\r\nof the n dimensions. Take input a number n and correspondingly take input two n-dimensional\r\nvectors, storing the dimension and the components of each vector into two corresponding vector\r\n\r\ntype struct variables. Note that before taking input the vector components, remember to initial-\r\nize the array within the struct variable which will hold the componants. Write the C-functions\r\n\r\nto perform the following.\r\n\u2022 struct Vector VectorSum(struct Vector *v1, struct Vector *v2): Performs the sum\r\nof the two vectors of the same dimension and returns another structure of type vector that\r\nholds the sum. For two n-dimensional vectors with components [x1, x2, x3,...,xn] and [y1,\r\ny2, y3,...,yn], their sum is another n-dimensional vector [x1+y1, x2+y2, x3+y3,....,xn+yn].\r\n\u2022 int OrthogonalTest(struct Vector *v1, struct Vector *v2): Returns 1 if two vectors\r\nv1 and v2 are orthogonal, 0 otherwise. Two n-dimensional vectors with components [x1,\r\nx2, x3,...,xn] and [y1, y2, y3,...,yn] are said to be orthogonal if their inner product (dot\r\nproduct) is zero, x1.y1+x2.y2+x3.y3+....+xn.yn = 0.\r\nAfter taking input the two vectors, first print both the vectors on console in the format \u2018(n,\r\n[.......])\u2019, where n represents the dimension and put the dimension components within the square\r\nbrackets. Hence call the above mentioned functions from main() and print the results returned.",
                    "Answer":"#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\n\/\/ Defining the structure vector\r\nstruct vector\r\n{\r\n    int n;\r\n    float *arr;\r\n};\r\n\r\n\/\/ Defining the function for computing vector sum\r\nstruct vector vectorSum(struct vector *v1,struct vector *v2,int n)\r\n{\r\n    struct vector v3;\r\n    v3.arr = (float*) malloc(n * sizeof(float));\r\n    for(int i=0;i<n;i++)\r\n        *(v3.arr+i)=*(v1->arr+i)+*(v2->arr+i);\r\n    return v3;\r\n};\r\n\r\n\/\/ Defining the function for testing Orthogonality\r\nint orthogonalTest(struct vector *v1,struct vector *v2,int n)\r\n{\r\n    float sum = 0;\r\n    for(int i=0;i<n;i++)\r\n        sum = sum + *(v1->arr+i)**(v2->arr+i);\r\n    return sum;\r\n}\r\n\r\n\/\/ Main Function\r\nint main()\r\n{\r\n    struct vector vector1, vector2, sum_vector;\r\n    int n;\r\n    float flag = 0.0;\r\n    \r\n    \/\/ Accepting vector dimension from user\r\n    printf(\"Enter dimension: \");\r\n    scanf(\"%d\",&n);\r\n    \r\n    \/\/ Dynamically allocating memory for the vectors and accepting their values from user\r\n    vector1.arr = (float*) malloc(n * sizeof(float));\r\n    vector2.arr = (float*) malloc(n * sizeof(float));\r\n    printf(\"Enter Vector1: \");\r\n    for(int i=0;i<n;i++)\r\n        scanf(\"%f\",&vector1.arr[i]);\r\n    printf(\"Enter Vector2: \");\r\n    for(int i=0;i<n;i++)\r\n        scanf(\"%f\",&vector2.arr[i]);\r\n    \r\n    \/\/ Printing the values of the vectors\r\n    printf(\"Vector 1 is: (%d, [\", n);\r\n    for(int i=0;i<n;i++)\r\n        if (i==n-1)\r\n            printf(\"%f]\",vector1.arr[i]);\r\n        else\r\n            printf(\"%f, \",vector1.arr[i]);\r\n        \r\n    printf(\"\\nVector 2 is: (%d, [\", n);\r\n    for(int i=0;i<n;i++)\r\n        if (i==n-1)\r\n            printf(\"%f]\",vector2.arr[i]);\r\n        else\r\n            printf(\"%f, \",vector2.arr[i]);\r\n    \r\n    \/\/ Calling the vectorSum function and Printisng the result\r\n    sum_vector = vectorSum(&vector1,&vector2,n);\r\n    printf(\"\\nSum of the two vectors is: (%d, [\",n);\r\n    for(int i=0;i<n;i++)\r\n        if (i==n-1)\r\n            printf(\"%f]\",sum_vector.arr[i]);\r\n        else\r\n            printf(\"%f, \",sum_vector.arr[i]);\r\n     \r\n    \/\/ Calling the orthogonalTest function and Printing the result   \r\n    flag = orthogonalTest(&vector1,&vector2,n);\r\n    if (!flag)\r\n        printf(\"\\nThe vectors are orthogonal.\\n\");\r\n    else\r\n        printf(\"\\nThe vectors are not orthogonal.\\n\");\r\n        \r\n    return 0;\r\n}"
                },
                {
                    "Question": "Define a structure to represent a circle in terms of coordinates of its centre (a, b) \r\nand its radius r. Assume these values to be float.\r\nWrite a function which takes as input two such structure variables and returns 1 if \r\nthe circles intersect or if they touch at a point, and 0 if they do not. (Think a bit on \r\nhow you can handle the case of touching at a point using float variables.)\r\nIn the main program input six numbers in a1, b1, r1, a2, b2, r2, order and store \r\nthem in two such structure variables. Next, call this function and print if the input \r\ncircles, intersect or touch at a point, or do not.",
                    "Answer": "#include <stdio.h>\r\n\r\n\/\/defining a structure circle with members: x coordinate of centre, y coordinate of centre and radius of circle\r\nstruct circle\r\n{\r\n    float centre_x;     \/\/x coordinate of centre\r\n    float centre_y;     \/\/y coordinate of centre\r\n    float radius;       \/\/radius of circle\r\n};\r\n\r\nint intersection(struct circle, struct circle); \/\/function to check whether two circles intersect or not\r\n\r\nint main()\r\n{\r\n    \/\/declaring two circles\r\n    struct circle circle_first, circle_second;\r\n\r\n    \/\/reading parameters for first circle\r\n    printf(\"Enter x coordinate of centre of first circle: \");\r\n    scanf(\"%f\",&circle_first.centre_x);\r\n    printf(\"Enter y coordinate of centre of first circle: \");\r\n    scanf(\"%f\",&circle_first.centre_y);\r\n    printf(\"Enter radius of first circle: \");\r\n    scanf(\"%f\",&circle_first.radius);\r\n\r\n    \/\/reading parameters for second circle\r\n    printf(\"\\nEnter x coordinate of centre of second circle: \");\r\n    scanf(\"%f\",&circle_second.centre_x);\r\n    printf(\"Enter y coordinate of centre of second circle: \");\r\n    scanf(\"%f\",&circle_second.centre_y);\r\n    printf(\"Enter radius of second circle: \");\r\n    scanf(\"%f\",&circle_second.radius);\r\n\r\n    if(intersection(circle_first,circle_second))\r\n    {\r\n        \/\/if circles intersect\r\n        printf(\"\\nThe two circles intersect (or touch).\\n\");\r\n    }\r\n    else\r\n    {\r\n        \/\/if circles do not intersect\r\n        printf(\"\\nThe two circles neither intersect nor touch each other.\\n\");\r\n    }\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: intersection\r\n*returns whether the two circles intersect or not\r\n*\r\n*first_circle: circle structure that takes parameters of first circle\r\n*second_circle: circle structure that takes parameters of second circle\r\n*\r\n*returns: 1 if the circles intersect, 0 if they don't\r\n*\/\r\nint intersection(struct circle first_circle, struct circle second_circle)\r\n{\r\n    \/\/circles intersect if they cut each other. This means, if OP<=r1+r2 and OP>=|r1-r2|. if one circle lies completely inside the other circle, then they donot cut and hence, are non-intersection.\r\n    \/\/OP=distance between centres of circles, r1 and r2 are radii of both circles respectively.\r\n    if((first_circle.centre_x-second_circle.centre_x)*(first_circle.centre_x-second_circle.centre_x)+(first_circle.centre_y-second_circle.centre_y)*(first_circle.centre_y-second_circle.centre_y)<=(first_circle.radius+second_circle.radius)*(first_circle.radius+second_circle.radius) && (first_circle.centre_x-second_circle.centre_x)*(first_circle.centre_x-second_circle.centre_x)+(first_circle.centre_y-second_circle.centre_y)*(first_circle.centre_y-second_circle.centre_y)>=(first_circle.radius-second_circle.radius)*(first_circle.radius-second_circle.radius))\r\n    {\r\n        \/\/if the two circles cut(intersect)\r\n        return 1;\r\n    }\r\n    else\r\n    {\r\n        \/\/if the two circles do not cut each other\r\n        return 0;\r\n    }\r\n}"
                },
                {
                    "Question": "Write a program to read a character string and store it in an array. Suppose the \r\nstring stores a password. A strong password should have at least 8 characters. \r\nAlso, it should have at least 1 numeral (0-9) and at least 1 upper case alphabet (A\u0002Z). Print whether the input string is a strong password.",
                    "Answer": "#include <stdio.h>\r\n\r\nint main()\r\n{\r\n    char password[100];\r\n    \/\/password is a character array that will store the string input by the user\r\n\r\n    int length;\r\n    \/\/length is an integer variable used to store the length of the input string\r\n\r\n    int flag=0;\r\n    \/\/flag is an integer variable that becomes 1 when all conditions are satisfied, and remains 0 otherwise\r\n\r\n    int flag_uppercase=0,flag_digit=0;\r\n    \/\/flag_uppercase is a flag variable that becomes 1 as soon as an upper-case character is detected in the string\r\n    \/\/flag_digit is a flag variable that becomes 1 as soon as a digit is detected in the string\r\n\r\n    \/\/reading the password string\r\n    printf(\"Enter the string: \");\r\n    scanf(\"%[^\\n]\",password);\r\n\r\n    \/\/finding length of the password string\r\n    for(length=0; password[length]!='\\0'; ++length);\r\n\r\n    \/\/if length is less than 8, then flag remains 0\r\n    if(length>=8)\r\n    {\r\n        \/\/if length is atleast 8, then further conditions are checked.\r\n        for(int i=0;password[i]!='\\0';i++)\r\n        {\r\n            if(password[i]>='A' && password[i]<='Z')\r\n            {\r\n                \/\/set flag_uppercase to 1 if an upper-case alphabet is found\r\n                flag_uppercase=1;\r\n            }\r\n            if(password[i]>='0' && password[i]<='9')\r\n            {\r\n                \/\/set flag_digit to 1 if a digit is found\r\n                flag_digit=1;\r\n            }\r\n            if(flag_uppercase==1 && flag_digit==1)\r\n            {\r\n                \/\/set flag to 1 and break out of the loop as soon as all conditions are satisfied\r\n                flag=1;\r\n                break;\r\n            }\r\n        }\r\n    }\r\n\r\n    \/\/printing the result\r\n    if(flag==1)\r\n    {\r\n        \/\/if all conditions are satisfied, i.e., flag is 1.\r\n        printf(\"Password is strong.\");\r\n    }\r\n    else\r\n    {\r\n        \/\/if all conditions are not satisfied, i.e., flag is not 1.\r\n        printf(\"Password is not strong.\");\r\n    }\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Input two strings s and t from the user. Assume that the strings do not contain \r\nblank or any whitespace character. Write a function that finds if s is a palindrome \r\nof t, i.e., whether the reverse of s is equal to t. If it is a palindrome, return 1; \r\notherwise, return 0.\r\nThe parameters of the function contain only pointers to characters (not arrays): \r\n int ispalindrome(char *s, char *t)\r\nDo not use any string library functions. In the main function read two strings. Call \r\nthe above function and print its output.",
                    "Answer": "#include <stdio.h>\r\n\r\nint ispalindrome(char *s,char *t);      \/\/function to check whether a string is reverse of another\r\n\r\nint main()\r\n{\r\n    char string_first[100],string_second[100];\r\n    \/\/string_first stores first string input by the user\r\n    \/\/string_second stores second string input by the user\r\n\r\n    \/\/reading the strings\r\n    printf(\"Enter two strings:\\n\");\r\n    scanf(\"%s %s\",string_first,string_second);\r\na\r\n    \/\/printing the result\r\n    if(ispalindrome(string_first,string_second))\r\n    {\r\n        \/\/if both strings are reverse of each other\r\n        printf(\"\\nThe two strings are Palindrome (they are reverse of each other).\");\r\n    }\r\n    else\r\n    {\r\n        \/\/if both strings are not reverse of each other\r\n        printf(\"\\nThe two strings are Not palindrome (they are not reverse of each other).\");\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: ispalindrome\r\n*returns whether the two strings are reverse of each other\r\n*\r\n* *s: first character of first string\r\n* *t: first character of second string\r\n*\r\n*returns: 1 if the strings are reverse of each other, 0 if they aren't\r\n*\/\r\nint ispalindrome(char *s,char *t){\r\n    while(*s || *t)\r\n    {\r\n        if(*s-- != *t++)\r\n        {\r\n            \/\/return 0 if string is not found reverse of the other\r\n            return 0;\r\n        }\r\n    }\r\n    return 1;\r\n}"
                },
                {
                    "Question": "Write a function void dict_first(char s[], int n, char * first), which given an array s \r\nof n (< 10) strings (each of length < 20), finds the first string in the array if the \r\nstrings were arranged according to dictionary order. In the above function, use \r\nthe strcmp function in the strings.h library to compare dictionary order between \r\ntwo strings. Write a main function which reads an integer n. Then reads n strings \r\nconsisting of lower case alphabets only, calls the above function, and prints the \r\nfirst string according to dictionary order.\r\nExample, if n = 4, and the input strings are \u201Chello\u201D, \u201Cworld\u201D, \u201Chappy\u201D, \u201Cdiwali\u201D, \r\noutput string should be \u201Cdiwali\u201D.",
                    "Answer": "#include <stdio.h>\r\n#include <string.h>\r\n\r\nvoid dict_first(char *s[], int n, char **first);        \/\/function to find out first word in dictionary order\r\n\r\nint main()\r\n{\r\n    int n;      \/\/n stores the number of strings to be input\r\n    char strings_input[20][100];    \/\/strings_input stores the string input by the user\r\n    char *s[100];\r\n    char **first;\r\n\r\n    \/\/reading the strings\r\n    printf(\"Enter the number of strings: \");\r\n    scanf(\"%d\", &n);\r\n    printf(\"Enter the strings:\\n\");\r\n    for(int i=0;i<n;i++){\r\n        printf(\"String %d: \", i+1);\r\n        s[i]=strings_input[i];\r\n        scanf(\"%s\", strings_input[i]);\r\n    }\r\n\r\n    \/\/calling the function dict_first\r\n    *first=s[0];\r\n    dict_first(s, n, first);\r\n\r\n    \/\/printing the result\r\n    printf(\"\\nThe first word to appear in the dictionary order is: %s\", *first);\r\n\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: dict_first\r\n*return type: void\r\n*\r\n* s[]: array of pointer to strings\r\n* n: number of strings\r\n* first: first word in the dictionary\r\n*finds the first word in dictionary order\r\n*\/\r\nvoid dict_first(char *s[], int n, char **first)\r\n{\r\n    for(int i=1;i<n;i++)\r\n    {\r\n        \/\/comparing all strings with first\r\n        if (strcmp(*first,s[i])>0)\r\n        {\r\n            *first=s[i];\r\n        }\r\n    }\r\n    return;\r\n}"
                },
                {
                    "Question": "Write a program which first reads character string S (of length at most 100). \r\nAssume that the string contains only upper case characters. The program should \r\nthen find out the number of characters in the string S. It should then remove the \r\nvowels and store the new string in a new character array T. Size of T should be \r\ndynamically allocated. Print the string T and the number of characters it contains. \r\nFor example, if string S is HELLOWORLD then the new string T is HLLWRLD of size \r\n7.",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint find_length(char[]);            \/\/function to find length of input string\r\nint newlength_no_vowels(char[]);    \/\/function to find length of string without vowels\r\nvoid copy_no_vowels(char[],char*);  \/\/function to copy string without vowels into another memory location\r\n\r\nint main()\r\n{\r\n    \/\/reading string from user\r\n    char string_input[100];\r\n    printf(\"Enter the string: \");\r\n    scanf(\"%[^\\n]s\",string_input);\r\n\r\n    \/\/finding length of input string\r\n    int length=find_length(string_input);\r\n    printf(\"\\nThe entered string is %s and its length is %d\",string_input,length);\r\n\r\n    \/\/finding length of string without vowels\r\n    int length_no_vowels=newlength_no_vowels(string_input);\r\n\r\n    \/\/dynamic allocation of memory\r\n    char *new_pointer_string=(char*)malloc(length_no_vowels*sizeof(char));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if  (new_pointer_string == NULL)\r\n    {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n\t}\r\n\r\n\t\/\/copying string without vowels to a new memory location\r\n\tcopy_no_vowels(string_input,new_pointer_string);\r\n\r\n\t\/\/printing new string and its length\r\n\tprintf(\"\\n\\nNew string is: %s\",new_pointer_string);\r\n    printf(\"\\nSize of new string is: %d\\n\",length_no_vowels);\r\n\r\n    \/\/freeing the allocated memory\r\n    free(new_pointer_string);\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: find_length\r\n*returns the length of the input string\r\n*\r\n* string[]: stores the input string as a null terminated character array\r\n*\r\n*returns: number of characters in input string\r\n*\/\r\nint find_length(char string[])\r\n{\r\n    int i=0;\r\n    \/\/i is an integer variable used to store the number of characters in the string\r\n\r\n    \/\/traversing through the character array untill the terminating character is found\r\n    while(string[i]!='\\0')\r\n    {\r\n        i++;\r\n    }\r\n    return i;      \/\/returning the number of characters in the input string\r\n}\r\n\r\n\/*\r\n*Function: newlength_no_vowels\r\n*returns the length of the string without vowels\r\n*\r\n* string[]: stores the input string as a null terminated character array\r\n*\r\n*returns: number of characters except vowels in input string\r\n*\/\r\nint newlength_no_vowels(char string[])\r\n{\r\n    int i=0,len=0;\r\n    \/\/i is a loop variable used to traverse through the string\r\n    \/\/len is in an integer variable used to store the length of the string\r\n    while(string[i]!='\\0')\r\n    {\r\n        if(string[i]!='A' && string[i]!='E' && string[i]!='I' && string[i]!='O' && string[i]!='U')\r\n        {\r\n            \/\/len will be incremented only if the character is not a vowel\r\n            len++;\r\n        }\r\n        i++;\r\n    }\r\n    return len;     \/\/returns the length of the string without vowels\r\n}\r\n\r\n\/*\r\n*Function: copy_no_vowels\r\n*copies the string to a new memory location except vowels\r\n*\r\n* string[]: stores the input string as a null terminated character array\r\n* p: character pointer where new string will be stored\r\n*\r\n*returns type: void\r\n*\/\r\nvoid copy_no_vowels(char string[],char *p)\r\n{\r\n    int i=0,j=0;\r\n    \/\/i is a loop variable used to traverse through the string\r\n    \/\/j is in an integer variable used for location of characters of new string\r\n\r\n    while(string[i]!='\\0')\r\n    {\r\n        if(string[i]!='A' && string[i]!='E' && string[i]!='I' && string[i]!='O' && string[i]!='U')\r\n        {\r\n            \/\/character will be copied only if it is not a vowel\r\n            p[j]=string[i];\r\n            j++;\r\n        }\r\n        i++;\r\n    }\r\n    p[j]='\\0';\r\n    return;\r\n}"
                },
                {
                    "Question": "You are to define data types for storing the following in a 2-dimensional plane: (a) POINT which takes x and y \r\ncoordinates, (b) LINE which takes two end points, (c) CIRCLE which takes centre-point and value of radius and\r\n(d) axis-parallel RECTANGLE (that means its sides are parallel \/ perpendicular to the x-y axis) for which you take\r\nthe left bottom and right top corner points. In the main program, you will appropriately read in a line L, a circle C\r\nand a rectangle R. You will then find out whether any two of these pairs (L-C, L-R, C-R) intersect each other and\r\nif so, at how many places along with the specific points of intersection. For this, you will write three appropriate\r\nfunctions for finding the answers to these questions for various pairs of intersections. Since these functions\r\nwill need to return more than one item, appropriate use of structures and pointers may be made, as needed. \r\nSave the file as A13_<Roll Number>.c (example A13_21AG10002.c). Build, Run and Test it for the given data as well \r\nas your own data. Then upload the .c file for the Assignment. \r\n[20 Marks: 5 marks for intermediate submission, 15 marks for final submission]\r\nIn particular, you will do the following:\r\n1. Define data types for POINT, LINE, CIRCLE and axis-parallel RECTANGLE. Use floating point.\r\n2. Write three functions to find out various intersections between pairs of any two of the following: lines, circles\r\nand rectangles (that is, line-circle, line-rectangle, circle-rectangle). These functions will return whether and how\r\nmany places they intersect, and if they intersect list the points of intersection.\r\n3. In the main program read in a line L, a circle C, a rectangle R. You will then call the appropriate functions for the\r\nthree possible combinations to return the appropriate results. The results will be printed in a suitable and\r\nreadable form in the main program and not from within the functions. \r\n[Do not call any Library Functions other than scanf, printf. You may use your own user defined non-recursive \r\nfunctions.]\r\nTest Data: Test it with your own data for various cases.",
                    "Answer": "null"
                }
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question":"Write a C function that has three positive integer arguments n, m, k and returns \nthe third largest integer p, p <= k, such that p divides both n and m. \nIt returns 0 if there is no such third largest p > 0. \nFor example, n = 200, m = 100, k = 80, result is 20. \nAgain, if n = 35, m = 25, k = 18, then the result is 0. \nDo not use arrays or any library functions other than standard input and output. \nWrite the function and the main program. \nIn the main program, read the inputs, call the function and print the result.\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint third(int n, int m, int k)\r\n{\r\n    int count, i;\r\n    count = 0;\r\n    for(i = k; i> 0; i--)\r\n    {\r\n        if ((n%i == 0) && (m%i == 0)) count++;\r\n        if (count == 3) break;\r\n    }\r\n    if (count == 3) return (i);\r\n    else return (0);\r\n}\r\nmain()\r\n{\r\n    int n, m, k;\r\n    scanf(\"%d%d%d\", &n, &m, &k);\r\n    printf(\"n = %d, m = %d, k = %d \\n\", n, m, k);\r\n    printf(\"Result = %d \\n\", third(n,m,k));\r\n}\r\n"
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question": "Write a program that will read a positive integer n, dynamically allocate two n by n matrices where each matrix element\r\nis a lower-case alphabetic string of (upto 4) unique characters ordered alphabetically. The sum of two strings s1\r\nand s2 is defined as the first (upto 4) alphabetically ordered unique characters from the set of all characters\r\n(union) in s1 and s2. [For example: agrt + gptu = agpr] The product of two strings s1 and s2 is defined as the first\r\n(upto 4) alphabetically ordered unique characters of the common characters (intersection) of s1 and s2 (and could\r\nalso be a null string). [For example: agrt . gptu = gt]  Write functions for Matrix Addition and Matrix Multiplication of\r\ntwo such string matrices based on the above operations, using the sum and product operations on strings as base\r\noperators and the standard Matrix addition and multiplication rule. In the main program, read n, dynamically\r\nallocate two string matrices A and B, read the matrices A and B and print them row-wise. Then call the functions to \r\nAdd and Multiply A and B using Matrix Addition and Matrix Multiplication as defined above and print the results \r\nagain row-wise. If a Matrix cell is a null string, print the string \u201CNULL\u201D.   \r\nSave the file as T05_<Roll Number>.c (example T05_21AG10002.c). Build, Run and Test it for your own data. Then\r\nupload the .c file for the Assignment.\r\n[25 Marks: 8 marks for intermediate submission, 17 marks for final submission]\r\nIn particular, you will do the following:\r\n1.\r\nIn the main program, read a positive integer n and dynamically allocate two n by n matrices A and B of strings,\r\nwhere each matrix element can be a string of at most 4 unique characters, ordered alphabetically. Read the\r\ncontents of A and B. Assume that initial elements strings are non-null. Print A and B in row major fashion.\r\n2. Write functions to find the sum and product of two strings and return the result string as per definitions mentioned \r\nearlier.\r\n3. Write functions for Matrix Addition and Matrix Multiplication using the string sum and product operations and\r\nreturn the result Matrices. \r\n4. Call these functions appropriately in the main program to obtain the results matrices for Addition and \r\nMultiplication of A and B as C and D. Print the result matrices C and D in row major order, appropriately.\r\n[Do not call any Library Functions other than scanf, printf, basic math functions. Use your own user defined functions]\r\nTest Data: Test it with your own data for different cases",
                    "Answer": "#include <stdio.h>\r\n\r\nint len = 0, records[20][4];\r\n\r\nint CheckRecord(int rollno)\r\n{\r\n    int i;\r\n    for (i=0; i<len; i++) if (records[i][0]==rollno) return i;\r\n    return -1;\r\n}\r\n\r\nvoid UpdateRecord(int arr[])\r\n{\r\n    int phy, chem;\r\n    printf(\"Enter Physics Marks and Chemistry Marks: \");\r\n    scanf(\"%d %d\", &phy, &chem);\r\n    if (phy>100 || phy<0 || chem>100 || chem<0)\r\n    {\r\n        arr[0] = 0;\r\n        len -= 1;\r\n        printf(\"Invalid Marks. Try Again.\\n\");\r\n    }\r\n    else\r\n    {\r\n        arr[1] = phy;\r\n        arr[2] = chem;\r\n        arr[3] = phy+chem;\r\n    }\r\n}\r\n\r\nvoid PrintRecords()\r\n{\r\n    int i, j, k, arr[4], rank, marks, phy, common;\r\n    rank = marks = 0;\r\n    common = 1;\r\n    for (i=0; i<len; i++)\r\n    {\r\n        for (j=0; j<len-i-1; j++)\r\n        {\r\n            if (records[j][3] < records[j+1][3] || (records[j][3] == records[j+1][3] && records[j][1] < records[j+1][1]))\r\n            {\r\n                for (k=0; k<4; k++) arr[k] = records[j][k];\r\n                for (k=0; k<4; k++) records[j][k] = records[j+1][k];\r\n                for (k=0; k<4; k++) records[j+1][k] = arr[k];\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n    for (i=0; i<len; i++)\r\n    {\r\n        if (marks != records[i][3] || (marks == records[i][3] && phy != records[i][1]))\r\n        {\r\n            rank += common;\r\n            marks = records[i][3];\r\n            phy = records[i][1];\r\n            common = 1;\r\n        }\r\n        else common += 1;\r\n\r\n        printf(\"Rank: %2.d|  Roll No: %2.d| Total: %3.d| Phy: %3.d| Chem: %3.d\\n\", rank, records[i][0], records[i][3], records[i][1], records[i][2]);\r\n    }\r\n}\r\n\r\nvoid GoldMedalists()\r\n{\r\n    \/* Student code\r\n    int code, maxroll[4], i;\r\n    for (i=0; i<4; i++) maxroll[i] = records[0];\r\n    for (i=0; i<len; i++)\r\n    {\r\n        for (code=1; code<=3; code++)\r\n        {\r\n            if (records[i][code] > records[maxroll[code]][code] ) maxroll[code] = records[i];\r\n        }\r\n    }\r\n\r\n    printf(\"\\nGold Medalists:\\n\");\r\n    printf(\"Physics: %d\\n\",maxroll[1]);\r\n    printf(\"Chemistry: %d\\n\",maxroll[2]);\r\n    printf(\"Total: %d\\n\",maxroll[3]);\r\n    *\/\r\n    \r\n    \/*Code Modified by TA Evaluator for Solution-Start*\/\r\n    int code, maxroll[4], i;\r\n    for (i=0; i<4; i++) maxroll[i] = records[0][0];\r\n    for (code=1; code<=3; code++)\r\n    {\r\n        for (i=0; i<len; i++)\r\n        {\r\n            if (records[i][code] > records[maxroll[code]][code] ) maxroll[code] = i;\r\n        }\r\n    }\r\n    printf(\"\\nGold Medalists:\\n\");\r\n    printf(\"Physics Gold Medal: %d, marks=%d\\n\",records[maxroll[1]][0], records[maxroll[1]][1]);\r\n    printf(\"Chemistry Gold Medal: %d, marks=%d\\n\",records[maxroll[2]][0], records[maxroll[2]][2]);\r\n    printf(\"Total Gold Medal: %d, marks=%d\\n\",records[maxroll[3]][0], records[maxroll[3]][3]);\r\n    \r\n    PrintRecords();\r\n    \/*Modified Code for Solution-End*\/\r\n}\r\n\r\nchar main()\r\n{\r\n    int i, code, run, rollno;\r\n    run = 1;\r\n    for (i=0; i<20; i++) records[i][0]=0;\r\n    while (run)\r\n    {\r\n        printf(\"Enter code: \");\r\n        scanf(\"%d\",&code);\r\n        switch (code)\r\n        {\r\n        case 0:\r\n            run = 0;\r\n            break;\r\n\r\n        case 1:\r\n            printf(\"Enter Roll No: \");\r\n            scanf(\"%d\",&rollno);\r\n            if (rollno>0 && rollno<=20 && CheckRecord(rollno)==-1)\r\n            {\r\n                records[len][0] = rollno;\r\n                len+=1;\r\n                UpdateRecord(records[len-1]);\r\n            }\r\n            else printf(\"Invalid Roll No. Try Again.\\n\");\r\n            break;\r\n        case 2:\r\n            printf(\"Enter Roll No: \");\r\n            scanf(\"%d\",&rollno);\r\n            if (rollno>0 && rollno<20 && CheckRecord(rollno)!=-1) UpdateRecord(records[CheckRecord(rollno)]);\r\n            else printf(\"Record Does Not Exist. Try Again.\\n\");\r\n            break;\r\n        case 3:\r\n            if (len==0)\r\n            {\r\n                printf(\"Not enough records.\\n\");\r\n                break;\r\n            }\r\n            printf(\"Record of Students:\\n\\n\");\r\n            PrintRecords();\r\n            break;\r\n\r\n        case 4:\r\n            if (len==0)\r\n            {\r\n                printf(\"Not enough records.\\n\");\r\n                break;\r\n            }\r\n            GoldMedalists();\r\n            break;\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n\r\n    return 'V';\r\n}"
                },
                {
                    "Question": "You are to manipulate a set of polynomials of a single variable where the coefficients and exponents are rational numbers of \r\nthe form (x, y) depicting the rational number x\/y, where x and y are positive integers. Two rational exponents  (x1,y1) and\r\n(x2,y2) are considered equal if the value of x1\/y1 is equal to the value of x2\/y2. Write a program that reads two such\r\npolynomials P and Q. For each polynomial, read the  number of terms and dynamically allocate the polynomial. Read\r\neach polynomial term by term. For each term, read pairs of integers each for their coefficients and exponents. The terms\r\nin the input may not come in ascending order of x\/y values of exponents. Write a function to print a polynomial by\r\nprinting the (x, y) values of the coefficient and exponent of each term (and not as floating point numbers) in ascending\r\norder of the value (x\/y) of the exponent. Print the two polynomials P and Q read using this function. Next, write functions\r\nfor addition and multiplication of two such polynomials to return the result polynomials, respectively. Call these\r\nfunctions in the main program to find R = P + Q and S = P X Q and print the polynomials R and S returned as a result\r\nusing the ordered print function mentioned earlier.  \r\nSave the file as T06_<Roll Number>.c (example T06_21AG10002.c). Build, Run and Test it for the given and your own data.\r\nThen upload the .c file for the Assignment. \r\n[25 Marks: 8 marks for intermediate submission, 17 marks for final submission]\r\nIn particular, you will do the following:\r\n1. In the main program, read positive integers n and m. Read polynomials P of n terms and Q of m terms.  Use dynamic\r\nallocation.\r\n2. Write a function to print a polynomial in ascending order of x\/y value of the exponent. For every term print the coefficient\r\nas a pair followed by the character variable Z followed by the exponent as a pair. Use the + character in between terms.\r\n3. Write functions to Add and Multiply two polynomials and return the result polynomial.\r\n4. In the main program, call the functions Add and Multiply to get R = P + Q and S = P X Q. Use the print function (stated in\r\nitem 2 above) to print the result polynomials R and S. \r\n[Do not call any Library Functions other than scanf, printf, basic math functions. Use your own user defined functions]\r\nTest Data: Test it with your own data covering various cases.",
                    "Answer": "#include <stdio.h>\r\n\/\/getting the length of a string\r\nint leng(char a[])\r\n{\r\n    int len=0;\r\n    for (int i = 0; a[i]!='\\0'; i++) len++;\r\n    return len;\r\n}\r\n\r\n\/\/non recursive function to reverse a string\r\nvoid krev(char A[20], int k, int len, char B[20])\r\n{\r\n    char temp[20], swap;\r\n    for (int i=0; i<k; i++) temp[i]=A[i];\r\n    temp[k]='\\0';\r\n    for (int i=0; i<(k\/2);i++)\r\n    {\r\n        swap=temp[i];\r\n        temp[i]=temp[k-i-1];\r\n        temp[k-i-1]=swap;\r\n    }\r\n\r\n    for (int i=0; i<k; i++) B[i]=temp[i];\r\n    for (int j=k; j<len; j++) B[j]=A[j];\r\n    B[len]='\\0';\r\n    printf(\"%s\\n\", B);\r\n\r\n}\r\n\r\n\/\/recursive function to reverse a string\r\nvoid rkrev(char temp[20],int i, int k)\r\n{\r\n    char swap;\r\n    if (i>=k)\r\n    {\r\n        return;\r\n    }\r\n    else\r\n    {\r\n        swap=temp[i];\r\n        temp[i]=temp[k];\r\n        temp[k]=swap;\r\n        rkrev(temp, i+1, k-1);\r\n    }\r\n\r\n\r\n\r\n}\r\n\/\/an utility function that uses the recursive function to reverse a string and prints the string B for each value of k\r\nvoid utilFunc(char A[20], int k, int len, char B[20])\r\n{\r\n    char temp[20];\r\n    for (int i =0; i<k; i++) temp[i]=A[i];\r\n    temp[k]='\\0';\r\n    rkrev(temp, 0, k-1);\r\n\r\n    for (int i=0; i<k; i++) B[i]=temp[i];\r\n    for (int j=k; j<len; j++) B[j]=A[j];\r\n    B[len]='\\0';\r\n    printf(\"%s\\n\", B);\r\n\r\n}\r\n\r\n\/\/non recursive function to get the number of mismatches\r\nint mism(char A[], char B[], int len)\r\n{\r\n    int mism = 0;\r\n    for (int i = 0; i<len; i++)\r\n    {\r\n        if (!(A[i]==B[i] || A[i]==B[i]+32 || A[i]==B[i]-32)) mism++;\r\n    }\r\n\r\nreturn mism;\r\n}\r\n\r\n\/\/recursive function to get the number of mismatches\r\nint rmism(char A[], char B[], int len)\r\n{\r\n    if (len==1)\r\n    {\r\n        if (!(A[0]==B[0] || A[0]==B[0]+32 || A[0]==B[0]-32)) return 1;\r\n        else return 0;\r\n    }\r\n    else\r\n    {\r\n        if (!(A[len-1]==B[len-1] || A[len-1]==B[len-1]+32 || A[len-1]==B[len-1]-32)) return (1+rmism(A, B, len-1));\r\n        else return rmism(A,B,len-1);\r\n    }\r\n}\r\n\r\n\r\nint main(){\r\nprintf(\"Enter string A:\\n\");\r\nchar A[20];\r\nscanf(\"%s\", A);\r\nchar B[20];\r\nint length=leng(A);\r\n\r\nprintf(\"Using non-recursive functions\\n\\n\");\r\nfor (int i=1; i<=length; i++)\r\n{\r\n\r\n    printf(\"For k=%d, The string is: \", i);\r\n    krev(A, i, length, B);\r\n    printf(\"The number of mismatches is %d\\n\", mism(A, B, length));\r\n    printf(\"\\n\");\r\n}\r\n\r\nprintf(\"Using recursive functions\\n\\n\");\r\nfor (int i=1; i<=length; i++)\r\n{\r\n\r\n    printf(\"For k=%d, The string is: \",i);\r\n    utilFunc(A, i, length, B);\r\n    printf(\"The number of mismatches is %d\\n\", rmism(A, B, length));\r\n    printf(\"\\n\");\r\n}\r\n\r\nreturn 0;\r\n}\r\n\r\n"
                },
                {
                    "Question":"Write a menu-driven C program that declares two structures named :\r\na. Circle - having three integer members, radius r, x, and y, where (x,y) represents the center.\r\nb. Triangle - having perpendicular, hypotenuse, and base as the members of type integer\r\nPerform the following operations according to the functions as defined below.\r\n1. check circle(struct Circle c1, struct Circle c2)- Check if the two circles intersect or touch each\r\nother or not. If they intersect then return 2. If both the circles touch each then return 1,\r\notherwise 0.\r\n[Formula: Firstly, we calculate the distance between centers C1 and C2 as\r\ndist = sqrt((x1 \u2212 x2)2 + (y1 - y2)2\r\n).\r\nR1 and R2 are the radii of the circles.\r\nNext, we check the following three conditions.\r\n1. If dist == R1 + R2\r\nCircle A and B are touching each other.\r\n2. If dist > R1 + R2\r\nCircle A and B are not touching each other.\r\n3. If dist < R1 + R2\r\nCircles are intersecting each other.]\r\n\r\n2. check triangle(struct Circle c1, struct Triangle t1) - Firstly, check if the triangle is a right\r\nangle triangle or not. If it is not a right angle triangle, then returns 2. Otherwise, check if the\r\narea of the circle is equal to that of the incircle of the triangle or not after rounding off their\r\nrespective values. If the area of the circle is equal to the area of the incircle, then returns 1,\r\notherwise 0.\r\n[Formula: the area of the incircle will be \u03C0 \u2217 ((P + B\u2013H)\/2)2\r\n\r\n, where P, B, and H represent\r\n\r\nperpendicular, base, and hypotenuse respectively.]\r\n[Display: If 2 is returned, display \u201CNot a right angle triangle\u201D If 1 is returned, display \u201CThe\r\narea of the circle is equal to the area of the incircle of the triangle\u201D If 0 is returned, display\r\n\u201CThe area of the circle is not equal to the area of the incircle of the triangle\u201D]\r\n\r\nYour program must keep on running continuously until the user inputs \u2018n\u2019. After each com-\r\nputation, prompt the user to continue again or not.\r\n\r\nExample:\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check circles\r\n2. Check triangle\r\nEnter your choice: 1\r\nEnter radius, x, and y coordinate values for the circle A: 4 2 3\r\nEnter radius, x, and y coordinate values for the circle B: 7 15 19\r\nOutput:\r\nCircle A and B are not touching each other.\r\nDo you want to continue: y\r\nInput:\r\n\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212MENU\u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212 \u2212\u2212\r\n1. Check circles\r\n2. Check triangle\r\nEnter your choice: 2\r\nEnter the values of p, b, h of the triangle : 3 4 5\r\nEnter the radius value of the circle: 3\r\n3\r\n\r\nOutput:\r\nThe area of the circle is not equal to the area of the incircle of the triangle.\r\nDo you want to continue: n",
                    "Answer":"#include<stdio.h>   \t\t\/\/HEADER FILE FOR INPUT-OUTPUT\r\n#include<math.h>            \/\/HEADER FILE FOR SQRT ,POW FUNCTION\r\nstruct Circle               \/\/STRUCTURE FOR STORING DATA OF CIRCLE, RADIUS AND COORDINATES OF ITS CENTRE\r\n{\r\n    int R,x,y;\r\n}C1,C2;\r\nstruct Triangle             \/\/STRUCTURE FOR STORING DATA OF TRIANGLE, PERPENDICULAR, BASE ,HYPOTENUSE\r\n{\r\n    int P,B,H;\r\n}T;\r\nint check_circle(struct Circle,struct Circle);          \/\/FUNCTION PROTOTYPE FOR CHECKING THE TWO CIRCLES\r\nint check_traingle(struct Circle,struct Triangle);      \/\/FUNCTION PROTOTYPE FOR CHECKING THE TRAINGLE CONDITIONS\r\nint main()         \t\t\/\/MAIN() FUNCTION\r\n{\r\n   \/\/DECLARATION OF VARIABLES\r\n   char ch='y';         \/\/INPUT VARIABLES\r\n   int i=0;             \/\/INPUT VARIABLES\r\n   int rc=5;            \/\/COMPUTATIONAL VARIABLES\r\n   \/\/OUTPUT VARIABLES\r\n\r\n   while(ch!='n')\r\n   {\r\n       printf(\"\\n\\t\\t\\t\\t\\t\\tMENU\");\r\n       printf(\"\\n1.CHECK CIRCLES\");\r\n       printf(\"\\n2.CHECK TRIANGLES\\n\");\r\n       scanf(\"%d\",&i);              \/\/INPTTING CHOICE FROM USER\r\n       switch(i)\r\n       {\r\n           case 1:printf(\"\\n\\tENTER THE DATA OF CIRCLE 1\");\r\n                  printf(\"\\nRADIUS : \");\r\n                  scanf(\"%d\",&C1.R);\r\n                  printf(\"\\nX COORDINATE OF CENTRE : \");\r\n                  scanf(\"%d\",&C1.x);\r\n                  printf(\"\\nY COORDINATE OF CENTER : \");\r\n                  scanf(\"%d\",&C1.y);\r\n                  printf(\"\\n\\tENTER THE DATA OF CIRCLE 2\");\r\n                  printf(\"\\nRADIUS : \");\r\n                  scanf(\"%d\",&C2.R);\r\n                  printf(\"\\nX COORDINATE OF CENTRE : \");\r\n                  scanf(\"%d\",&C2.x);\r\n                  printf(\"\\nY COORDINATE OF CENTER : \");\r\n                  scanf(\"%d\",&C2.y);\r\n                  rc=check_circle(C1,C2);               \/\/STORING THE RETURN VALUE TO PRINT THE CORECRT VALUE\r\n                  switch(rc)\r\n                  {\r\n                      case 2:printf(\"\\nCIRCLE 1 AND CIRCLE 2 ARE INTERSECTING.\");\r\n                             break;\r\n                      case 1:printf(\"\\nCIRCLE 1 AND CIRCLE 2 ARE TOUCHING EACH OTHER.\");\r\n                             break;\r\n                      case 0:printf(\"\\nCIRCLE 1 AND CIRCLE 2 ARE NOT TOUCHIG EACH OTHER.\");\r\n                             break;\r\n                  }\r\n                  break;\r\n           case 2:printf(\"\\n\\tENTER THE DATA OF CIRCLE \");\r\n                  printf(\"\\nRADIUS : \");\r\n                  scanf(\"%d\",&C1.R);\r\n                  printf(\"\\n\\tENTER THE DATA OF TRIANGLE\");\r\n                  printf(\"\\nPERPENDICULAR : \");\r\n                  scanf(\"%d\",&T.P);\r\n                  printf(\"\\nBASE : \");\r\n                  scanf(\"%d\",&T.B);\r\n                  printf(\"\\nHYPOTENUSE : \");\r\n                  scanf(\"%d\",&T.H);\r\n                  rc=check_traingle(C1,T);                  \/\/STORING THE RETURN VALUE IN RC TO PRINT CORRECT RESULT\r\n                  switch(rc)\r\n                  {\r\n                      case 2:printf(\"\\nTRAINGLE IS NOT A RIGHT ANGLED TRIAGLE.\");\r\n                             break;\r\n                      case 1:printf(\"\\nTHE AREA OF THE TRIANGLE AND CIRCLE IS EQUAL.\");\r\n                             break;\r\n                      case 0:printf(\"\\nTHE AREA OF THE TRIANGLE AND CIRCLE IS NOT EQUAL\");\r\n                             break;\r\n                  }\r\n                  break;\r\n           default:printf(\"\\nWRONG INPUT\")       ;\r\n\r\n       }\r\n       printf(\"\\nDO YOU WANT TO CONTINUE?[n WILL END THIS PROGRAM]\");\r\n       printf(\"\\nENETR WHAT YOU WANT, IF NOT WANT TO CONTINUE PRESS n(CASE SENSITIVE):\");\r\n       scanf(\" %ch\",&ch);\r\n   }\r\n   printf(\"\\n\");            \/\/LINE BRAEK TO DISTINGUISH BETWEEN MY CODE OUTPUT AND COMPILER  MESSAGE OUTPUT\r\n   return 0;      \/\/RETURNING A VALUE\r\n}\r\nint check_circle(struct Circle C1,struct Circle C2)       \/\/FUNCTION DEFINE FOR CHECKING THE TWO CIRCLES\r\n{\r\n    int d=0;            \/\/FOR CALCULATING DISTANCE\r\n    d=sqrt(pow(C1.x-C2.x,2)+pow(C1.y-C2.y,2));      \/\/CALCULATING DISTANCE\r\n    if(d<C1.R+C2.R)\r\n    {\r\n        return 2;           \/\/CIRCLES INTERSECTING\r\n    }\r\n    else if(d==C1.R+C2.R)\r\n    {\r\n        return 1;       \/\/CIRCLES TOUCHING\r\n    }\r\n    else if(d>C1.R+C2.R)\r\n    {\r\n        return 0;           \/\/CIRCLES NOT TOUCHING\r\n    }\r\n}\r\nint check_traingle(struct Circle C,struct Triangle T)           \/\/FUNCTION DEFINE FOR CHECKING THE TRAINGLE CONDITIONS\r\n{\r\n    int p=0,b=0,h=0;        \/\/FOR STORING H^2,B^2,P^2\r\n    p=T.P*T.P;\r\n    b=T.B*T.B;\r\n    h=T.H*T.H;\r\n    if(h==(b+p))        \/\/CHECKING WHTEHR IT IS RIGHT ANGLED OR NOT\r\n    {\r\n        int A1=0,A2=0,A3=0,A=0;\r\n        A1=(T.P+T.B-T.H);\r\n        A2=A1\/2;\r\n        A3=pow(A2,2);\r\n        A=3.14*A3;\r\n\r\n        int AC=0;\r\n        if(A==AC)\r\n        {\r\n            return 1;       \/\/AREA OF TRIANGLE AND CIRCLE EQUAL\r\n        }\r\n        else\r\n        {\r\n            return 0;       \/\/AREA OF CIRCLE AND TRAINGLE NOT EQUAL\r\n        }\r\n    }\r\n    else\r\n    {\r\n        return 2;       \/\/TRANGLE NOT RIGHT ANGLED\r\n    }\r\n}"
                },
                {
                    "Question":"You have used passwords in all of your online accounts. A good password is an alphanumeric\r\nstring where the different constituent characters are randomly placed throughout the length of\r\n\r\nthe string. We can use a structure data type with the following attributes to represent a pass-\r\nword in a computer.\r\n\r\nstruct password:\r\n\u2022 int Length: Length of the password in number of characters\r\n\u2022 int Uppercase :Number of uppercase characters in the password\r\n\u2022 int Lowercase : Number of lowercase characters in the password\r\n\u2022 int Numbers : Number of numerical characters, 0-9\r\n\u2022 int Special: Number of special ASCII characters\r\n\u2022 int Size : Size in bytes of the password (one character is equal to 8 bits)\r\n\u2022 int Strength: Denotes the strength of the password, defined as the number of characters\r\nbetween the first uppercase and the first next lowercase character of the password, both the\r\ncharacters inclusive. For example a password \u2018XVBghy7J\u2019 has a strength of 4 (number of\r\ncharacters from \u2018X\u2019 till \u2018g\u2019), \u2018ghfVbn@\u2019 has a strength of 2 (starting from \u2018V\u2019 and ending at\r\n\u2018b\u2019). In case a password has no next lowercase characters after the first uppercase character,\r\nthen strength is 1 (for example \u2018ghjtJLI\u2019 or \u2018fb$76bhK\u2019) and in case the password has no\r\nuppercase character at all, the strength is zero (for example, \u2018fft67%uj\u2019)\r\n\r\n\u2022 char Content[50] : The actual content of the password, with a maximum length of 50 char-\r\nacters\r\n\r\nDeclare an array of structure of type password to hold \u2018n\u2019 different passwords, \u2018n\u2019 taken as input\r\nfrom the user initially. Hence enter \u2018n\u2019 different alphanumeric passwords, each having arbitrary\r\nsize and random characters, but maximum size of each password is 50 characters. For each\r\nof the \u2018n\u2019 passwords, compute the different password attributes as shown above to fill up the\r\nparameters of the structure variables within the array. You may assume that the password\r\nconsists of only lowercase \u2018a-z\u2019, uppercase \u2018A-Z\u2019, numericals \u20180-9\u2019 and special ASCII characters.\r\nThere should not be any space within the password. Hence for each unique pair of the passwords\r\namong all the \u2018n\u2019 passwords (i.e if there are three passwords, then consider the pairs (1-2), (1-3)\r\nand (2-3)), compute the similarity index of the password pair. Similarity index for a password\r\npair is defined as the number of password attributes that are equal for both the passwords,\r\nstarting from the length upto the strength attribute, except the last attribute (char content[])\r\nand expressed as a percentage. Since there are 7 attributes, if all the 7 attributes match for both\r\nthe passwords, the similarity index is 100%, if none of the attributes match the index is 0%, if\r\nonly 2 attributes match the index is (2\/7)*100 = 28.57% and likewise. Declare appropriate data\r\ntypes. You can use strlen() ONLY and no other in-built string functions. You may however\r\ndeclare and use user-defined functions as you feel necessary.",
                    "Answer":"#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\n\/*\r\nXVBghy7J\r\nghfVbn@\r\nghjtJLI\r\nfb$76bhK\r\n*\/\r\n\r\n\/\/Declaring structure\r\nstruct password\r\n{\r\n    char Content[50];\r\n\r\n    int Length;\r\n    int Uppercase;\r\n    int Lowercase;\r\n    int Numbers;\r\n    int Special;\r\n    int Size;\r\n    int Strength;\r\n};\r\n\r\n\/\/Finding no. of atrributes which are similar\r\nfloat similarity(struct password a,struct password b)\r\n{\r\n    int attribute=0;\r\n\r\n    \/\/Increasing attribute by 1 if any atrribute is same for them\r\n\r\n    if(a.Length==b.Length)\r\n    {\r\n        attribute++;\r\n    }\r\n    if(a.Lowercase==b.Lowercase)\r\n    {\r\n        attribute++;\r\n    }\r\n    if(a.Uppercase==b.Uppercase)\r\n    {\r\n        attribute++;\r\n    }\r\n    if(a.Numbers==b.Numbers)\r\n    {\r\n        attribute++;\r\n    }\r\n    if(a.Size==b.Size)\r\n    {\r\n        attribute++;\r\n    }\r\n    if(a.Special==b.Special)\r\n    {\r\n        attribute++;\r\n    }\r\n    if(a.Strength==b.Strength)\r\n    {\r\n        attribute++;\r\n    }\r\n\r\n    \/\/returning percentage similarity\r\n    return 100*(attribute)\/7.0;\r\n}\r\n\r\nint main()\r\n{\r\n    struct password *p; \/\/declaring structure pointer\r\n\r\n    \/\/Prompting user to enter n\r\n    int n;\r\n\r\n    printf(\"Enter no. of password(n) u want to store = \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/Allocating right space for p\r\n    p=(struct password *)malloc(n * sizeof(struct password) );\r\n\r\n    \/\/inputting password\r\n    printf(\"Enter Passwords :-\\n\");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        scanf(\"%s\",p[i].Content);\r\n\r\n       \/\/ printf(\"%c\",p[i].Content[0]);\r\n\r\n        p[i].Length=strlen(p[i].Content); \/\/length is initialized\r\n        p[i].Size=strlen(p[i].Content);   \/\/Size(in bytes) = Length\r\n\r\n        \/\/Initializing initial attributes to 0\r\n        p[i].Uppercase=0;\r\n        p[i].Lowercase=0;\r\n        p[i].Numbers=0;\r\n        p[i].Special=0;\r\n        p[i].Strength=0;\r\n\r\n        int first1=-1,first2=0; \/\/for finding first upper case character\r\n\r\n        \/\/Creating a loop to\r\n        for(int j=0;j<strlen(p[i].Content);j++)\r\n        {\r\n            \/\/each time, if a character in password lies b\/w particular ASCII value then increasing that attribute value by 1\r\n\r\n            if(p[i].Content[j]>='A' && p[i].Content[j]<='Z')\r\n            {\r\n                p[i].Uppercase++;\r\n            }\r\n            else if(p[i].Content[j]>='a' && p[i].Content[j]<='z')\r\n            {\r\n                p[i].Lowercase++;\r\n            }\r\n            else if(p[i].Content[j]>='0' && p[i].Content[j]<='9')\r\n            {\r\n                p[i].Numbers++;\r\n            }\r\n            else\r\n            {\r\n                p[i].Special++;\r\n            }\r\n        }\r\n\r\n        \/\/Creating loop for finding 1st upper case letter\r\n        int k;\r\n        for(k=0;k<strlen(p[i].Content);k++)\r\n        {\r\n            if(p[i].Content[k]>='A' && p[i].Content[k]<='Z')\r\n            {\r\n                first1=k;\r\n                break;\r\n            }\r\n        }\r\n\r\n        for(int m=k;m<strlen(p[i].Content);m++)\r\n        {\r\n            if(p[i].Content[m]>='a' && p[i].Content[m]<='z')\r\n            {\r\n                first2=m;\r\n                break;\r\n            }\r\n        }\r\n        \/\/now starting loop from first upper case letter and ending when first Lower case letter is found\r\n        if(first2!=0){\r\n        for(int l=k;l<strlen(p[i].Content);l++)\r\n        {\r\n            p[i].Strength++; \/\/increasing by 1 for each character found b\/w first upper case and lower case letter\r\n            if(p[i].Content[l]>='a' && p[i].Content[l]<='z')\r\n            {\r\n                break; \/\/breaking the loop after 1st lower case letter\r\n            }\r\n        }}\r\n        \/\/if upper case is present but no lower case is present\r\n        if(first1!=(-1) && first2==0)\r\n        {\r\n            p[i].Strength=1;\r\n        }\r\n    }\r\n\r\n    \/\/Printing values\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        printf(\"\\nPassword %d is %s\\n\",i+1,p[i].Content);\r\n        printf(\"Length = %d\\n\",p[i].Length);\r\n        printf(\"Uppercases = %d\\n\",p[i].Uppercase);\r\n        printf(\"Lowercases  = %d\\n\",p[i].Lowercase);\r\n        printf(\"Special chars= %d\\n\",p[i].Special);\r\n        printf(\"Size = %d bytes\\n\",p[i].Size);\r\n        printf(\"Strength = %d\\n\",p[i].Strength);\r\n    }\r\n\r\n    \/\/Creating nested loop for finding similarity b\/w any two pair\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=i+1;j<n;j++)\r\n        {\r\n            printf(\"\\nSimilarity Index for (%d,%d) = %0.2f\\n\",i+1,j+1,similarity(p[i],p[j]));\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}"
                }
                
            ]
        }
    ],
    "sortingAnd2dArrays": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question":"There are people out of which any two people are either friends or strangers. A friendship\r\ngroup is a set of people such that any two people in that set are friends. In this problem you\r\nwill find a largest friendship group.\r\n\uE00C Take n as input from the keyboard. Assume that n is a positive integer at most 10 . The n\r\npeople will be indexed as 1,...,n. Also ask the user for the total number of pairs of\r\npeople who are friends. We will denote that number by m.\r\n\uE00C The user then enters the m pairs of people who are friends. This information is to be\r\nstored in a 2D binary (integer) array A . As there are at most 10 people, the size of A\r\nwill be 10x10.A[i-1][j-1] and A[j-1][i-1]should be 1 if i and j are friends and 0\r\notherwise.\r\n\uE00C Compute and print the people who are part of a largest friendship group. Also print its\r\nsize.\r\n\uE00C In addition to A , you may use extra 1D arrays.",
                    "Answer":"#include<stdio.h>\r\n\r\nint main()\r\n{\r\n  int m, n, G[100][100], A[100], largest_group=0, Isgroup, size, CurrentGroup[100], i, j, k;\r\n  for(i=0; i<n; i++)\r\n  {\r\n    A[i]=0;\r\n    CurrentGroup[i]=0;\r\n  }\r\n  for(i=0; i<n; i++)\r\n    for(j=0; j<n; j++)\r\n      G[i][j]=0;\r\n  printf(\"How many people and friendships? \");\r\n  scanf(\"%d%d\", &n, &m);\r\n  for(i=0; i<m; i++)\r\n  {\r\n    printf(\"Enter the two guests participating in friendship %d: \", i+1);\r\n    scanf(\"%d%d\", &j, &k);\r\n    G[j-1][k-1]=1;\r\n    G[k-1][j-1]=1;\r\n  }\r\n  while(1)\r\n  {  \r\n    for(i=n-1; i>=0 && A[i]==1; i--)\r\n      A[i]=0;\r\n    if(i==-1)\r\n      break;\r\n    A[i]=1;\r\n    size=0;\r\n    for(i=0; i<n; i++)\r\n      if(A[i]==1)\r\n        size++;\r\n    if(size<=largest_group)\r\n      continue;\r\n    Isgroup=1;\r\n    for(i=0; i<n-1; i++)\r\n    {\r\n      for(j=i+1; j<n; j++)\r\n      {\r\n        if(A[i]==1 && A[j]==1 && G[i][j]==0)\r\n        { \r\n          Isgroup=0;\r\n          break;\r\n        }\r\n      }\r\n      if(Isgroup==0)\r\n        break;\r\n    }\r\n    if(Isgroup==1 && size > largest_group)\r\n    {\r\n      largest_group=size;\r\n      for(i=0; i<n; i++)\r\n        CurrentGroup[i]=A[i];\r\n    }\r\n  }\r\n  printf(\"Largest friendship group:\\n\");\r\n  for(i=0; i<n; i++)\r\n    if(CurrentGroup[i]==1)\r\n      printf(\"%d \", i+1);\r\n  printf(\"\\nSize=%d\\n\", largest_group);\r\n  return 0;\r\n}\r\n"

                },
                {
                    "Question":"1. Write the following text editor program in C. For this, you need to write the following\r\nfunctions. For simplicity, assume that all inputs to the program 1s in lower case\r\ncharacters only.\r\na) main: Define a global array of 100 string pointers and name it as sptr. In an infinite loop, display a\r\nmenu and prompt the user to enter a choice(l-6). Based on the user choice (1--6), call the appropriate\r\nfunction (1->create(), 2->lengthStat(),., 6->searchReplace()) described in the following. Terminate,\r\nwhen the user enters '0.\r\nb) create: Prompt the user how many words (n< 100) to enter. Read n words of various\r\nlengths (each less that 30chars) from the keyboard one at a time, dynamically allocate just\r\nenough memory for each word entered, and store it so that the next element of sptr points to it [Note\r\nthat each element of sptr is a string pointer]. The entered words therefore get sequentially placed in\r\nsptr. Display all the words that have been entered by the user.\r\nc)lengthStat: Display the number of words that are of lengths: between 1--2 letters, between 3 - 5\r\nletters, and larger than 5 letters.\r\nd) letterstat: Find and display the number of occurrences of the vowels ('a to \"u) by considering\r\nall the words together.\r\ne)search: Read a word from the user and check if the word is present in sptr. If present, display the\r\nsequence number in sptr at which it 1s present. If it is present multiple times, display each occurrence\r\nand the sequence number in sptr at which the word is present.\r\nf)removeDuplicate: Find all duplicate words, deallocate the duplicates, and display the updated list\r\nof words.\r\ng) searchReplace: Read a word from the user and check if the word is present in sptr. If so, prompt the\r\nuser to enter the new word for replacement. Replace (deallocate old word and allocate the new word)\r\nthe word with the new word. If a word being searched is present at multiple locations, replace only the\r\nfirst occurence. Display the updated list of words\r\n\r\nTotal-30 Marks|",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include<string.h>\r\n\r\nint n;\/\/ creating a global variable for the number of strings entered\r\n\r\nvoid create(char *x[]){\r\n    char string[30];\r\n    printf(\"Enter the no. of words to enter: \\n\");\r\n    scanf(\"%d\", &n);\r\n    for(int i=0; i<n; i++){\r\n        printf(\"Enter string %d\\n\", i+1);\r\n        scanf(\"%s\", string);\r\n        printf(\"-----------------------------------------------------------------------------\\n\");\r\n        x[i]= (char *)malloc((strlen(string)+1)* sizeof(char));\/\/ allocation of memory space\r\n        strcpy(x[i], string);\/\/ copying string into the memory space\r\n    }\r\n    printf(\"The strings entered by the user are....\\n\");\r\n\r\n    for(int i=0; i<n; i++){\r\n            printf(\"%s\\n\", x[i]);\r\n    }\r\n    \r\n}\r\n\r\nvoid lengthStat(char *x[]){\r\n    int length,a,b,c;\r\n    a=b=c=0;\r\n    printf(\"From the words entered by the user:\\n\");\r\n    for(int i=0; i<n; i++){\r\n        length= strlen(x[i]);\r\n        if(length<3)a++;\r\n        else if(length<6 && length>2)b++;\r\n        else if(length>5)c++;\r\n    }\r\n    printf(\"%d have length between 1--2 letters\\n\", a);\r\n    printf(\"%d have length between 3--5 letters\\n\", b);\r\n    printf(\"%d have length greater than 5 letters\\n\", c);\r\n}\r\n\r\nvoid letterStat(char *x[]){\r\n    int num=0;\r\n    for(int i=0; i<n; i++){\r\n        for(int j=0; *x[i]!='\\0'; j++, *x[i]++){\r\n            if(*x[i]=='a' ||*x[i]=='e' ||*x[i]=='i' ||*x[i]=='o' ||*x[i]=='u'){\/\/ condition check\r\n                num++;\r\n            }\r\n        }\r\n    }\r\n    printf(\"From all the words entered, the number of vowels that occur are %d.\\n\", num);\r\n}\r\n\r\nvoid search(char *x[]){\r\n    int pos;\r\n    char word[30];\r\n    printf(\"Enter the word to be searched\\n\");\r\n    scanf(\"%s\", word);\r\n    printf(\"-----------------------------------------------------------------------------\\n\");\r\n    for(int i=0; i<n; i++){\r\n            int k= strcmp(word, x[i]);\/\/ comparing the strings\r\n            if(k==0){\r\n                printf(\"The word is present at the position %d\\n\", i+1);\r\n            }\r\n    }\r\n    printf(\"The word is not present at any other positions.\\n\");\r\n}\r\n\r\nvoid removeDuplicate(char *x[]){\r\n    int z=0;\r\n    for(int i=0; i<n-z; i++){\r\n        for(int j=i+1; j<n-z; j++){\r\n            if(strcmp(x[i],x[j])==0){\/\/ condition check\r\n                free(x[j]);\/\/ deallocating the memory space\r\n                z++; \/\/ counter is initialised to know the number of strings deallocated\r\n            }\r\n        }\r\n    }\r\n    printf(\"The updated strings are....\\n\");\r\n\r\n    for(int i=0; i<n-z; i++){\/\/ since the new no. of strings now left are n-z.\r\n            printf(\"%s\\n\", x[i]);\r\n    }\r\n}\r\n\r\nvoid searchReplace(char *x[]){\r\n    int pos;\r\n    char word[30];\r\n    printf(\"Enter the word to be searched\\n\");\r\n    scanf(\"%s\", word);\r\n    for(int i=0; i<n; i++){\r\n            int k= strcmp(word, x[i]);\/\/ string comparision\r\n            if(k==0){\r\n                printf(\"The word is present!!\\nEnter the new word you wish to replace\\n\");\r\n                scanf(\"%s\", word);\r\n                strcpy(x[i], word);\/\/ copying the new word \r\n                break;\r\n            }\r\n    }\r\n    printf(\"-----------------------------------------------------------------------------\\n\");\r\n    printf(\"The updated strings are....\\n\");\r\n\r\n    for(int i=0; i<n; i++){\r\n            printf(\"%s\\n\", x[i]);\r\n    }\r\n}\r\n\r\nint main()\r\n{\r\n    char *sptr[100];\r\n    int choice;\r\n    for(;;){\r\n        printf(\"-----------------------------------------------------------------------------\\n\");\r\n        printf(\"1.Create charecter strings\\n2.Display the number of words of specific length\\n\");\r\n        printf(\"3.Display the number of occurences of vowels\\n4.Search a word\\n5.Remove the duplicate words entered\\n\");\r\n        printf(\"6.Search and replace\\n0.Exit the loop\\nEnter your choice\\n\");\r\n        scanf(\"%d\", &choice);\r\n        printf(\"\\n\");\r\n        switch(choice){\r\n            case 0: return 0;break;\r\n            case 1: create(sptr);break;\r\n            case 2: lengthStat(sptr);break;\r\n            case 3: letterStat(sptr);break;\r\n            case 4: search(sptr);break;\r\n            case 5: removeDuplicate(sptr);break;\r\n            case 6: searchReplace(sptr);break;\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"2. Write a C program with the following functions:\r\na) main: Dynamically allocate a two dimensional integer array whose dimensions would be input\r\nby the user. Fill the array with randomly generated numbers between 0 and 100, i.e. [0,100].\r\nDisplay the array in a properly formatted form. Call the function findMinMax with the 2D array\r\nas a parameter.\r\nb) findMinMax: Find the smallest and the largest of all the numbers present in the array and\r\ndisplay them along with the row and column numbers at which they are present.",
                    "Answer":"#include <stdio.h>\r\n#include<stdlib.h>\r\n#include<time.h>\r\n\r\nvoid findMinMax(int **a, int r, int c){\r\n    int max, min;\r\n    max=min=a[0][0];\r\n    int rmin,rmax,cmin,cmax;\r\n    for(int i=0; i<r; i++){\r\n        for(int j=0; j<c; j++){\r\n            if(a[i][j]>max){\r\n                max=a[i][j];\r\n                rmax=i;\r\n                cmax=j;\r\n            }\r\n        }\r\n    }\r\n    for(int i=0; i<r; i++){\r\n        for(int j=0; j<c; j++){\r\n            if(a[i][j]<min){\r\n                min=a[i][j];\r\n                rmin=i;\r\n                cmin=j;\r\n            }\r\n        }\r\n    }\r\n    printf(\"The maximum element present in matrix is %d, present at row no. %d and column no. %d.\\n\", max, rmax+1, cmax+1);\r\n    printf(\"The minimum element present in matrix is %d, present at row no. %d and column no. %d.\\n\", min, rmin+1, cmin+1);\r\n}\r\n\r\nint main()\r\n{\r\n    int row,column;\r\n    printf(\"Enter the number of rows and columns respectively: \\n\");\r\n    scanf(\"%d%d\", &row, &column);\r\n    int **arr;\r\n    arr= (int **)malloc(row* sizeof(int *));\/\/ allocation of rows\r\n    for(int i=0; i<column; i++){\r\n        arr[i]= (int *)malloc(column* sizeof(int));\/\/ allocation of columns\r\n    }\r\n    srand(time(0));\r\n    for(int i=0; i<row; i++){\r\n        for(int j=0; j<column; j++){\r\n                arr[i][j]= rand()%101;\/\/ filling array elements\r\n        }\r\n    }\r\n\r\n    for(int i=0; i<row; i++){\r\n        for(int j=0; j<column; j++){\r\n               printf(\"%d\\t\", arr[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    findMinMax(arr,row,column);\r\n\r\n    return 0;\r\n}" 
                },
                {
                    "Question":"A square 2D character array of size nXn is called \u2018character-mirrored\u2019 if it satisfies the following\r\ncondition.\r\n\u2022 Consider all the left diagonals of the array except the principal left diagonal, the upper right\r\ncorner element of the array and the lower left corner element of the array. A symmetric\r\npair of left diagonals is such a pair which consists of an upper left diagonal and a lower left\r\ndiagonal, both separated equally from the principal left diagonal. If, for ALL symmetric\r\npairs of left diagonals of the array, the characters (elements) of upper left diagonal of each\r\nsymmetric pair is equal to the reverse order of the characters (elements) of its corresponding\r\nlower left diagonal of that symmetric pair, then the array is called \u2018character-mirrored\u2019,\r\notherwise it is not \u2018character-mirrored\u2019.\r\nFor example, consider a 4x4 character array:\r\n\r\nNow consider the same array with different color codings to help you understand\r\n\r\nPrincipal left diagonal = [A, F, K, P] (shown in red)\r\nUpper right corner element = D (highlighted in blue)\r\nLower left corner element = M (highlighted also in blue)\r\n1st symmetric pair (highlighted in yellow both above and below the principal left\r\ndiagonal):\r\nUpper left diagonal = [B, G, L]\r\nLower left diagonal = [L, G, B]\r\n2nd symmetric pair (highlighted in green both above and below the principal left\r\ndiagonal):\r\nUpper left diagonal = [C, H]\r\nLower left diagonal = [H, C]\r\nNow consider the two symmetric pairs. For the 1st pair the characters in the upper left diagonal\r\nare exactly the reverse of the characters of the lower left diagonal. For the 2nd symmetric pair\r\n\r\nalso, the same observation can be made. Hence this particular 2D character array is \u2018character-\r\nmirrored\u2019.\r\n\r\nWrite a C program to input an n X n 2D character array and print all pairs of symmetric left\r\ndiagonals. Also, check whether the 2D array is \u2018character-mirrored\u2019 or not.",
                    "Answer":"#include <stdio.h>\r\n\/*\r\n\r\na x b d\r\nc d b c\r\nc b c c\r\nd b x y\r\n\r\n\r\na b c\r\nf d f\r\nx b y\r\n\r\na d c d e\r\na b c d e\r\ne b c b e\r\ne d c d a\r\na d c d e\r\n*\/\r\nint main()\r\n\r\n{\r\n    int n,i,j,k,count_diag,t;\r\n    int n_elements=0;\r\n\r\n    char arr1[10],arr2[10];\r\n    char matrix[10][10];\r\n\r\n    printf(\"Enter n:\");\r\n    scanf(\"%d\",&n);\r\n\r\n\r\n    for (i=0;i<n;i++)\r\n    {\r\n        for (j=0;j<n;j++)\r\n        {\r\n            printf(\"a[%d%d]:\",i+1,j+1);\r\n            scanf(\" %c\",&matrix[i][j]);\r\n        }\r\n    }\r\n\r\n    count_diag=0;\r\n    for (k=1;k<n-1;k++)\r\n    {\r\n\r\n        \/*\r\n        clear arr1, arr2\r\n        *\/\r\n        for(i=0;i<10;i++)\r\n        {\r\n            arr1[i]=0;arr2[i]=0;\r\n        }\r\n\r\n        for (i=0;i<n;i++)\r\n        {\r\n            for (j=0;j<n;j++)\r\n            {\r\n                if (j==i+k)\r\n                {\r\n                    arr1[i]=matrix[i][j];\r\n                }\r\n                else if (i==j+k)\r\n                {\r\n                    arr2[j]=matrix[i][j];\r\n                }\r\n            }\r\n        }\r\n        n_elements=0;\r\n        for (t=0;t<n-k;t++)\r\n        {\r\n            if (arr1[t]==arr2[n-k-(t+1)])\r\n            {\r\n                n_elements++;\r\n            }\r\n        }\r\n        if (n_elements==n-k)\r\n        {\r\n            printf(\"Symmetric left diagonal:\");\r\n            for (t=0;t<n-k;t++)\r\n            {\r\n                printf(\" %c\",arr1[t]);\r\n            }\r\n            printf(\"\\n\");\r\n            count_diag++;\r\n        }\r\n    }\r\n\r\n    if (count_diag>0)\r\n    {\r\n        printf(\" The 2D array is character-mirrored , %d Symmetric found: \",count_diag);\r\n    }\r\n    else\r\n    {\r\n        printf(\" The 2D array is not character-mirrored : \");\r\n    }\r\n}"
                },
                {
                    "Question":"A dynamic array is an array whose size is only known during the runtime of a program. You\r\ncan use the following two functions, malloc() or calloc() to define dynamic arrays. A strict\r\nsawtooth array is an array where the values of the sequence of elements should follow the\r\n\r\nup-down principle. The successive elements of the array should not be the same. The suc-\r\ncessive differences across the array should follow alternate +ve and -ve values. For example\r\n\r\n(1,4,2,5,4,8,6,10,9) and (-10,-15,0,-2,6,3) are strict sawtooth arrays of size 9 and 6, respectively,\r\nbut (1,5,7,3,6) and (34,23,23,44) are not strict sawtooth arrays. In this program you have to use\r\nthe concept of dynamic arrays to perform the following tasks with respect to sawtooth arrays.\r\n\u2022 Prompt the user to enter the size of the array as \u2018n\u2019. Declare a dynamic integer array of\r\nthe same size.\r\n\u2022 Take input \u2018n\u2019 different integers into the array from the keyboard.\r\n\u2022 Check if the array is a sawtooth array or not. Use the function int isSawtooth(int *) that\r\ntakes as argument a pointer to the array and returns 1 if the array is sawtooth, otherwise\r\nit returns 0. Print the appropriate message on the console.\r\n\u2022 If the array is NOT a sawtooth array, then find out the first position in the array where\r\nthe sawtooth condition is violated. Use the function void position(int *, int *) which\r\ntakes in two pointer arguments, first one is the pointer to the array and the second one\r\na pointer to another integer variable declared in main. The position where the sawtooth\r\ncondition is violated is written into the variable pointed by the second argument (Note that\r\nthis function should NOT return the position). Also this function should be called only if\r\nthe array is not sawtooth.\r\n\u2022 The program then frees the dynamic array created. It asks whether the user wants to\r\ncontinue again or not. It prompts the user to input \u2018Y\u2019 (for Yes) or \u2018N\u2019 (for No) to continue\r\nthe program. If \u2018Y\u2019 is entered, then the steps are repeated again and if \u2018N\u2019 is entered, the\r\nprogram exits. The array has to be dynamically allocated each time the program runs.\r\n\r\nExample:\r\nEnter n: 9\r\nEnter the array:\r\n1,4,2,5,4,8,6,10,9\r\nThe array is a strict sawtooth array.\r\nDo you want to continue (Y\/N): Y\r\nEnter n: 5\r\nEnter the array: 1,5,7,3,6\r\nThe array is not a strict sawtooth array.\r\nFirst violating position: 3\r\nDo you want to continue (Y\/N): N",
                    "Answer":"#include<stdio.h>\r\n#include<stdlib.h>\r\n\/\/Declaring Functions\r\nint isSawtooth(int *arr,int n);\r\n\r\nvoid position(int *arr,int *pos, int n);\r\n\r\nvoid main(){\r\n\r\n    \/\/loop for re-running\r\n    char c = 'Y';\r\n    while(c =='Y'){\r\n\r\n        \/\/Variables for size of array and pointer of array\r\n        int n,*p;\r\n\r\n        \/\/Taking user input\r\n        printf(\"Enter n(>=3) : \");\r\n        scanf(\"%d\",&n);\r\n\r\n        \/\/Allocating memory to the array\r\n        p=(int*)malloc(n*4);    \/\/ sizeof(int) wasn't working for some reason so i just put 4 bytes for size of int\r\n\r\n        \/\/Taking use input for array\r\n        printf(\"Enter the elements of the array: \");\r\n\r\n        for(int i=0;i<n;i++){\r\n            scanf(\"%d\",p+i);\r\n        }\r\n\r\n        \/\/Checking if sawtooth array\r\n        if(isSawtooth(p,n)){\r\n\r\n            printf(\"The array is a strict Sawtooth array.\\n\");\r\n\r\n        }\r\n        else{   \/\/if not, then finding the position in which it is violated\r\n            int pos;\r\n            printf(\"The array is not a strict sawtooth array.\\n\");\r\n            position(p,&pos, n);\r\n            printf(\"First Violating postion: %d\\n\",pos);\r\n        }\r\n        \/\/Asking whether to re-run\r\n        printf(\"Do you want to continue(Y\/N): \");\r\n        scanf(\" %c\", &c);\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nint isSawtooth(int *arr,int n){\r\n\r\n    int x,y,flag=1;\r\n\r\n    for(int i=0;i<n-3;i++){\r\n\r\n        x = arr[i+1] - arr[i];\r\n        y = arr[i+2] - arr[i+1];\r\n\r\n        if(x*y>=0){\r\n            flag=0;   \/\/ if the product of differences is positive that means both have the same sign, so not sawtooth\r\n            break;\r\n        }\r\n    }\r\n    return flag;\r\n}\r\n\r\nvoid position(int *arr,int *pos, int n){\r\n    int x,y;\r\n    for(int i=0;i<n-2;i++){\r\n\r\n        x=arr[i+1]-arr[i];\r\n        y=arr[i+2]-arr[i+1];\r\n\r\n        if(x*y>=0){     \/\/ Same logic as in is Sawtooth function\r\n            *pos = i+3; \/\/ i+3 to convert from 0->n-1 to 1->n\r\n            return;\r\n        }\r\n    }\r\n    return;\r\n}"
                },
                {
                    "Question":"You can put multiple strings within a 2D character array where each row of the character array\r\nholds one string. For example char arr[3][100] can hold three strings, each of length of maximum\r\n100 characters and the first string is identified by arr[0], the second string by arr[1] and so\r\non. Declare a 2D array string[5][1000] that can hold 5 strings of maximum 1000 characters\r\neach and take input the 5 strings. Each string is a sentence containing any number of words.\r\nWords consist of alphabets (you may consider all lowercase characters for simplicity) only and\r\nno numericals or special characters, and two words are separated only by one blank space. No\r\nneed to use fullstop also to mark the end of the string. Hence perform the following operations\r\nas defined by the following functions.\r\n\u2022 void characterCount(char *str, int *vowel, int *consonant) - It counts the total\r\nnumber of vowels and number of consonants of a string pointed by char *str, and writes\r\nthe vowel count to the address pointed by int *vowel and similarly the consonant count to\r\nthe address pointed by int *consonant. A space is neither a vowel nor a consonant.\r\n\u2022 int wordCount(char *str) - It returns the number of words of the string pointed by char\r\n*str.\r\n\u2022 void excessWord(char *str1, char*str2) - This function first calls wordCount() to get\r\nto know the number of words of each of the two strings char *str1 and char *str2. Hence it\r\nprints the excess words that are present in the longer string. For example if the first string\r\ncontains 4 words and the second string contains 6 words, then it prints words 5 and 6 of\r\nthe second string. If both the strings contain equal number of words, then it prints \u201CNo\r\nexcess word\u201D.\r\n\u2022 void str pair compute(char **arr, int number of strings) - This function takes as\r\ninput the base address of the entire 2D array containing all the strings and another integer\r\ndenoting the number of strings within the 2D array. Hence it displays the pairs of strings\r\nwhich contain the same words. The words need not be in the same order. In case no two\r\nstrings contain the same words, then it prints \u201CNot Applicable\u201D. This function may also\r\nuse wordCount() if required. Consider the example as shown. Suppose the 5 strings in\r\nstring[][] are,\r\n\u2013 abcd sdfg qwerty oiuyt\r\n\u2013 cfr ojhg nsert\r\n\u2013 evjs irjcl perry\r\n\u2013 nsert cfr ojhg\r\n\u2013 qwerty sdfg abcd oiuyt\r\nHere, (string[0] and string[4]) and (string[1] and string[3]) contain the same words. So the\r\nfunction displays (1,5) and (2,4) as output, i.e the 1st string and 5th string and 2nd string\r\nand 4th string.\r\nFrom main() after taking the 5 string as input, first call characterCount() for each of the 5\r\nstrings to print the vowel and consonant count within main() itself. Declare integer variables as\r\nrequired. Hence take input two numbers between 1 and 5 that represent any two strings and\r\ncall excessWord() that prints the excess words among the two strings. Note that excessWord()\r\nin turn calls wordCount(). It is upto you how you wish to display the different outputs, but it\r\nshould maintain the specifications as given. Finally call str pair compute() to display the pairs\r\nof strings which have the same words in different orders.",
                    "Answer":"\/*\r\n Takes user input as 2D character array (ie, 1D array of strings)\r\n    Following operations are performed on the array:\r\n    1) void characterCount(char* str, int* vowel, int* consonant) - finds number of vowels and consonants and assigns it through\r\n\trespective pointer\r\n    2) int wordCount(char* str) - returns no. of words in string\r\n    3) void excessWord(char* str1, char* str2) - checks wordcount of both strings, and prints words which are excess in larger string\r\n    4) void str_pair_compute(char **arr, int number_of_strings) - takes entire 2d array + number of strings in it as input,\r\n\tdisplays positions that contain same word\r\n*\/\r\n#include<stdio.h>\r\n#include<string.h>\r\n\/\/Declaring functions\r\nvoid characterCount(char*, int*, int*);\r\nint wordCount(char*);\r\nvoid excessWord(char*, char*);\r\nvoid wordsInString(char* , char[][1000]); \/\/extracts word from string and saves it as a new 2d array\r\nint isEqual(char*, char*);\/\/check if two strings are equal\r\nvoid str_pair_compute(char (*arr)[1000], int);\r\n\r\nint main() {\r\n    char string[5][1000];\r\n    int v,c,wc, i;\r\n    \/\/Taking user input for 5 strings\r\n    printf(\"Enter 5 strings: \");\r\n    for(i=0; i<5;i++){\r\n        gets(string[i]);\r\n    }\r\n\r\n    for(i=0; i<5;i++){\r\n        characterCount(string[i],&v,&c);\t\/\/Count number of volwels and consonants\r\n        wc = wordCount(string[i]);\t\t\t\/\/Count number of words\r\n        printf(\"For string %d: Word count = %d, Vowels = %d, Consonants = %d\\n\",i+1,wc,v,c);\r\n    }\r\n    int m,n;\r\n    printf(\"Enter position of two strings to print excess words: \");\r\n    scanf(\"%d %d\",&m,&n);\r\n    excessWord(string[m-1],string[n-1]);\r\n    printf(\"Pairs are: \");\r\n    str_pair_compute(string,5);\r\n    return 0;\r\n}\r\n\r\nvoid characterCount(char* str, int* vowel, int* consonant){\r\n    int v=0,c=0, i; \/\/to store vowel and consonant count temporarily\r\n    for( i=0;*(str+i)!='\\0';i++){\r\n        \/\/if its vowel, increment vowel count\r\n        if(*(str+i) == 'a' || *(str+i) == 'e' || *(str+i) == 'i' || *(str+i) == 'o' || *(str+i) == 'u') v++;\r\n        else if(*(str+i)==' ') continue; \/\/if its space, do nothing\r\n        else c++; \/\/since there will be no other characters, we can say this is a consonant\r\n        \/\/so we increment consonant count\r\n\r\n    }\r\n    \/\/returning vowel and consonant count through the pointers\r\n    *vowel = v;\r\n    *consonant = c;\r\n}\r\n\/\/Function to perform word counts from a sentence\r\nint wordCount(char* str){\r\n    int words = 1;\r\n    int i;\r\n    for(i=0;*(str+i)!='\\0';i++){\r\n        if(*(str+i) == ' ') words++;\r\n    }\r\n    return words;\r\n}\r\n\r\nvoid excessWord(char* str1, char* str2){\r\n    if(wordCount(str1) == wordCount(str2)){\r\n        printf(\"No excess word\\n\");\r\n        return;\r\n    }\r\n    char *lr = (wordCount(str1)>wordCount(str2)) ? str1 : str2;\r\n    char *sr = (wordCount(str1)>wordCount(str2)) ? str2 : str1;\r\n    int lrc=0, i;\r\n    printf(\"Excess word(s): \");\r\n    for(i=0;*(lr+i)!='\\0';i++){\r\n        if(*(lr+i) == ' ') lrc++;\r\n        if(lrc >= wordCount(sr)){\r\n            printf(\"%c\",*(lr+i));\r\n        }\r\n    }\r\n    printf(\"\\n\");\r\n}\r\n\/\/Function to identify words present in a string\r\nvoid wordInString(char *str1, char str2[][1000]){\r\n    int i, j=0,k=0; \/\/j for index of each char, k for index of word\r\n    for(i=0;*(str1+i)!='\\0';i++){\r\n\r\n        if(*(str1+i) == ' '){\r\n            *(*(str2+k) + j) = '\\0'; \/\/ending that word with null character\r\n            j=0; \/\/resetting index for next wordCount\r\n            k++; \/\/moving on to next word\r\n            if(k==wordCount(str1)+1) return;\r\n        }\r\n        else{ \/\/if it is not a space, it is copied to array\r\n            *(*(str2+k) + j) = *(str1+i);\r\n            j++; \/\/incrementing character index\r\n        }\r\n    }\r\n}\r\n\/\/Function to check if the two strings are equal or not\r\nint isEqual(char* str1, char* str2){\r\n    \/\/if lengths are not same, they are not equal\r\n    if(strlen(str1)!=strlen(str2)) return 0;\r\n    else{\r\n        for(int i=0;*(str1+i)!='\\0';i++){\r\n            \/\/if at any time characters are diff, they are not equal\r\n            if(*(str1+i) != *(str2+i) && *(str1+i) !=' ' && *(str2+i) !=' ') return 0;\r\n        }\r\n    }\r\n    return 1;\r\n}\r\n\/\/Function takes a 2d array and number of strings in it as input and displays positions that contain same word\r\nvoid str_pair_compute(char (*arr)[1000],int number_of_strings){\r\n    \/\/we will separate the words in two strings pairwise, and check if any are equal\r\n    int ct=0,flag=0, i, j, k, l; \/\/ct to check if the pair has been checked already, flag to check if there is any pair at all\r\n    char words1[100][1000],words2[100][1000]; \/\/2 arrays that will store words of arr[i] and arr[j] in each iteration\r\n    for(i=0;i<number_of_strings;i++){\r\n\r\n       wordInString(*(arr+i),words1);\/\/extracting words from arr[i]\r\n        for(j=i+1; j<number_of_strings; j++){\r\n            wordInString(*(arr+j),words2); \/\/extracting words from arr[j]\r\n            \/\/now we iterate within words1 and words2 to see if any words are equal\r\n            for(k=0;k<wordCount(*(arr+i));k++){\r\n                for(l=0;l<wordCount(*(arr+j));l++){\r\n                    if(isEqual(words1[k],words2[l]) && ct==0){\r\n                        printf(\"(%d, %d) \",i+1,j+1);\r\n                        ct++; \/\/incrementing ct and flag\r\n                        flag++;\r\n                    }\r\n                }\r\n            }\r\n            ct=0; \/\/resetting value of ct\r\n        }\r\n    }\r\n    if(flag ==0) printf(\"Not applicable\"); \/\/if no pairs, print not applicable\r\n\r\n}"
                },
                {
                    "Question": "]Write a program which reads an integer n, and then reads a n x n integer matrix. \r\nThe program should then print the transpose of this matrix. If A' is a transpose of \r\nthe matrix A, then A[i][j] = A[j][i]. Print the original and the transposed matrix in \r\nthe usual matrix format. For example, if n = 2, and the input matrix is : \r\n1 2\r\n3 4\r\nthe output matrix is : \r\n1 3\r\n2 4",
                    "Answer": "#include <stdio.h>\r\n\r\nvoid transpose(int[][10],int);  \/\/function to print the transpose of a matrix\r\n\r\nint main()\r\n{\r\n    int n;\r\n    \/\/n is an integer variable used to store the dimension of array\r\n\r\n    int input_array[10][10];\r\n\r\n    \/\/reading value of n\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/reading values of 2-d array\r\n    printf(\"Enter %d values: \",n*n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<n;j++)\r\n        {\r\n            scanf(\"%d\",&input_array[i][j]);\r\n        }\r\n    }\r\n\r\n    \/\/printing values of input matrix\r\n    printf(\"\\nInput matrix: \\n\");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<n;j++)\r\n        {\r\n            printf(\"%d \",input_array[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    \/\/printing values of transpose matrix\r\n    printf(\"\\nTranspose: \\n\");\r\n    transpose(input_array,n);\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: transpose\r\n*prints transpose\r\n*\r\n*array[][]: integer array that takes original array\r\n*dimension: integer that stores dimension of array\r\n*\r\n*void type, doesn't return any value\r\n*\/\r\nvoid transpose(int array[][10],int dimension)\r\n{\r\n    int temp;\r\n\r\n    \/\/iterating through the matrix to modify\r\n    for(int i=0;i<dimension;i++)\r\n    {\r\n        for(int j=i;j<dimension;j++)\r\n        {\r\n            \/\/swapping elements according to definition of transpose\r\n            temp=array[j][i];\r\n            array[j][i]=array[i][j];\r\n            array[i][j]=temp;\r\n        }\r\n    }\r\n\r\n    \/\/printing the elements of transpose matrix\r\n    for(int i=0;i<dimension;i++)\r\n    {\r\n        for(int j=0;j<dimension;j++)\r\n        {\r\n            printf(\"%d \",array[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return;\r\n}"
                },
                {
                    "Question": "Write a program which reads an integer n, and then reads a n x n integer \r\nmatrix such that it is filled up with the numbers 1 to n^2.. Each number can be \r\nused only once. Assume that the users follows these rules. Now, check and print \r\nwhether the matrix is a magic square. A magic square is the one where the sum of \r\neach of the rows, each of the columns and each of the two major diagonals is the \r\nsame.\r\nHere is an example of a 3 x 3 magic square:\r\n4 9 2 \r\n3 5 7 \r\n8 1 6\r\nHere is an example of a 4 x 4 magic square:\r\n7 12 1 14 \r\n2 13 8 11 \r\n16 3 10 5 \r\n9 6 15 4\r\n",
                    "Answer": "#include <stdio.h>\r\n\r\nint isMagicSquare(int[][10],int);    \/\/function to check whether a 2-d array is a Magic Square or not\r\n\r\nint main()\r\n{\r\n    int n;\r\n    \/\/n is an integer variable used to store dimension of array\r\n\r\n    int input_array[10][10];\r\n\r\n    \/\/reading value of n\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/reading values of 2-d array\r\n    printf(\"Enter %d values: \",n*n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<n;j++)\r\n        {\r\n            scanf(\"%d\",&input_array[i][j]);\r\n        }\r\n    }\r\n\r\n    \/\/displaying input 2-d array\r\n    printf(\"Input matrix: \\n\");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<n;j++)\r\n        {\r\n            printf(\"%d \",input_array[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    if(isMagicSquare(input_array,n))\r\n    {\r\n        \/\/if matrix is a magic square\r\n        printf(\"\\nEntered matrix is a Magic Square.\\n\");\r\n    }\r\n    else\r\n    {\r\n        \/\/if matrix is not a magic square\r\n        printf(\"\\nEntered matrix is NOT a Magic Square.\\n\");\r\n    }\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: isMagicSquare\r\n*returns whether the matrix is a Magic Square\r\n*\r\n*int array[][]: integer array that takes input array\r\n*int dimension: integer variable that stores dimension of array\r\n*\r\n*returns: 1 if the matrix is a magic square, 0 if it's not\r\n*\/\r\nint isMagicSquare(int array[][10],int dimension)\r\n{\r\n    int sum_diag_one=0, sum_diag_two=0;\r\n    \/\/sum_diag_one will store sum of elements of first diagonal\r\n    \/\/sum_diag_two will store sum of elements of second diagonal\r\n\r\n    \/\/finding sum of diagonal elements\r\n    for (int i=0;i<dimension;i++)\r\n    {\r\n        sum_diag_one+=array[i][i];\r\n        sum_diag_two+=array[i][dimension-1-i];\r\n    }\r\n\r\n    \/\/if sum of diagonal elements are not equal, matrix can't be a magic square\r\n    if(sum_diag_one!=sum_diag_two)\r\n    {\r\n        return 0;\r\n    }\r\n\r\n    \/\/finding sum of rows and columns\r\n    for(int i=0;i<dimension;i++)\r\n    {\r\n        int sum_row=0, sum_col=0;\r\n        \/\/sum_row will store sum of elements in a row\r\n        \/\/sum_col will store sum of elements in a column\r\n\r\n        for(int j=0;j<dimension;j++)\r\n        {\r\n            sum_row+=array[i][j];\r\n            sum_col+=array[j][i];\r\n        }\r\n\r\n        \/\/if sum of row elements is not equal to sum of column elements then matrix can't be Magic Square\r\n        \/\/if sum of row elements and sum of column elements are not equal to sum of diagonal elements, then matrix can't be Magic Square\r\n        if(sum_row!=sum_col || sum_row!=sum_diag_one)\r\n        {\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    \/\/if all conditions are satisfied, then matrix is Magic Square. Hence, returning 1.\r\n    return 1;\r\n}"
                },
                {
                    "Question": "A three dimensional vector can be represented as a 1-D array containing three \r\nfloating point values. Write a program which inputs a positive integer n from the \r\nuser and then input n three dimensional vectors. The memory for storing these n \r\nvectors must be allocated dynamically. Now, compute the pairwise distance \r\namong these n vectors and store them in a n x n matrix. The memory for this \r\nmatrix should also be allocated dynamically. Use can use the sqrt function in \r\nmath.h",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <math.h>\r\n\r\nint main()\r\n{\r\n    int n;\r\n    \/\/n is an integer variable that will store the number of vectors the user wants to enter\r\n\r\n    \/\/reading the value of n\r\n    printf(\"Enter n: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/allocating memory for 2-d array\r\n    float **pointer_to_pointer=(float**)malloc(n*sizeof(float*));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if  (pointer_to_pointer == NULL)\r\n    {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n\t}\r\n\r\n\t\/\/allocating memory for each row of 2-d array\r\n\tfor(int i=0;i<n;i++)\r\n    {\r\n        pointer_to_pointer[i]=(float*)malloc(3*sizeof(float));\r\n\r\n        \/\/if system is unable to allocate memory, then exit\r\n        if  (pointer_to_pointer[i] == NULL)\r\n        {\r\n            printf (\"\\nMemory cannot be allocated\");\r\n            exit(0);\r\n        }\r\n    }\r\n\r\n    \/\/allocating memory for 2-d array\r\n    float **pointer_output_array;\r\n    pointer_output_array=(float**)malloc(n*sizeof(float*));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if  (pointer_output_array == NULL)\r\n    {\r\n        printf (\"\\nMemory cannot be allocated\");\r\n        exit(0);\r\n    }\r\n\r\n    \/\/allocating memory for each row of 2-d array\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        pointer_output_array[i]=(float*)malloc(n*sizeof(float));\r\n\r\n        \/\/if system is unable to allocate memory, then exit\r\n        if  (pointer_output_array[i] == NULL)\r\n        {\r\n            printf (\"\\nMemory cannot be allocated\");\r\n            exit(0);\r\n        }\r\n    }\r\n\r\n    \/\/reading n vectors\r\n    printf(\"\\nEnter %d vectors:\\n\",n);\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<3;j++)\r\n        {\r\n            scanf(\"%f\",&pointer_to_pointer[i][j]);\r\n        }\r\n    }\r\n\r\n    \/\/storing pairwise distances in nxn matrix\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<n;j++)\r\n        {\r\n            \/\/distance formula in 3-d space for every pair of vectors\r\n            pointer_output_array[i][j]=sqrt(((pointer_to_pointer[i][0]-pointer_to_pointer[j][0])*(pointer_to_pointer[i][0]-pointer_to_pointer[j][0]))+((pointer_to_pointer[i][1]-pointer_to_pointer[j][1])*(pointer_to_pointer[i][1]-pointer_to_pointer[j][1]))+((pointer_to_pointer[i][2]-pointer_to_pointer[j][2])*(pointer_to_pointer[i][2]-pointer_to_pointer[j][2])));\r\n        }\r\n    }\r\n\r\n    \/\/printing the output matrix\r\n    printf(\"\\nOutput matrix is:\\n\");\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        for(int j=0;j<n;j++)\r\n        {\r\n            printf(\"%f\\t\",pointer_output_array[i][j]);\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n\r\n    \/\/freeing the allocated memory\r\n    for(int i=0;i<n;i++)\r\n    {\r\n        free(pointer_output_array[i]);\r\n        free(pointer_to_pointer[i]);\r\n    }\r\n    free(pointer_output_array);\r\n    free(pointer_to_pointer);\r\n\r\n    return 0;\r\n}"
                }
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question":"We know that in a sorted array A of n distinct integers, \nA[i] has rank i, that is, A[i] is larger than exactly i elements in the array A, as in the example \nFor n = 8 = 2^3, A = {2, 4, 47, 56, 99, 100, 120}. If A is not sorted as for the case n = 4 and \nA = {2, 1, 5, 7}, A[0] has rank 1 and not 0.\r\n(a) Write a C program to sort an unsorted given array A of n = 2k distinct integers by \ncomputing the rank of each element in A, where k is any positive integer. So, you need to read n, \nand the entire unsorted array A of n distinct integers, sort the array A, and print the sorted array. \nYou must also print the rank of all the n elements of A.\r\n\r\nThe shuffle operation on an array A is as follows, \nwhere we assume that n = 2^k. For all even i, 0 \u2264 i \u2264 n \u2212 2, we must place these numbers \nin the same order in the first half of the array A, and for all odd i, 1 <= i <= n \u2212 1, \nwe must place A[i] in the same order in the second half of the array. \nSo, for A = {1, 3, 4, 56, 77, 111, 222, 8888}, we must transform A so that A becomes {1, 4, 77, 222, 3, 56, 111, 888}.\r\n(b) Your program must further shuffle the sorted array of part (1), k times \nwhere we assume that n = 2^k, for any positive integer k. After each shuffle, \nyou must print the array. Shuffling the above array A = {1, 4, 77, 222, 3, 56, 111, 888} gives A = {1, 77, 3, 111, 4, 222, 56, 888}.\r\n",
                    "Answer":"#include<stdio.h>\r\n\r\nint main (){\r\n    int A[100],B[100],n,i,j,rank[100];\r\n    printf(\"Enter an integer\\n\");\r\n    scanf(\"%d\",&n);\r\n    printf(\"Enter %d distinct integers \\n\",n);\r\n    for (i=0;i<n;i++){\r\n        scanf(\"%d\",&A[i]);\r\n    }\r\n    for (i=0;i<n;i++) {\r\n        rank[i]=0;\r\n        for (j=0;j<n;j++) {\r\n            if (A[j]<A[i])\r\n            rank[i]++;\r\n        }\r\n        B[rank[i]]=A[i];\r\n    }\r\n    for (i=0;i<n;i++){\r\n        A[i]=B[i];\r\n    }\r\n    printf(\"The sorted array is\\n\");\r\n    for (i=0;i<n;i++){\r\n        printf(\"%d \",A[i]);\r\n    }\r\n    printf(\"\\n\");\r\n\r\n    printf(\"The rank array is\\n\");\r\n    for (i=0;i<n;i++){\r\n        printf(\"%d \",rank[i]);\r\n    }\r\n    printf(\"\\n\");\r\n    int nn; int c = 1;\r\n    for (nn=n;nn!=1;nn=nn\/2) {\r\n        for (i=0;i<n;i++) {\r\n            if (i%2==0)\r\n                B[i\/2]=A[i];\r\n            else\r\n                B[n\/2+i\/2]=A[i];\r\n        }\r\n        for (i=0;i<n;i++){\r\n            A[i]=B[i];\r\n        }\r\n        printf(\"The array after shuffle %d is\\n\", c);\r\n        for (i=0;i<n;i++){\r\n            printf(\"%d \",A[i]);\r\n        }\r\n        printf(\"\\n\");\r\n        c++;\r\n    }\r\n}\r\n"
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question":"Write a program which reads two lists of numbers of length M (to be read) and N (to be read) \nin two different arrays, A and B, respectively. The program stores all the even numbers from A and B to A, \nand all the odd numbers from A and B to B. Print the values (final contents) \nstored in arrays A and B in separate lines, where the numbers are printed from the first to last locations \nof an array consecutively separated by a blank space, however the maximum element of the list is printed \nfirst followed by all other elements in any order. \n[Check the format of output given below in the example.]\r\nFor example, consider the following input data:\r\nM=6 (Size of the list to be read in A)\r\n12, 10, 13, 7, 4, 0 (Numbers to be read in A )\r\nN=5\r\n10,4,3,9,2 (Numbers to be read in B)\r\n\r\nOutputs for the above input data (Follow this format while printing\r\nresults):\r\n----------------------------------------\r\nArray A (List of even numbers):\r\n12 10 4 0 10 4 2\r\n\r\nArray B (List of odd numbers)\r\n13 7 3 9\r\n---------------------------------------\r\n\r\nTest your program for the following input data sets:\r\n(i)\r\nM=10\r\n1, 4, 2, 6, 8, 9, 0, 1, 7, 5\r\nN=7\r\n135, 100, 250, 99, 123, 7, 4\r\n(ii)\r\nM=8\r\n46, 35, 57, 79, 88, 24, 22, 12\r\nN=4\r\n135, 105, 255, 999\r\n",
                    "Answer":
                    "#include <stdio.h>\r\n\r\nint main() {\r\n  int M,N;\r\n  printf(\"please enter the number of values you want to give in List A\\n\");\r\n  scanf(\"%d\", &M);\r\n  printf(\"please enter the number of values you want to give in List B\\n\");\r\n  scanf(\"%d\", &N);\r\n\r\n  int A[M + N], B[M + N];\r\n\r\n  printf(\"please enter the values for list A:\\n\");\r\n  for (int i = 0; i < M; i++){\r\n        scanf(\"%d\", &A[i]);\r\n  }\r\n  printf(\"please enter the values for list B:\\n\");\r\n  for (int i = 0; i < N; i++){\r\n        scanf(\"%d\", &B[i]);\r\n  }\r\n\r\n  int even[M + N], j = 0, p = 0, odd[M+N];\r\n  \/\/extracting odd and even from list A\r\n  for (int i = 0; i < M; i++){\r\n        if (A[i]%2 == 0 ){\r\n          even[j] = A[i];\r\n          j++;\r\n        }\r\n        else {\r\n          odd[p] = A[i];\r\n          p++;\r\n        }\r\n  }\r\n  \/\/extracting odd and even from list B\r\n  for (int i = 0; i < N; i++){\r\n        if (B[i]%2 == 0 ){\r\n          even[j] = B[i];\r\n          j++;\r\n        }\r\n        else {\r\n          odd[p]= B[i];\r\n          p++;\r\n        }\r\n  }\r\n\r\n  \/\/Assigning the even numbers to list A\r\n\r\n  for (int i = 0; i < j; i++){\r\n    A[i] = even[i];\r\n\r\n  }\r\n  \/\/Assigning the odd numbers to list B\r\n\r\n  for (int i = 0; i < p; i++){\r\n    B[i] = odd[i];\r\n\r\n  }\r\n\r\n  \/\/ Now the length of Array A is J(for even numbers) and Array B is P(for odd numbers)\r\n\r\n\/\/finding the maximum in A\r\nint max = A[0], max_pos = 0;\r\n for (int i = 0; i < j; i++){\r\n   if (A[i] > max){\r\n     max = A[i];\r\n     max_pos = i;\r\n   }\r\n }\r\n\r\n  \/\/ moving the maximum to the first position in A(even numbers list)\r\n  int temp = A[0];\r\n  A[0] = max;\r\n  A[max_pos] = temp;\r\n\r\n\r\n\/\/finding the maximum in B\r\n  max = B[0], max_pos = 0;\r\n for (int i = 0; i < p; i++){\r\n   if (B[i] > max){\r\n     max = B[i];\r\n     max_pos = i;\r\n   }\r\n }\r\n\r\n\/\/ moving the maximum to the first position in B(odd numbers list)\r\n  temp = B[0];\r\n  B[0] = max;\r\n  B[max_pos] = temp;\r\n\r\n\r\n\/\/printing the even and odd numbers in the list A and B\r\n  printf(\"Array A(List of even Numbers)\\n\");\r\n  for (int i = 0; i < j;i++){\r\n    printf(\"%d \", A[i]);\r\n  }\r\n\r\n  printf(\"\\n\");\r\n\r\n  printf(\"Array B(List of odd Numbers)\\n\");\r\n  for (int i = 0; i < p;i++){\r\n    printf(\"%d \", B[i]);\r\n  }\r\n\r\n  printf(\"\\n\\n\");\r\n\r\n  return 0;\r\n}\r\n"
                }
            ]
        }
    ],
    "linkedList": [
        {
            "type": "lab",
            "Elements": [
                {
                    "Question":"With three positive numbers as input from the user, dynamically allocate a 2D character array\r\nwith rows and columns. Assign and fill up the rest of randomly with 0\u2019s\r\nand 1\u2019s. To control the number of 1\u2019s in A, you need Assume that the value of lies in the interval [1,100].\r\nUse random number generator (see w06-1) to generate random numbers in [1,100] for\r\npopulating the array based on the value of t. The probability that a particular entry is should be t\/100.\r\nPrint the binary array on the terminal. For clarity, print 0\u2019s as hyphens.\nUse the rows and columns of A as the (x,y)-coordinates of the points corresponding to the \u2019s in\r\nMind that corresponds to column, whereas to row. Consider the points (0,0),(c-1,0) and the\r\ntopmost points of the columns; call this set P.Traverse A in column-major order and print P in\r\nincreasing order of x.Find the taut rubber band R (as a piecewise-linear poly-line) from (0,0) to (c-1,r-1), and passing\r\nfrom the first to the last point of  P, so that no point of P lies above R. Mind that the rubber band always\r\nremains taut and so there is always a right turn at every vertex of R excepting its two endpoints. Print\r\nthe vertices of R on the terminal and mark their corresponding 1\u2019s in as \u20182\u2019. Print the array (with 0\u2019s\r\nas hyphens, for clarity).",
                    "Answer":"#include<stdio.h>\r\n#include<stdlib.h>\r\n\r\ntypedef struct node{\r\nint x;\r\nint y;\r\nstruct node *next;} point;\r\n\r\nvoid insert(point **list, point P)\r\n{\r\n  point *t=(point*)malloc(sizeof(point));\r\n  t->x=P.x;\r\n  t->y=P.y;\r\n  t->next=(*list);\r\n  (*list)=t;\r\n}\r\n\r\nvoid deletehead(point **list)      \/\/Assumes that the list is not empty\r\n{\r\n  point *T=(*list);\r\n  (*list)=(*list)->next;\r\n  free(T);\r\n}\r\n\r\nint isrightturn(point *P, point *Q, point *R)\r\n{\r\n  int a0, b0, a1, b1;\r\n  b0=(Q->x)-(P->x);\r\n  a0=(Q->y)-(P->y);\r\n  b1=(R->x)-(Q->x);\r\n  a1=(R->y)-(Q->y);\r\n  return (a1*b0-a0*b1 > 0);\r\n}\r\n\r\nvoid getnextpoint(point *T, int **A, int *a, int r)\r\n{\r\n  int i;\r\n  (*a)++;\r\n  for(;;(*a)++)\r\n  {\r\n    for(i=0; i<r; i++)\r\n    {\r\n      if(A[i][*a]==2)\r\n      {\r\n        T->x=i;\r\n        T->y=(*a);\r\n        return;\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nvoid printlist(point *list)\r\n{\r\n  while(list!=NULL)\r\n  {\r\n    printf(\"(%d, %d) \", list->y, list->x);\r\n    list=list->next;\r\n  }\r\n}\r\n\r\n\r\nint main()\r\n{\r\n  int r, c, t, i, j, k, **A;  \r\n  unsigned int s;\r\n  point T1, T2, *list=NULL;  \r\n\r\n  \/\/ PART a\r\n\r\n  printf(\"Enter no. of rows, no. of columns and expected percentage of 1's: \");\r\n  scanf(\"%d%d%d\", &r, &c, &t);\r\n  A=(int **)malloc(r*sizeof(int *));\r\n  for(i=0; i<r; i++)\r\n    A[i]=(int *) malloc(c*sizeof(int));\r\n  A[0][0]=A[0][c-1]=1;\r\n  printf(\"Enter seed: \");\r\n  scanf(\"%u\", &s);\r\n  srand(s);\r\n  printf(\"\\nInput array: \\n\");\r\n  for(i=0; i<r; i++)\r\n    for(j=0; j<c; j++)\r\n      if(!((i==0 && j==0) || (i==0 && j==c-1)))\r\n        (rand()%100 + 1 <= t)? (A[i][j]=1): (A[i][j]=0);\r\n  for(i=r-1; i>=0; printf(\"\\n\"),i--)\r\n    for(j=0; j<c; j++)\r\n      (A[i][j]==0)? (printf(\"- \")): printf(\"1 \");\r\n  \r\n  \/\/ PART b\r\n\r\n  printf(\"\\nList of points: \\n\");\r\n  printf(\"(0, 0) \");\r\n  for(j=0; j<c; j++)\r\n  {\r\n    k=-1;\r\n    for(i=0; i<r; i++)\r\n    {\r\n      if(A[i][j]==1)\r\n        k=i;\r\n    }\r\n    if(k!=-1 && !(k==0 && j==0))\r\n    {\r\n      A[k][j]=2;\r\n      printf(\"(%d, %d) \", j, k);\r\n    }\r\n  }\r\n  if(A[0][c-1]!=2)\r\n    printf(\"(0, %d)\", c-1);\r\n  printf(\"\\n\");\r\n\r\n  \/\/A[0][0] will be set to 2 later. \/\/\r\n  \r\n  \/\/PART c\r\n\r\n  T1.x=0;\r\n  T1.y=0;\r\n  insert(&list, T1);\r\n  j=-1;  \r\n  getnextpoint(&T1, A, &j, r); \/\/Gets the next point from P\r\n  insert(&list, T1);\r\n  A[0][0]=2;\r\n  while(j!=c-1)\r\n  {\r\n    getnextpoint(&T1, A, &j, r);\r\n    while(list->next!=NULL)\r\n    {\r\n      if(isrightturn(list->next, list, &T1))\r\n        break;\r\n      A[list->x][list->y]=1; \/\/Handling a non-vertex in P\r\n      deletehead(&list);\r\n    }\r\n    insert(&list, T1);\r\n  }\r\n  if(!(list->x==0 && list->y==c-1))\r\n  {\r\n    T1.x=0;\r\n    T1.y=c-1;\r\n    insert(&list, T1);\r\n    A[0][c-1]=2;\r\n  }\r\n  printf(\"\\nVertices: \\n\");\r\n  printlist(list);\r\n  printf(\"\\n\\nOutput array: \\n\");\r\n  for(i=r-1; i>=0; printf(\"\\n\"),i--)\r\n    for(j=0; j<c; j++)\r\n      (A[i][j]==0)? (printf(\"- \")): printf(\"%d \", A[i][j]);\r\n  return 0;\r\n}"
                },
                {
                    "Question":"Write a C program to build the following software:\r\nStudent Academic Record Management Software: Write the following functions to implement a student\r\nacademic record management software.\r\nDefine the following variables with global scope:\r\nA structure named student consisting of: Roll (unsigned int), first name of student (20\r\ncharacters), last name of student (20 characters) and cgpa (float).\r\nslist: A pointer to a linked list of student structures.\r\na) main: In an infinite loop, display the following menu, and then prompt the user to enter a number\r\nbetween 1 to 7.\r\nMenu Choice:\r\n1. Enter student details\r\n2. Delete student details\r\n3. Display student details\r\n4. Edit student grade\r\n5. Sort student list\r\n6. Show statistics\r\n7. Exit\r\nDepending on the user input, carry out the following:\r\n1. Call the function enrolStud\r\n2. Call the function deleteStud\r\n2. Call the function displayStuds\r\n3. Call the function editStudGrade\r\n4. Call the function sortStuds\r\n5. Call the function showStats\r\n6. Exit\r\nb) enrolstud: The user would enter the details of one student. An appropriate structure should be created\r\nand inserted into the linked list slist, taking care to keep the linked list in a sorted order based on roll\r\nnumber. The roll numbers are assumed to be unique. [5 Marks]\r\nc)deleteStud: Prompt the user to enter a student roll number and check if the corresponding student is\r\npresent in the linked list. If it is present, then delete the node corresponding to the student. After that\r\ndisplay the details of all the students in proper format.[5 Marks]\r\nd) displayStuds: Display the details of all student present in the list in proper format. [5 Marks]\r\ne) editStudGrade: Prompt the user to enter a student roll number and check if the corresponding student\r\nis present in the linked list. If it is present, then display the details of the student. Otherwise, display\r\n\"Student not present in the list.\" If the student is present, ask for the revised grade. Display the\r\nupdated grade of the student. After that display the details of all the students in proper format.[5 Marks]\r\nf)sortStuds: This procedure should sort the linked list based on the CGPA of the students. If two students\r\nare having same CGPA, it should sort them based on their roll number. Finally, it should display the\r\nstudents in the list nicely formatted. [Hint: You may create a linked list, tlist create and insert nodes\r\ncorresponding to slist. Finally, deallocate the nodes of the list slist, and copy the link tlist into slist.] [5 Marks]\r\ng) showStats: Display the minimum CGPA, maximum CGPA, and the details the corresponding students.\r\nAlso display the average CGPA. [5 Marks]",
                    "Answer":"#include <stdio.h>\r\n#include <math.h>\r\n#include <string.h>\r\n\r\nstruct student\r\n{\r\n    int roll;\r\n    char firstname[20];\r\n    char lastname[20];\r\n    float cgpa;\r\n    struct student *next;\r\n}*slist, *tlist;\r\n\r\nstruct student * insert_asc(struct student *r, int t1, char t2[], char t3[], float t4)          \/\/defining function to add student data in acending order\r\n{\r\n    struct student *p, *q, *nw;                                                                 \/\/Defining temporary variables.\r\n    nw = (struct student *)malloc(sizeof(struct student));                                      \/\/Allocating space to temporary variable.\r\n\r\n    nw->roll = t1;                                                                              \/\/Copying the new data to a temporary structure of student.\r\n    strcpy(nw->firstname, t2);\r\n    strcpy(nw->lastname, t3);\r\n    nw->cgpa = t4;\r\n    nw->next = NULL;\r\n\r\n    p = r;\r\n    q = p;\r\n\r\n    while(p!=NULL)                                                                          \/\/Applying while loop to go through the list.\r\n    {\r\n        if(p->roll >= t1)                                                                       \/\/If loop for ascending condition of rule number.\r\n        {\r\n            if(p == r)                                                                          \/\/Condition. If only one element is present.\r\n            {\r\n                nw->next = r;\r\n                return nw;\r\n            }\r\n            nw->next = p;                                                                   \/\/Condition two add element at the middle of the linked list.\r\n            q->next = nw;\r\n            return r;\r\n        }\r\n        q = p;                                                                              \/\/Condition to add element at last of the linked list.\r\n        p = p->next;\r\n    }\r\n    if(r == NULL)return nw;\r\n    else q->next = nw;\r\n    return r;                                                                           \/\/Returning the linked list after adding the element.\r\n}\r\n\r\nstruct student * insert_asce(struct student *r, int t1, char t2[], char t3[], float t4)                 \/\/Function to add data in order of Cgpa.\r\n{\r\n    struct student *p, *q, *nw;                                                                         \/\/Defining temporary variables.\r\n\r\n    nw = (struct student *)malloc(sizeof(struct student));                                          \/\/Allocating space to temporary variables.\r\n\r\n    nw->roll = t1;                                                                                  \/\/Copying the new data to the temporary variable.\r\n    strcpy(nw->firstname, t2);\r\n    strcpy(nw->lastname, t3);\r\n    nw->cgpa = t4;\r\n    nw->next = NULL;\r\n\r\n    p = r;\r\n    q = p;\r\n\r\n    while(p!=NULL)                                                                              \/\/Applying while loop to go through the list.\r\n    {\r\n        if(p->cgpa > t4)                                                                        \/\/Applying ascending condition to the SGP.\r\n        {\r\n            if(p == r)                                                                          \/\/Condition. If only one element is already present.\r\n            {\r\n                nw->next = r;\r\n                return nw;                                                                      \/\/Returning the linked list.\r\n            }\r\n            nw->next = p;                                                                       \/\/Condition to add a element between the linked list.\r\n            q->next = nw;\r\n            return r;                                                                            \/\/Returning the linked list.\r\n        }\r\n\r\n        q = p;                                                                                  \/\/Switching to the next element.\r\n        p = p->next;\r\n    }\r\n    if(r == NULL)return nw;                                                                 \/\/Adding element at the last.\r\n    else q->next = nw;\r\n    return r;                                                                                   \/\/Returning the linked list.\r\n}\r\n\r\nstruct student *deletroll(struct student *r, int t1)                                                  \/\/Function to delete a element in the linked list.\r\n{\r\n\r\n    struct student *p, *q;                                                                          \/\/Defining temporary variables.\r\n    p = r;\r\n    q = p;\r\n\r\n    while(p!=NULL)                                                                                      \/\/Applying while loop to go through the list.\r\n    {\r\n        if(p->roll == t1)                                                                               \/\/Condition to check the roll number.\r\n        {\r\n            if(p == r)r = p->next;                                                                      \/\/Condition. If only one element is present.\r\n            else q->next = p->next;                                                                     \/\/Condition. If more than one elements are present.\r\n            p->next = NULL;\r\n            free(p);                                                                                    \/\/Freeing up space if element is found.\r\n            return r;                                                                                   \/\/Returning the updated linked list.\r\n        }\r\n        else\r\n        {\r\n            q = p;                                                                                      \/\/Moving to the next element, if Rule number is not present.\r\n            p = p->next;\r\n        }\r\n    }\r\n\r\n    return r;                                                                                       \/\/Returning the linked list.\r\n}\r\n\r\nvoid enrolstud()                                                                            \/\/Function to take new students data.\r\n{\r\n\r\n    int t1;                                                                         \/\/Defining temporary variables.\r\n    char t2[20], t3[20];\r\n    float t4;\r\n    printf(\"\\nEnter the Roll No: \");                                                                \/\/Asking user for rule number.\r\n    scanf(\"\\n%d\", &t1);\r\n    printf(\"\\nEnter the first name: \");                                                                 \/\/asking user for first name.\r\n    scanf(\"%s\", t2);\r\n    printf(\"\\nEnter the last name: \");                                                                  \/\/Asking user for last name.\r\n    scanf(\"%s\", t3);\r\n    printf(\"\\nEnter the cgpa: \");                                                                   \/\/Asking user for CGPa.\r\n    scanf(\"%f\", &t4);\r\n\r\n    slist = insert_asc(slist, t1, t2, t3, t4);                                                          \/\/Adding data of new student in order of rule number.\r\n    tlist = insert_asce(tlist, t1, t2, t3, t4);                                                 \/\/Adding data of new student in order of cGPa.\r\n\r\n}\r\n\r\nvoid deletestud()                                                                               \/\/Defining function to delete a student data.\r\n{\r\n    int t1;\r\n    printf(\"\\nPlease enter the roll no you want to delete: \");                                  \/\/Asking user for the rule number to delete.\r\n    scanf(\"%d\", &t1);\r\n\r\n    slist = deletroll(slist, t1);                                                           \/\/Calling the function to delete the rule number data.\r\n\r\n\r\n    struct student *p;                                                                          \/\/Defining temporary variable.\r\n\r\n    p = slist;\r\n\r\n    while(p != NULL)                                                                    \/\/Applying whiloe loop to print the data.\r\n    {\r\n\r\n        printf(\"\\nRoll no: %d\", p->roll);                                               \/\/Printing The data present in linked list.\r\n        printf(\"\\nFirst name %s\", p->firstname);\r\n        printf(\"\\nLast name %s\", p->lastname);\r\n        printf(\"\\ncgpa: %f\\n\\n\", p->cgpa);\r\n\r\n\r\n        p = p->next;                                                                \/\/Moving to the next element in the linked list.\r\n    }\r\n\r\n}\r\n\r\nvoid displaystuds()                                                                 \/\/Defining function to display this brand data.\r\n{\r\n    struct student *p;                                                              \/\/Defining temporary variable.\r\n\r\n    p = slist;\r\n\r\n    while(p != NULL)                                                        \/\/Applying while loop to print the data.\r\n    {\r\n\r\n        printf(\"\\nRoll no: %d\", p->roll);\r\n        printf(\"\\nFirst name %s\", p->firstname);\r\n        printf(\"\\nLast name %s\", p->lastname);\r\n        printf(\"\\ncgpa: %f\\n\\n\", p->cgpa);\r\n\r\n\r\n        p = p->next;                                                \/\/Moving to the next element in the linked list.\r\n    }\r\n\r\n}\r\n\r\nvoid showstats()                                            \/\/Calling a function for showing statistics.\r\n{\r\n\r\n\r\n    struct student *p;                                                  \/\/Defining temporary variables.\r\n    float min, max, avg = 0;\r\n\r\n    int tx1, tn1, count = 0;                            \/\/Defining variables to store the data.\r\n    char tx2[20], tx3[20];\r\n    char tn2[20], tn3[20];\r\n\r\n    p = slist;\r\n\r\n    min = p->cgpa;                                          \/\/Initializing minimum and maximum values.\r\n    max = p->cgpa;\r\n\r\n    while(p != NULL)                                                \/\/Applying while loop to go through the list.\r\n    {\r\n\r\n\r\n        if(p->cgpa >= max)                                                  \/\/Applying the if condition for checking the maximum CGPa.\r\n        {\r\n            tx1 = p->roll;                                                          \/\/Copying the data if maximum CgPa is found.\r\n            strcpy(tx2, p->firstname);\r\n            strcpy(tx3, p->lastname);\r\n            max = p->cgpa;\r\n        }\r\n\r\n        if(p->cgpa <= min)                                                              \/\/Applying the condition to check the minimum CGPA.\r\n        {\r\n            tn1 = p->roll;                                                                      \/\/Copying the data if minimum CGPA is found.\r\n            strcpy(tn2, p->firstname);\r\n            strcpy(tn3, p->lastname);\r\n            min = p->cgpa;\r\n        }\r\n        avg = avg + p->cgpa;                                                            \/\/Adding the C GPA to calculate the average.\r\n        p = p->next;                                                    \/\/Moving to the next element.\r\n        ++count;                                                                \/\/Counting the number of elements.\r\n    }\r\n\r\n\r\n    avg = avg\/count;                                                                        \/\/Calculating CPM.\r\n\r\n    printf(\"\\nStudent having minimum cgpa: \");                                              \/\/Displaying the data of student having minimum CGPA.\r\n\r\n    printf(\"\\nRoll no: %d\", tn1);\r\n    printf(\"\\nFirst name %s\", tn2);\r\n    printf(\"\\nLast name %s\", tn3);\r\n    printf(\"\\ncgpa: %f\\n\\n\", min);\r\n\r\n\r\n    printf(\"\\nStudent having maximum cgpa: \");                                      \/\/Displaying the data of student having maximum C GPA.\r\n\r\n    printf(\"\\nRoll no: %d\", tx1);\r\n    printf(\"\\nFirst name %s\", tx2);\r\n    printf(\"\\nLast name %s\", tx3);\r\n    printf(\"\\ncgpa: %f\\n\\n\", max);\r\n    printf(\"\\n\\nAvrage cgpa: %f\\n\\n\", avg);                                                 \/\/Displaying the average CGPA.\r\n\r\n}\r\n\r\nvoid editstudgrade()                                                    \/\/Calling the function to edits the grade.\r\n\r\n{\r\n\r\n\r\n    int t1, count = 0;                                                          \/\/Defining temporary variables.\r\n\r\n    printf(\"Enter the roll no you want to search: \");                               \/\/Asking user 0 number to search.\r\n    scanf(\"%d\", &t1);\r\n    struct student *p;\r\n\r\n    p = slist;\r\n\r\n    while(p != NULL)                                                \/\/Applying while loop to go through the list.\r\n    {\r\n\r\n        if(p->roll == t1)                                           \/\/Applying if loop to check if the roll number is present.\r\n        {\r\n\r\n            printf(\"\\nRoll no: %d\", p->roll);                                   \/\/Printing the data of the Sprint if rule number is present.\r\n            printf(\"\\nFirst name %s\", p->firstname);\r\n            printf(\"\\nLast name %s\", p->lastname);\r\n            printf(\"\\ncgpa: %f\\n\\n\", p->cgpa);\r\n\r\n            printf(\"Enter the reviced grade: \");                                            \/\/Asking for new CGPa.\r\n            scanf(\"%f\", &p->cgpa);\r\n\r\n            printf(\"\\nUpdated grade of the student are:\\n\\n\");                                  \/\/displaying the updated data with new CGPa.\r\n            printf(\"\\nRoll no: %d\", p->roll);\r\n            printf(\"\\nFirst name %s\", p->firstname);\r\n            printf(\"\\nLast name %s\", p->lastname);\r\n            printf(\"\\ncgpa: %f\\n\\n\", p->cgpa);\r\n\r\n            ++count;\r\n        }\r\n\r\n        p = p->next;                                                                        \/\/Moving to the next element.\r\n    }\r\n\r\n\r\n    if(count == 0)printf(\"\\nStudent not present in the list\\n\");                                    \/\/Displaying student not present if rule number not found.\r\n\r\n    printf(\"\\nDetails of all the students: \\n\");\r\n\r\n    displaystuds();                                                                                 \/\/Calling function to display the data of all these students.\r\n\r\n}\r\n\r\nvoid shortstuds()               \/\/Defining the function to sort the array according to the cgpa.\r\n{\r\n\r\n    slist = tlist;                  \/\/cpoying link list according to cgpa\r\n    displaystuds();                 \/\/displaying the new link list\r\n\r\n}\r\n\r\nint main()\r\n{\r\n\r\n    slist = NULL;\r\n\r\n\r\n    int inp = 1;            \/\/defining variables\r\n\r\n    while( inp != 7)                    \/\/while loop for infinite display till 7 is enterd\r\n    {\r\n        printf(\"Menu Choices:\");\r\n\r\n        printf(\"\\n1: Enter student details\");                      \/\/displaying menu\r\n        printf(\"\\n2: Delete student details \");\r\n        printf(\"\\n3: Display student details\");\r\n        printf(\"\\n4: Edit student grade\");\r\n        printf(\"\\n5: Short student list\");\r\n        printf(\"\\n6: Show statistics\");\r\n        printf(\"\\n7: Exit\\n\");\r\n        printf(\"\\nEnter your choice: \");\r\n\r\n        scanf(\"%d\", &inp);          \/\/taking input\r\n\r\n\r\n        if(inp == 1)enrolstud();             \/\/function call for enroling a student if user enter 1\r\n        if(inp == 2)deletestud();             \/\/function call for deleting a student if user enter 2\r\n        if(inp == 3)displaystuds();             \/\/function call for displaying students a student if user enter 3\r\n        if(inp == 4)editstudgrade();             \/\/function call for editing grade a student if user enter 4\r\n        if(inp == 5)shortstuds();             \/\/function call for shorting student according to cgpa a student if user enter 5\r\n        if(inp == 6)showstats();             \/\/function call shoe stats if user enter 6\r\n    }\r\n\r\n    return 0;\r\n}\r\n"
                },
                {
                    "Question": "In this program, we will implement some elementary functions of linked list. Define your linked list\r\nas follows.\r\n\r\ntypedef struct node{\r\nint data;\r\nstruct node* next;\r\n} node;\r\ntypedef node *linkedlist;\r\n\r\nPart I: Write a function to initialize a linked list\r\n\r\nWrite a function to initialize a linked list. The prototype should be as follows which initializes the linked\r\nlist pointed by l.\r\n\r\nvoid init(linkedlist* l);\r\n\r\n\r\nPart II: Write a function to display a linked list\r\n\r\nWrite a function to display a linked list. The prototype should be as follows which displays the linked list\r\nl.\r\n\r\nvoid display(linkedlist l);\r\n\r\n\r\nPart III: Write a function to insert at the front of a linked list\r\n\r\nWrite a function to insert an elements at the front of a linked list. The prototype should be as follows\r\nwhich inserts an integer x at the front of the linked list pointed by l.\r\n\r\nvoid insert_front(linkedlist* l, int x);\r\n\r\n\r\nPart IV: Write a function to delete an element from the front of a linked list\r\n\r\nWrite a function to delete an element from the front of a linked list. The prototype should be as follows\r\nwhich deletes an element from the linked list pointed by l. The function should not do anything if the\r\nlinked list pointed by l is empty.\r\n\r\nvoid delete_front(linkedlist* l);\r\n\r\n\r\nPart V: Write a function to reverse a linked list\r\n\r\nWrite a function to a linked list. The prototype should be as follows which reverses the linked list pointed\r\nby l. The function should not do anything if the linked list pointed by l is empty.\r\n\r\nvoid reverse(linkedlist* l);\r\n\r\n\r\nAll the functions from parts III to V also displays the modified linked list. Make sure, you free any\r\nspace which you do not need anymore.\r\nSubmit one (single) C\/C++ program.\r\n\r\n\r\nSample Output\r\n\r\ninsert_front 10: (10)\r\ninsert_front 100: (100,10)\r\nreverse: (10,100)\r\ndelete_front: (100)\r\ndelete_front: ()",
                    "Answer": "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\ntypedef struct node {\r\n    int data;\r\n    struct node* next;\r\n} node;\r\n\r\ntypedef node *linkedlist;\r\n\r\n\/\/ initializing the linked list with head that stores NULL\r\nvoid init(linkedlist* l){\r\n    linkedlist head = (linkedlist) malloc(sizeof(linkedlist));\r\n    head = NULL;\r\n    (*l) = head;\r\n}\r\n\r\n\/\/ displays the linked list from head till the last element\r\nvoid display(linkedlist l){\r\n    linkedlist ptr;\r\n    ptr = l;\r\n    printf(\"( \");\r\n    \/\/ goes on printing the data till ptr becomes NULL\r\n    while(ptr != NULL){\r\n        printf(\"%d \", ptr->data);\r\n        ptr = ptr->next;\r\n    }\r\n    printf(\")\\n\");\r\n}\r\n\r\n\/\/ used to insert an element at the front of the linked list\r\nvoid insert_front(linkedlist* l, int x){\r\n    \/\/ newNode stores the new value entered by the user\r\n    linkedlist newNode = (linkedlist) malloc(sizeof(linkedlist));\r\n    \/\/ head stores the head of the linked list\r\n    linkedlist head = *l;\r\n    newNode->data = x;\r\n    \/\/ newNode is made to point to the head of the linked list\r\n    newNode->next = head;\r\n    \/\/ head of the linked list is now made the newNode\r\n    (*l) = newNode;\r\n    \/\/ modified linked list is displayed\r\n    display(*l);\r\n}\r\n\r\n\/\/ used to delete an element at the front of the linked list\r\nvoid delete_front(linkedlist* l){\r\n    \/\/ we can delete an element if the linked list is not empty and so we check that first\r\n    if((*l) != NULL){\r\n        \/\/ node to be deleted which is the head is made to store in deleteNode\r\n        linkedlist deleteNode = (*l);\r\n        \/\/ head is moved one element forward\r\n        (*l) = (*l)->next;\r\n        \/\/ node to be deleted is freed from memory\r\n        free(deleteNode);\r\n    }\r\n    display(*l);\r\n}\r\n\r\n\/\/ reverses the linked list\r\nvoid reverse(linkedlist* l){\r\n    \/\/ no work to be done is the linked list is empty\r\n    if(*l == NULL){\r\n        printf(\"( )\\n\");\r\n        return;\r\n    }\r\n    \/\/ prev stores the previous element in the current linked list and initially it is NULL as to the left of head there is nothing\r\n    \/\/ current traverses through the linked list\r\n    \/\/ nextNode stores the next element in the current linked list\r\n    \/\/ here we reverse the links between the elements of the linked list\r\n    linkedlist prev, current, nextNode;\r\n    prev = NULL;\r\n    current  = *l;\r\n    while(current != NULL){\r\n        nextNode = current->next;\r\n        current->next = prev;\r\n        prev = current;\r\n        current = nextNode;\r\n    }\r\n    \/\/ head is made to point to the end of the original linked list\r\n    *l = prev;\r\n    display(*l);\r\n}\r\n\r\nint main(){\r\n    \/\/ head is declared\r\n    linkedlist head;\r\n    \/\/head is initialized\r\n    init(&head);\r\n    \/\/ check helps to check if user will give input or not\r\n    int check = 1;\r\n    while(check){\r\n        printf(\"Enter: \\n\");\r\n        printf(\"1 For insert_front operation\\n\");\r\n        printf(\"2 For delete_front operation\\n\");\r\n        printf(\"3 To reverse the linked list\\n\");\r\n        printf(\"Any other number to exit the program\\n\");\r\n        printf(\"Enter your choice: \");\r\n        int n;\r\n        scanf(\"%d\",&n);\r\n        switch(n){\r\n            case 1: printf(\"Enter the number to be inserted in the linked list: \");\r\n            int num;\r\n            scanf(\"%d\",&num);\r\n            printf(\"The current status of the linked list is: \");\r\n            insert_front(&head,num);\r\n            break;\r\n            case 2: printf(\"The current status of the linked list is: \");\r\n            delete_front(&head);\r\n            break;\r\n            case 3: printf(\"The current status of the linked list is: \");\r\n            reverse(&head);\r\n            break;\r\n            default: check = 0;\r\n        }\r\n        printf(\"\\n\");\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question":"In a doubly linked list, each node is given two pointers, the first pointing to the next element\r\nin the list and the second to the previous element in the list. The next pointer of the last node\r\nand the previous pointer of the first node should be NULL. Describe a suitable C data type to\r\nstore a node in a doubly linked list. Suppose that each node in the list stores an integer key\r\nvalue. Now, consider a sorted doubly linked list of integers in ascending order.\r\n\u2022 Write a C function to insert an integer \u2018x\u2019 in \u2018L\u2019 in the sorted order. If x is already present\r\nin L, then the insertion produces no change. If x is absent from L, it is inserted in the\r\nappropriate position so that after the insertion, L continues to remain sorted.\r\n\u2022 Write a C function to return the minimum search distance for a particular element\r\nwithin L. The minimum search distance for an element \u2018x\u2019 within \u2018L\u2019, if \u2018x\u2019 is present in\r\n\u2018L\u2019, refers to the minimum of the distances from the front and rear end of the list to the\r\nparticular element \u2018x\u2019. For example, if the list contains (2,4,6,8,9,10), then the minimum\r\nsearch distance of element \u20189\u2019 is 2, as distance from front end to \u20189\u2019 = 5 and distance from\r\nrear end to \u20189\u2019 = 2, and min(2,5) = 2. If \u2018x\u2019 is not present in \u2018L\u2019, then search distance\r\nreturns -1. If there are duplicate elements \u2018x\u2019 within \u2018L\u2019, then the first occurrence of \u2018x\u2019 from\r\nboth the sides should be considered as the respective distance and the minimum of that is\r\nreturned. If the distance from both the left end and right end is the same (i.e the element is\r\nin the middle of an odd length list), then just that distance should be returned. Note that\r\nmin(a,a) = a only. The search element should be taken as input from the keyboard and\r\npassed to the function as one of its arguments. You HAVE to use the concept of doubly\r\nlinked in your logic for this function.\r\n\u2022 Write a function to print the sorted linked list starting from the head node. If the list is\r\nempty, then print \u2018List empty\u2019.\r\nFor each of the above mentioned functions, write the function name, function definitions\r\nand function arguments as per your choice, but make sure that the functions perform the\r\ntasks as specified.and one of the arguments must be the head pointer of the linked list.\r\nIn main(), write a menu-driven code that provides the user with four choices, insertion,\r\nfinding minimum search distance, printing the list and exiting the program. Based on the\r\nuser choice, the appropriate function is called. The menu is run continuously until the user\r\nwishes to exit. For insertion and search distance, the respective element is also taken as\r\ninput. The linked list initially starts empty, with 0 number of nodes.",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nstruct Node{\r\nint data;\r\nstruct Node *next;\r\nstruct Node *prev;\r\n};\r\n\r\n\/\/Function to insert into linked list\r\nvoid insert(struct Node **head, struct Node **rear, int dat)\r\n{\r\n    \/\/Check first if list is empty\r\n    if(*head == NULL && *rear == NULL)\r\n    {\r\n        struct Node *temp = (struct Node*)malloc(sizeof(struct Node));\r\n        temp->data=dat;\r\n        temp->next=NULL;\r\n        temp->prev=NULL;\r\n\r\n        *head=temp;\r\n        *rear=temp;\r\n    }\r\n    else\r\n    {\r\n        struct Node *traverse = *head;\r\n        \/\/Choose the appropriate location\r\n        while(traverse->data<dat)\r\n        {\r\n            if(traverse == *rear){\r\n            break;\r\n            }\r\n            traverse=traverse->next;\r\n        }\r\n\r\n        struct Node *temp = (struct Node*)malloc(sizeof(struct Node));\r\n        temp->data=dat;\r\n        temp->next=NULL;\r\n        temp->prev=NULL;\r\n\r\n        if(traverse == *head)\r\n        {\r\n            traverse->prev=temp;\r\n            temp->next=*head;\r\n            *head=temp;\r\n        }\r\n        else if(traverse == *rear && traverse->data<dat)\r\n        {\r\n            \/\/Add to rear\r\n            traverse->next=temp;\r\n            temp->prev=traverse;\r\n            *rear = temp;\r\n\r\n        }\r\n        else{\r\n\r\n            struct Node*t1 = traverse->prev;\r\n            t1->next=temp;\r\n            temp->prev=t1;\r\n            temp->next=traverse;\r\n            traverse->prev=temp;\r\n            \/\/No change in rear pointer\r\n        }\r\n    }\r\n\r\n}\r\n\r\nvoid printList(struct Node **head)\r\n{\r\n    struct Node *temp=*head;\r\n    while(temp!=NULL)\r\n    {\r\n        printf(\"%d  \",temp->data);\r\n        temp=temp->next;\r\n    }\r\n}\r\n\r\nint minDist(struct Node **head, struct Node **rear, int dat)\r\n{\r\n    \/\/First check from front\r\n    int fr = 0, rr = 0;\r\n    struct Node *temp = *head;\r\n    int flag = 0;\r\n\r\n    while(temp->data <= dat || temp!=NULL)\r\n    {\r\n        fr++;\r\n        if(temp->data == dat)\r\n        {\r\n            flag = 1;\r\n            break;\r\n        }\r\n        temp=temp->next;\r\n    }\r\n\r\n    \/\/Check if element not all present\r\n    if(flag == 0)\r\n    {\r\n        return -1;\r\n    }\r\n\r\n    temp = *rear;\r\n    flag = 0;\r\n    while(temp->data <= dat || temp!=NULL)\r\n    {\r\n        rr++;\r\n        if(temp->data == dat)\r\n        {\r\n            flag = 1;\r\n            break;\r\n        }\r\n        temp=temp->prev;\r\n    }\r\n\r\n    return (fr<=rr?fr:rr);\r\n\r\n}\r\n\r\nint main()\r\n{\r\n    \/\/Define the pointer that points to the head and rear of linked list\r\n    struct Node *head = NULL;\r\n    struct Node *rear = NULL;\r\n\r\n    printf(\"Welcome\\n\");\r\n    int choice,temp;\r\n    \/\/Infinite loop that continuously takes in user input\r\n    while(1)\r\n    {\r\n        printf(\"Enter choice\\n1.Insert\\n2.Find minimum distance\\n3.Display\\n4.Exit\");\r\n        scanf(\"%d\",&choice);\r\n\r\n        switch(choice)\r\n        {\r\n        case 1:\r\n            printf(\"Enter data\\n\");\r\n            scanf(\"%d\",&temp);\r\n            insert(&head,&rear,temp);\r\n            break;\r\n\r\n        case 2:\r\n            printf(\"Enter data to be searched\\n\");\r\n            scanf(\"%d\",&temp);\r\n            int res = minDist(&head,&rear,temp);\r\n            if(res == -1)\r\n            {\r\n                printf(\"Data not present\\n\");\r\n            }\r\n            else\r\n            {\r\n                printf(\"The minimum search distance is %d\\n\",res);\r\n            }\r\n            break;\r\n\r\n        case 3:\r\n            printList(&head);\r\n            break;\r\n\r\n        case 4:\r\n            printf(\"Thank you\\n\");\r\n            return 0; \/\/Exit from program\r\n\r\n        default:\r\n            printf(\"Wrong input. Please enter again\\n\");\r\n\r\n        }\r\n    }\r\n}"
                },
                {
                    "Question":"Define a linked list where the head node sits in the middle and you can go either to the left or\r\nright of the node depending on the user input. The head node contains two pointer variables\r\nleft and right to traverse either to the left or right of the node. All other nodes contain either\r\nthe left pointer or the right pointer. Write a program to create such a linked list by inserting\r\nnew nodes either to the left or to the right of the head node.\r\nWrite a C program to perform the following tasks.\r\n\u2022 Let the user choose continuously from the keyboard (until \u2018-1\u2019 is pressed) the new element\r\nto be added and which direction the new insertion should happen.\r\n\u2022 Depending on the choice, create a new node containing either the left or right pointer.\r\n\u2022 Start from the head and traverse in the appropriate direction till the end of the respective\r\nleft\/right sub chain to insert a new node there.\r\n\u2022 At the end display both the left sub-chain and the right sub-chain.\r\nYou should write two functions insertLeft(node* head, int data) and insertRight(node*\r\nhead, int data) that inserts a new node either to the left or right of the head respectively. You\r\ncan assume that the nodes contain only integer data. You can further assume that \u20191\u2019 represents\r\nleft and \u20190\u2019 represents right as choice during user input.\r\nExample:\r\nEnter data: 10\r\nEnter direction: 1\r\nEnter data: 20\r\nEnter direction: 0\r\nEnter data: 30\r\nEnter direction: 0\r\nEnter data: 40\r\nEnter direction: 1\r\nEnter data: 50\r\nEnter direction: 0\r\nEnter data: -1 [NOTE: \u2018-1\u2019 is the exiting condition for taking further inputs]\r\nOutput:\r\nLeft linked list: 10 \u2192 40 \u2192 NULL\r\nRight linked list: 20 \u2192 30 \u2192 50 \u2192 NULL\r\n[You have to print the arrow heads and the word \u2018NULL\u2019 to clearly represent the list]",
                    "Answer":"#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\nint main()\r\n{\r\n    \/\/Declare the various structure designs for the respective nodes\r\n    struct leftNode{\r\n    int val;\r\n    struct leftNode *left;\r\n    };\r\n\r\n    struct rightNode{\r\n    int val;\r\n    struct rightNode *right;\r\n    };\r\n\r\n    struct headNode{\r\n    struct leftNode *left;\r\n    struct rightNode *right;\r\n    };\r\n\r\n    \/\/Declare one node of type head\r\n    struct headNode *head=(struct headNode*)malloc(sizeof(struct headNode));\r\n    head->left=NULL;\r\n    head->right=NULL;\r\n\r\n    \/\/Start taking input. Take input till '-1' is pressed. Assume first input is always not '-1'\r\n    int n,dir;\r\n    printf(\"Take input numbers. Press -1 to terminate:\\n\");\r\n    do{\r\n        scanf(\"%d\",&n);\r\n        if(n!=-1){\r\n            printf(\"Enter direction:\\n\");\r\n            scanf(\"%d\",&dir);\r\n            \/\/Create new node as per direction\r\n            \/\/If left direction\r\n            if(dir==0){\r\n                    printf(\"On left\\n\");\r\n                struct leftNode *temp=(struct leftNode*)malloc(sizeof(struct leftNode));\r\n                temp->val=n;\r\n                temp->left=NULL;\r\n\r\n                \/\/Go to the end of left sub chain\r\n                if(head->left==NULL) \/\/first node\r\n                {\r\n                    head->left=temp;\r\n                }\r\n                else{\r\n\r\n                struct leftNode *temp1=(struct leftNode*)malloc(sizeof(struct leftNode));\r\n                temp1=head->left;\r\n\r\n                while(temp1->left!=NULL){\r\n                        temp1=temp1->left;\r\n\r\n                }\r\n                temp1->left=temp;\r\n                }\r\n\r\n\r\n            }\r\n            else{ \/\/right direction\r\n                    printf(\"On right\\n\");\r\n                struct rightNode *temp=(struct rightNode*)malloc(sizeof(struct rightNode));\r\n                temp->val=n;\r\n                temp->right=NULL;\r\n\r\n                \/\/Go to the end of left sub chain\r\n                if(head->right==NULL) \/\/first node\r\n                {\r\n                    head->right=temp;\r\n                }\r\n                else{\r\n\r\n                struct rightNode *temp1=(struct rightNode*)malloc(sizeof(struct rightNode));\r\n                temp1=head->right;\r\n\r\n                while(temp1->right!=NULL){\r\n                        temp1=temp1->right;\r\n\r\n                }\r\n                temp1->right=temp;\r\n                }\r\n            }\r\n\r\n            \/\/Take input again\r\n            printf(\"Take input numbers. Press -1 to terminate:\\n\");\r\n        }\r\n    }while(n!=-1);\r\n\r\n    \/\/Now print the left sub-chain\r\n    printf(\"Left sub-chain:\");\r\n    struct leftNode *l = (struct leftNode*)malloc(sizeof(struct leftNode));\r\n    l=head->left;\r\n    while(l!=NULL){\r\n    printf(\"%d->\",l->val);\r\n    l=l->left;\r\n    }\r\n    printf(\"NULL\\n\");\r\n\r\n    \/\/Now print the right sub-chain\r\n    printf(\"Right sub-chain:\");\r\n    struct rightNode *r = (struct rightNode*)malloc(sizeof(struct rightNode));\r\n    r=head->right;\r\n    while(r!=NULL){\r\n    printf(\"%d->\",r->val);\r\n    r=r->right;\r\n    }\r\n    printf(\"NULL\\n\");\r\n\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question":"You must have done online shopping where you can filter different items based on a number of\r\nparameters, one such being sorted as per the range of price of the item, i.e whether the price lies\r\nin the range, say, (0-500), then (501-1000), (1001-1500), (1501-2000) and so on. We can think of\r\neach range to be a bucket and within each bucket all the items whose price falls in the respective\r\nrange are kept. In order to build such a filtering system, we can take the help of nested linked\r\nlists.\r\nAs per the diagram shown, there is one outer linked list, and within each node of the outer\r\nlist there is an inner linked list. Each node of the outer linked list denotes a bucket as per\r\nthe price range in increasing order, starting from 0. It holds an integer variable \u2018Range\u2019 which\r\ndenotes the upper limit of the price range for that bucket, the lower limit starting from after\r\nthe previous bucket\u2019s range. Overall the price starts from 0 (lower limit for the first bucket)\r\nand each successive bucket has a range of 500 units of currency. That is, if the value of \u2018Range\u2019\r\nis 1000 for a bucket, this means that bucket holds all the items whose prices fall in the range\r\n501 to 1000. The inner linked list denotes the list of all the individual items whose price falls\r\nwithin the range for that particular bucket. Each node of the inner list consists of two integer\r\nvariables, \u2018ItemID\u2019 denoting the numerical ID of the item and \u2018Price\u2019, denoting the price of that\r\nparticular item. Within each bucket, the inner list of items is also sorted in increasing order of\r\ntheir prices.\r\nWrite a C program to build such a filtering system.\r\n\u2022 Define the suitable structure variable that can form such a nested linked list. In particular,\r\nthe structure variable itself should be a nested structure to incorporate the outer and inner\r\nlists.\r\n\r\n\u2022 Initially, the entire list is empty, i.e no elements are present. Write a function void in-\r\nsert(Bucket *head ,int itemID, int Price), to insert a new item into the linked list\r\n\r\nas per the filtering order, where \u2018Bucket *head\u2019 points to the head of the outer linked list,\r\n\u2018itemID\u2019 refers to the ID of the particular item and \u2018Price\u2019 refers to the individual price of\r\nthat item. You must first locate the appropriate bucket node of the outer list where the\r\nitem has to be kept, then within that bucket you have to insert that item in the correct\r\nposition of the inner list. If the appropriate bucket node is not present within the current\r\nlist, then add a new bucket node that can hold that item, along with any intermediate\r\nbucket nodes that may be required. This is required because the buckets have a range\r\nof 500 only. The intermediate bucket nodes can hold an empty inner list, if no items for\r\nthat bucket are present. Keep in mind that both the outer and inner lists are sorted in\r\nascending order, and must remain sorted after each insertion.\r\n\u2022 From main(), take input the itemID and price of \u2018n\u2019 such items and insert them one by one\r\nwithin the filtered list by calling insert(). You may assume that for all items, minimum\r\nprice is 0 and maximum price is 5000.\r\n\u2022 Finally after taking input is complete, print the entire list, as per the format below.\r\nExample sample output (refer to the diagram):\r\nBucket 1:\r\nLower limit: 0\r\nUpper limit: 500\r\nItems:\r\n(100,125) [NOTE: The item tuple is of the form (itemID,Price)]\r\n(110,450)\r\nBucket 2:\r\nLower limit: 501\r\nUpper limit: 1000\r\nItems:\r\n(150,670)\r\n(190,890)\r\nBucket 3:\r\nLower limit: 1001\r\nUpper limit: 1500\r\nItems:\r\n(200,1250)\r\n(130,1345)",
                    "Answer":"#include <stdio.h>\r\n#include <stdbool.h>\r\n\r\n#include <math.h>\r\n\r\n#define MAX_PRICE 5000\r\n\r\ntypedef struct NestedBucket NestedBucket;\r\ntypedef struct Bucket Bucket;\r\n\r\nstruct NestedBucket {\r\n    NestedBucket *next;\r\n    int item_id;\r\n    int price;\r\n\r\n\r\n};\r\n\r\nstruct Bucket {\r\n    Bucket *next;\r\n\r\n    NestedBucket *nested_list;\r\n\r\n    int range;\r\n};\r\n\r\n\r\nvoid print_list(Bucket *head) {\r\n    if(head == NULL) {\r\n        printf(\"Bucket is empty\");\r\n    } \r\n    Bucket *current = head;\r\n\r\n    \/\/ iterate through each bucket\r\n    while(current != NULL) {\r\n        printf(\"Bucket %d:\\n\", current->range\/500);\r\n        printf(\"Lower Limit: %d\", current->range-499);\r\n        printf(\"Upper Limit: %d\", current->range);\r\n\r\n        printf(\"Items:\");\r\n\r\n        NestedBucket *list = current->nested_list;\r\n        \/\/ iterate through each node in the nested Bucket\r\n        while(list!=NULL){\r\n            printf(\"(%d,%d)\", list->item_id, list->price);\r\n        }\r\n\r\n        current = current->next;\r\n        printf(\"\\n\");\t\r\n    }\r\n}\r\n\r\nvoid insert(Bucket *head, int itemID, int Price) {\r\n    int ceil_price = ceil(Price \/ 500); \/\/ ceil of the price divided by 500\r\n    \r\n\r\n    Bucket *current = head;\r\n    \/\/ find the bucket which has the following ceil value\r\n    while (ceil_price != current->range \/ 500);\r\n    {\r\n        current = current->next;\r\n    }\r\n    \r\n    NestedBucket *nested_head = current-> nested_list; \/\/ create a temp variable for the nested list head\r\n\r\n    NestedBucket *new_node = (struct NestedBucket*) malloc(sizeof(struct NestedBucket)); \/\/ create a new nested list node\r\n\r\n    new_node->item_id = itemID; \/\/ set its id \r\n    new_node->price = Price; \/\/ set its price\r\n    new_node->next = NULL; \/\/ set the next element\r\n    \r\n    \/\/ add the new node to the nested Bucket\r\n    if (nested_head == NULL) {\r\n        nested_head  = new_node;\r\n    }else {\r\n        while(nested_head->next != NULL) {\r\n            nested_head = nested_head->next;\r\n        }\r\n        nested_head->next = new_node;\r\n    }\r\n    \r\n\r\n}\r\n\r\n\r\nint main() {\r\n    Bucket *head = NULL;\r\n    Bucket *current = head;\r\n\r\n    \/\/ add bucket nodes to the head for all ranges till MAX_PRICE\r\n    for(int i=0;i<MAX_PRICE\/500;i++){\r\n        \/\/ create a new bucket \r\n        Bucket *new_node = (struct Bucket*) malloc(sizeof(Bucket));\r\n        \r\n        \/\/ initialise nested list as NULL and range for the bucket\r\n        new_node->nested_list = NULL;\r\n        new_node-> range = (i+1) * 500; \r\n        new_node->next = NULL;\r\n        \r\n        \/\/ form a linked list of bucket nodes\r\n        if(current == NULL){\r\n            head = new_node;\r\n            current = new_node;\r\n        }else {\r\n            current->next = new_node;\r\n            current = new_node;\r\n        }\r\n    }\r\n\r\n    printf(\"Please enter the information requested:\");\r\n\r\n    bool t = true;\r\n    int id, price;\r\n\r\n    int c;\r\n    while(t) {\r\n        \/\/ take user input of item id and price\r\n        printf(\"Please enter item id and price: \\n\");\r\n        scanf(\"%d %d\", &id, &price);\r\n        \r\n        \/\/ add it to the bucket using insert function \r\n        insert(head, id, price);\r\n        \r\n        \/\/ ask user if they want to enter more numbers\r\n        printf(\"Please enter 0 to exit or 1 to continue: \\n\");\r\n        scanf(\"%d\", &c);\r\n\r\n        if (c){\r\n            t = false; \/\/ breal the while look if 0 is entered\r\n        } \r\n    }\r\n\r\n    print_list(head); \/\/ print the list with head\r\n\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Define a structure \u201Cnode\u201D to store a link list of integers. \r\nWrite a function void make_list(node *l, int n) to read n integers and store them \r\nin a link list. \r\nWrite a main program to read an integer n. Then uses make_list function to read \r\nn integers and stores them in a list l. Print the list.",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\/\/structure for each node of linked list\r\nstruct node\r\n{\r\n    int data;               \/\/data stores value of each element of linked list\r\n    struct node *next;      \/\/pointer to store address of next element of linked list\r\n};\r\n\r\nvoid make_list(struct node *,int );   \/\/function is make a linked list\r\nvoid display (struct node *);          \/\/function to display the elements of the linked list\r\n\r\nint main()\r\n{\r\n    \/\/reading the number of elements in the linked list\r\n    int n;\r\n    printf(\"Enter the number of elements: \");\r\n    scanf(\"%d\",&n);\r\n\r\n    \/\/declaring the header pointer of the linked list\r\n    struct node *head=(struct node*)malloc(sizeof(struct node));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if(head==NULL)\r\n    {\r\n        printf(\"\\nMemory cannot be allocated\");\r\n        exit(0);\r\n    }\r\n\r\n    \/\/calling make_list function\r\n    make_list(head,n);\r\n\r\n    \/\/displaying the elements of the list\r\n    if(n<1) printf(\"Empty List\\n\");\r\n    else display(head);\r\n\r\n    \/\/freeing the memory allocated to the nodes of linked list\r\n    struct node* temp;      \/\/making temporary pointer to store memory address to be freed.\r\n    while (head!=NULL)\r\n    {\r\n       temp=head;\r\n       head=head->next;\r\n       free(temp);\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: make_list\r\n*reads n integers and stores them in a linked list\r\n*\r\n* *l: stores header pointer\r\n* n: the number of elements to be stored in linked list\r\n*\r\n*returns type: void\r\n*\/\r\nvoid make_list(struct node *l,int n)\r\n{\r\n    if(n<1) return;\r\n    struct node *p,*previous,*q;\r\n\r\n    \/\/reading first integer to be stored in linked list\r\n    printf(\"Enter data: \\n\");\r\n    scanf(\"%d\",&(l->data));\r\n    l->next=NULL;\r\n    for(int i=1;i<n;i++)\r\n    {\r\n        q=(struct node *)malloc(sizeof(struct node));\r\n        \/\/if system is unable to allocate memory, then exit\r\n        if(q==NULL)\r\n        {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n        }\r\n\r\n        \/\/reading values for linked list\r\n        scanf(\"%d\",&(q->data));\r\n        q->next=NULL;\r\n        l->next=q;\r\n        l=q;\r\n    }\r\n    return;\r\n}\r\n\r\n\/*\r\n*Function: display\r\n*prints the elements of the linked list\r\n*\r\n* *r: stores header pointer\r\n*\r\n*returns type: void\r\n*\/\r\nvoid display (struct node *r)\r\n{\r\n     struct node *p = r;\r\n\r\n     \/\/printing the values of each element of linked list\r\n     printf(\"\\nList = {\");\r\n     while(p->next != NULL)\r\n     {\r\n         printf(\"%d, \", p->data);\r\n         p = p->next;\r\n     }\r\n      printf(\"%d}\\n\",p->data);\r\n}"
                },
                {
                    "Question": "Define a structure \u201Cnode\u201D to store a link list of integers. \r\nWrite a function void make_list(node *l, int n) to read n integers and store them \r\nin a link list. \r\nWrite a function int min_list(node *l) which takes as input a link list and returns \r\nthe value of the smallest element of the link list.\r\nWrite a main program to \u2013\r\nRead an integer n. Then uses make_list function to read n integers and stores \r\nthem in a list l. \r\nCall min_list function compute and then print the smallest element of list l.\r\nExample: Input: 1, 2, 3, 4, 5 Output: 1",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\/\/structure for each node of linked list\r\nstruct node\r\n{\r\n    int data;               \/\/data stores value of each element of linked list\r\n    struct node *next;      \/\/pointer to store address of next element of linked list\r\n};\r\n\r\nvoid make_list(struct node *,int );   \/\/function is make a linked list\r\nvoid display (struct node *);          \/\/function to display the elements of the linked list\r\nint min_list(struct node *);            \/\/function to find the minimum element of linked list\r\n\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the number of elements: \");\r\n    scanf(\"%d\",&n);\r\n    struct node *head=(struct node*)malloc(sizeof(struct node));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if(head==NULL)\r\n    {\r\n        printf (\"\\nMemory cannot be allocated\");\r\n        exit(0);\r\n    }\r\n\r\n    \/\/calling the make_list function\r\n    make_list(head,n);\r\n\r\n    \/\/displaying the elements of the list\r\n    if(n<1) printf(\"Empty List\\n\");\r\n    else display(head);\r\n\r\n    \/\/printing the result\r\n    if(n<1) printf(\"Empty List\\n\");\r\n    else printf(\"\\nMinimum integer from the linked list: %d\\n\",min_list(head));\r\n\r\n    \/\/freeing the memory allocated to the nodes of linked list\r\n    struct node* temp;      \/\/making temporary pointer to store memory address to be freed.\r\n    while (head!=NULL)\r\n    {\r\n       temp=head;\r\n       head=head->next;\r\n       free(temp);\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: make_list\r\n*reads n integers and stores them in a linked list\r\n*\r\n* *l: stores header pointer\r\n* n: the number of elements to be stored in linked list\r\n*\r\n*returns type: void\r\n*\/\r\nvoid make_list(struct node *l,int n)\r\n{\r\n    if(n<1) return;\r\n    struct node *p,*previous,*q;\r\n\r\n    \/\/reading first integer to be stored in linked list\r\n    printf(\"Enter data: \\n\");\r\n    scanf(\"%d\",&(l->data));\r\n    l->next=NULL;\r\n    for(int i=1;i<n;i++)\r\n    {\r\n        q=(struct node *)malloc(sizeof(struct node));\r\n\r\n        \/\/if system is unable to allocate memory, then exit\r\n        if  (q==NULL)\r\n        {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n        }\r\n\r\n        \/\/reading values for linked list\r\n        scanf(\"%d\",&(q->data));\r\n        q->next=NULL;\r\n        l->next=q;\r\n        l=q;\r\n    }\r\n    return;\r\n}\r\n\r\n\/*\r\n*Function: display\r\n*prints the elements of the linked list\r\n*\r\n* *r: stores header pointer\r\n*\r\n*returns type: void\r\n*\/\r\nvoid display (struct node *r)\r\n{\r\n     struct node *p = r;\r\n\r\n     \/\/printing the values of each element of linked list\r\n     printf(\"\\nList = {\");\r\n     while(p->next != NULL)\r\n     {\r\n         printf(\"%d, \", p->data);\r\n         p = p->next;\r\n     }\r\n      printf(\"%d}\\n\",p->data);\r\n}\r\n\r\n\/*\r\n*Function: min_list\r\n*returns the minimum value in the linked list\r\n*\r\n* *h: stores header pointer\r\n*\r\n*returns: the value of the minimum element from the linked list\r\n*\/\r\nint min_list(struct node *h)\r\n{\r\n     struct node *p=h;\r\n     int min=h->data;\r\n\r\n     \/\/iterating through the linked list\r\n     while(p!=NULL)\r\n     {\r\n         \/\/if found element is less than minimum, then update minimum\r\n        if(p->data<min)\r\n        {\r\n            min=p->data;\r\n        }\r\n        p=p->next;\r\n     }\r\n     return min;    \/\/returning the result\r\n}"
                },
                {
                    "Question": "Define a structure \u201Cnode\u201D to store a link list of integers. \r\nWrite a function void make_list(node *l, int n) to read n integers and store them \r\nin a link list. \r\nWrite a function node *reverse_list(node *l) which takes as input a link list and \r\nreturns another list that stores the elements in opposite order of the original list.\r\nWrite a main program to \u2013\r\nRead an integer n. Then uses make_list to read n integers and stores them in a list \r\nl. \r\nCall reverse_list to reverse the list l.\r\nPrint elements of the new list.\r\nExample: Input: 1, 2, 3, 4, 5 Output: 5, 4, 3, 2, 1\r\n",
                    "Answer": "#include <stdio.h>\r\n#include <stdlib.h>\r\n\r\n\/\/structure for each node of linked list\r\nstruct node\r\n{\r\n    int data;               \/\/data stores value of each element of linked list\r\n    struct node *next;      \/\/pointer to store address of next element of linked list\r\n};\r\n\r\nvoid make_list(struct node *,int );         \/\/function is make a linked list\r\nvoid display (struct node *);               \/\/function to display the elements of the linked list\r\nstruct node *reverse_list(struct node *);    \/\/function to reverse the linked_list\r\n\r\n\r\nint main()\r\n{\r\n    int n;\r\n    printf(\"Enter the number of elements: \");\r\n    scanf(\"%d\",&n);\r\n    struct node *head=(struct node*)malloc(sizeof(struct node));\r\n    if(head==NULL)\r\n    {\r\n        \/\/if system is unable to allocate memory, then exit\r\n        printf (\"\\nMemory cannot be allocated\");\r\n        exit(0);\r\n    }\r\n    make_list(head,n);\r\n\r\n    if(n<1) printf(\"Empty List\\n\");\r\n    else display(head);\r\n\r\n    struct node *head_reversed;\r\n    \/\/displaying the reversed linked list\r\n    printf(\"\\nReversed List:\\n\");\r\n    if(n<1) printf(\"Empty List\\n\");\r\n    else\r\n    {\r\n        head_reversed=reverse_list(head);\r\n        display(head_reversed);\r\n    }\r\n\r\n    \/\/freeing the memory allocated to the nodes of linked list\r\n    struct node* temp;      \/\/making temporary pointer to store memory address to be freed.\r\n    while(head!=NULL)\r\n    {\r\n       temp=head;\r\n       head=head->next;\r\n       free(temp);\r\n    }\r\n\r\n    while(head_reversed!=NULL)\r\n    {\r\n       temp=head_reversed;\r\n       head_reversed=head_reversed->next;\r\n       free(temp);\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n\/*\r\n*Function: make_list\r\n*reads n integers and stores them in a linked list\r\n*\r\n* *l: stores header pointer\r\n* n: the number of elements to be stored in linked list\r\n*\r\n*returns type: void\r\n*\/\r\nvoid make_list(struct node *l,int n)\r\n{\r\n    if(n<1) return;\r\n    struct node *p,*previous,*q;\r\n\r\n    \/\/reading first integer to be stored in linked list\r\n    printf(\"Enter data: \\n\");\r\n    scanf(\"%d\",&(l->data));\r\n    l->next=NULL;\r\n    for(int i=1;i<n;i++)\r\n    {\r\n        q=(struct node *)malloc(sizeof(struct node));\r\n\r\n        \/\/if system is unable to allocate memory, then exit\r\n        if  (q==NULL)\r\n        {\r\n\t\t  printf (\"\\nMemory cannot be allocated\");\r\n\t\t  exit(0);\r\n        }\r\n\r\n        \/\/reading values for linked list\r\n        scanf(\"%d\",&(q->data));\r\n        q->next=NULL;\r\n        l->next=q;\r\n        l=q;\r\n    }\r\n    return;\r\n}\r\n\r\n\/*\r\n*Function: display\r\n*prints the elements of the linked list\r\n*\r\n* *r: stores header pointer\r\n*\r\n*returns type: void\r\n*\/\r\nvoid display(struct node *r)\r\n{\r\n     struct node *p = r;\r\n\r\n     \/\/printing the values of each element of linked list\r\n     printf(\"\\nList = {\");\r\n     while(p->next != NULL)\r\n     {\r\n         printf(\"%d, \", p->data);\r\n         p = p->next;\r\n     }\r\n      printf(\"%d}\\n\",p->data);\r\n}\r\n\r\n\/*\r\n*Function: reverse_list\r\n*returns a new list with elements in reverse order\r\n*\r\n* *h: stores header pointer\r\n*\r\n*returns type: struct node\r\n*\/\r\nstruct node *reverse_list(struct node *h)\r\n{\r\n\r\n    struct node *reversed=(struct node*)malloc(sizeof(struct node));\r\n\r\n    \/\/if system is unable to allocate memory, then exit\r\n    if(reversed==NULL)\r\n    {\r\n        printf (\"\\nMemory cannot be allocated\");\r\n        exit(0);\r\n    }\r\n    struct node *prev=NULL;\r\n    while(h!=NULL)\r\n    {\r\n        struct node *p=(struct node*)malloc(sizeof(struct node));\r\n\r\n        \/\/if system is unable to allocate memory, then exit\r\n        if(p==NULL)\r\n        {\r\n            printf (\"\\nMemory cannot be allocated\");\r\n            exit(0);\r\n        }\r\n\r\n        \/\/reversing the linked list\r\n        if(prev==NULL) p=reversed;\r\n        p->data=h->data;\r\n        p->next=prev;\r\n        prev=p;\r\n        h=h->next;\r\n        if(h==NULL) reversed=p; \/\/if we reach end of original list, then pointer pointing to this value will be header for reversed list\r\n    }\r\n\r\n    return reversed;    \/\/returning the result\r\n}"
                }
            ]
        },
        {
            "type": "theory",
            "Elements": [
                {
                    "Question": "What is the output of the following C program when the input N is the number formed by the last \r\ntwo digits of your roll number? Explain the execution.\r\n\r\n#include <stdio.h> \r\nint main() {\r\n     int x, N;\r\n     scanf(\"%d\", &N);\r\n     printf(\"%d\\n\", N); \r\n     N \/= 2;\r\n     x = (N>15) ? (N=4): (N=12);\r\n     if (x < 10) \r\n            if (x < 15) printf(\"A\");\r\n     else printf(\"B\");\r\n     printf(\"C\");\r\n}",
                    "Answer": "Let input is 22. N\/=2 gives a value of N = 11\r\nNow for the statement x = (N>15)? (N=4):(N=12) as 11>15 is false N becomes 12 also x is 12\r\nNow x<10 is false. So the if (nested) and the linked else is not executed. So the output is:\r\n22\r\nc"
                }
            ]
        },
        {
            "type": "labTests",
            "Elements": [
                {
                    "Question": "Part-I\r\nSubmit one (single) C program.\r\nWrite a C program to perform the following tasks.\r\n1. Define a structure Player that will contain the following information of a cricket player (assume that\r\nthey are all currently playing): players name, country, date of birth, date of debut first class match,\r\nnumber of tests played, number of one day internationals (ODIs) played, number of centuries\r\nscored, number of half centuries scored, total runs scored in tests, total runs made in ODIs, number\r\nof wickets taken in test cricket, number of wickets taken in ODIs, etc. (you may add some more\r\nfields).\r\n2. Write a menu-based program to do the following to a list L of n elements of type Player. You may\r\ndecide how to store the list L, and you may store L in more than one data structures if required:\r\n    i) Given a list of Players, sort the structures according to the dictionary order of the player\r\n       names.\r\n       Take an input integer as the new number of elements for the list. If the new number is larger\r\n       than the old number by m, then the data of m new players have to be inserted and the final\r\n       list should be in dictionary order of the player names.\r\n       If the new size is less than the old size by m, then the last m player information have to be\r\n       deleted.\r\n       If the new size is equal to the old size, then no changes are needed.\r\n   ii) Write a recursive function to take as input a positive integer, and return the number of players\r\n       who have played at least those many one day internationals.\r\n   iii) Write a function to take as input a positive integer, and print the number of players who have\r\n       played at least those many one day internationals.\r\n  iv) Print (with proper indentation) the current list sorted in dictionary order of player names.\r\n       Depending on what is chosen by the user, the required operation is executed by the main function.\r\n\r\nYou can write your own functions wherever necessary, but proper commenting is required to explain\r\nthe purpose of the function.\r\nAlways minimize the time complexity of the program. Keep in mind that the list can be edited at any\r\ntime and may require recomputation unless stored smartly.\r\nFunctions from string.h can be used.",
                    "Answer": "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\n\/\/declaring the player structure with its members\r\nstruct Player {\r\n    char name[100];\r\n    char country[100];\r\n    char dob[9];\r\n    char date_debut[9];\r\n    int n_tests;\r\n    int n_odi;\r\n    int n_cent;\r\n    int n_half_cent;\r\n    int tot_test;\r\n    int tot_odi;\r\n    int wicket_test;\r\n    int wicket_odi;\r\n    struct Player* next;\r\n};\r\n\r\n\/\/function to take input new number of players in the list and modifying the list accordingly\r\nstruct Player* input(struct Player* r){\r\n    int k;\r\n    printf(\"Enter the new number of elements of the list: \");\r\n    scanf(\"%d\",&k);\r\n    int n = 0; \/\/n stores the number of elements in the original list\r\n    struct Player* p = r;\r\n    \/\/calculating n\r\n    while(p!=NULL){\r\n        n++;\r\n        p = p->next;\r\n    }\r\n\r\n    \/\/checking if elements need to be added or deleted\r\n    if(k>n){\r\n        \/\/if we need addition\r\n        printf(\"Enter the new elements:\\n\");\r\n        for(int i=0;i<k-n;i++){\r\n            \/\/new node\r\n            struct Player* node = (struct Player*) malloc(sizeof(struct Player));\r\n            printf(\"\\n\");\r\n            \/\/taking input new player details\r\n            printf(\"Enter the name of the player : \");\r\n            scanf(\"%s\", node->name);\r\n            printf(\"Enter the country of the player : \");\r\n            scanf(\"%s\", node->country);\r\n            printf(\"Enter the date of birth of the player : \");\r\n            scanf(\"%s\", node->dob);\r\n            printf(\"Enter the date of debut first class match of the player : \");\r\n            scanf(\"%s\", node->date_debut);\r\n            printf(\"Enter the number of tests played by the player : \");\r\n            scanf(\"%d\", &(node->n_tests));\r\n            printf(\"Enter the number of one day internationals (ODIs) played by the player : \");\r\n            scanf(\"%d\", &(node->n_odi));\r\n            printf(\"Enter the number of centuries scored by the player : \");\r\n            scanf(\"%d\", &(node->n_cent));\r\n            printf(\"Enter the number of half centuries scored the player : \");\r\n            scanf(\"%d\", &(node->n_half_cent));\r\n            printf(\"Enter the total runs scored in tests by the player : \");\r\n            scanf(\"%d\", &(node->tot_test));\r\n            printf(\"Enter the total runs made in ODIs by the player : \");\r\n            scanf(\"%d\", &(node->tot_odi));\r\n            printf(\"Enter the number of wickets taken in test cricket by the player : \");\r\n            scanf(\"%d\", &(node->wicket_test));\r\n            printf(\"Enter the number of wickets taken in ODIs by the player : \");\r\n            scanf(\"%d\", &(node->wicket_odi));\r\n            if(r==NULL){\r\n                \/\/if this node is the first node\r\n                r = node;\r\n                r->next = NULL;\r\n            }else{\r\n                p = r;\r\n                struct Player* prev;\r\n                while(p!=NULL){\r\n\r\n                    \/\/changing upperCase to lowerCase for comparison\r\n                    char name1[100];\r\n                    char name2[100];\r\n                    int i = 0;\r\n                    while(p->name[i]!='\\0'){\r\n                        if(p->name[i] >='A' && p->name[i]<='Z'){\r\n                            name1[i] = p->name[i]-'A'+'a';\r\n                        }else{\r\n                            name1[i] = p->name[i];\r\n                        }\r\n                        i++;\r\n                    }\r\n                    name1[i] = '\\0';\r\n                    i = 0;\r\n                    while(node->name[i]!='\\0'){\r\n                        if(node->name[i] >='A' && node->name[i]<='Z'){\r\n                            name2[i] = node->name[i]-'A'+'a';\r\n                        }else{\r\n                            name2[i] = node->name[i];\r\n                        }\r\n                        i++;\r\n                    }\r\n                    name2[i] = '\\0';\r\n                    if(strcmp(name1, name2)>0){\r\n                        break;\r\n                    }\r\n                    prev = p;\r\n                    p = p->next;\r\n                }\r\n                \/\/new node needs to added between prev and p\r\n                if(p==r){\r\n                    \/\/addition at start\r\n                    r = node;\r\n                    r->next = p;\r\n                }else if(p==NULL){\r\n                    \/\/addition at end\r\n                    prev->next = node;\r\n                    node->next = NULL;\r\n                }else{\r\n                    \/\/addition in between\r\n                    prev->next = node;\r\n                    node->next = p;\r\n                }\r\n            }\r\n        }\r\n    }else if(k<n){\r\n        \/\/deleting extra nodes at the end\r\n        int counter = 0;\r\n        struct Player* prev;\r\n        p = r;\r\n        while(counter!=k){\r\n            prev = p;\r\n            p = p->next;\r\n            counter++;\r\n        }\r\n        while(prev->next!=NULL){\r\n            prev->next = p->next;\r\n            free(p);\r\n            p = prev->next;\r\n        }\r\n        printf(\"Done deleting extra player records\\n\");\r\n    }else{\r\n        printf(\"The list already contains this many players\\n\");\r\n    }\r\n    return r;\r\n}\r\n\r\n\/\/this function counts required ODIs more than or equal to n\r\nint one_day_counter(int n, struct Player* node, int odi){\r\n    if(node!=NULL){\r\n        if(node->n_odi >= n){\r\n            return(one_day_counter(n, node->next, odi+1)); \/\/recursive call with odi+1\r\n        }\r\n        return(one_day_counter(n, node->next, odi));\r\n    }\r\n    return odi;\r\n}\r\n\r\n\/\/this function calls the previous one and just prints the value\r\nvoid one_day_printer(int n, struct Player* r){\r\n    struct Player* p = r;\r\n    printf(\"The number of players who have played atleast %d one day internationals are: %d\\n\", n, one_day_counter(n,p,0));\r\n}\r\n\r\n\/\/this function prints details of all players\r\nvoid printer(struct Player* r){\r\n    struct Player* p = r;\r\n    printf(\"The player informations are:\\n\\n\");\r\n    while(p!=NULL){\r\n        printf(\"The name of the player is: %s\\n\", p->name);\r\n        printf(\"The country of the player is: %s\\n\", p->country);\r\n        printf(\"The date of birth of the player is: %s\\n\", p->dob);\r\n        printf(\"The date of debut first class match of the player is: %s\\n\", p->date_debut);\r\n        printf(\"The number of tests played by the player is: %d\\n\", p->n_tests);\r\n        printf(\"The number of one day internationals (ODIs) played by the player is: %d\\n\", p->n_odi);\r\n        printf(\"The number of centuries scored by the player is: %d\\n\", p->n_cent);\r\n        printf(\"The number of half centuries scored the player is: %d\\n\", p->n_half_cent);\r\n        printf(\"The total runs scored in tests by the player is: %d\\n\", p->tot_test);\r\n        printf(\"The total runs made in ODIs by the player is: %d\\n\", p->tot_odi);\r\n        printf(\"The number of wickets taken in test cricket by the player is: %d\\n\", p->wicket_test);\r\n        printf(\"The number of wickets taken in ODIs by the player is: %d\\n\", p->wicket_odi);\r\n        printf(\"\\n\");\r\n        p = p->next;\r\n    }\r\n}\r\n\r\nint main(){\r\n    \/\/declaring head\r\n    struct Player* head = (struct Player*) malloc(sizeof(struct Player));\r\n    head = NULL;\r\n    \/\/driver code\r\n    while(1){\r\n        int choice;\r\n        printf(\"\\nDo you want to proceed? Press 1 for yes and 2 for no: \");\r\n        scanf(\"%d\",&choice);\r\n        if(choice == 1){\r\n            printf(\"Choose one of the following operations to perform :\\n\");\r\n            printf(\"1. To change the size of the list of players\\n\");\r\n            printf(\"2. To print the number of players who have played at least a certain number of ODIs\\n\");\r\n            printf(\"3. To print the list of all players present\\n\");\r\n            printf(\"Enter your choice: \");\r\n            int n;\r\n            scanf(\"%d\",&n);\r\n            switch(n) {\r\n                case 1: head = input(head);\r\n                break;\r\n\r\n                case 2: printf(\"Enter the minimum number of ODIs you want: \");\r\n                int num;\r\n                scanf(\"%d\",&num);\r\n                one_day_printer(num, head);\r\n                break;\r\n\r\n                case 3: printer(head);\r\n                break;\r\n\r\n                default: printf(\"Enter a correct choice!!\\n\");\r\n            }\r\n        }else if(choice == 2){\r\n            printf(\"Thank You!!\");\r\n            break;\r\n        }else{\r\n            printf(\"Please enter 1 or 2\\n\");\r\n        }\r\n    }\r\n    return 0;\r\n}"
                },
                {
                    "Question": "Write a program to create a linked list and sort the list. Define the structure of the node of your linked\r\nlist as follows.\r\n\r\n#DEFINE SIZE 50\r\ntypedef struct node{\r\nchar first_name[SIZE];\r\nchar last_name[SIZE];\r\nstruct node* next;\r\n} node;\r\ntypedef node *linkedlist;\r\n\r\n\r\nPart I: Write a function to initialize a linked list\r\n\r\nWrite a function to initialize a linked list. The prototype should be as follows which initializes the linked\r\nlist pointed by l.\r\n\r\nlinkedlist init();\r\n\r\n\r\nPart II: Write a function to display a linked list\r\n\r\nWrite a function to display a linked list. The prototype should be as follows which displays the linked list\r\nl.\r\n\r\nvoid display(linkedlist l);\r\n\r\n\r\nPart III: Write a function to insert in the middle of a linked list\r\n\r\nWrite a function to insert an elements in the linked list such that the newly inserted element is the middle\r\nelement if the linked list has an odd number of nodes, and the left middle element if the linked list has\r\nan even number of nodes. The prototype should be as follows which inserts an integer x at the front of\r\nthe linked list pointed by l.\r\n\r\nlinkedlist insert_middle(linkedlist l, char first[], char last[]);\r\n\r\n\r\nPart IV: Write a function to delete from the middle of a linked list\r\n\r\nWrite a function to delete an element from the middle of a linked list. Delete the middle element if the\r\nlinked list has an odd number of nodes, and the left middle element if the linked list has an even number\r\nof nodes.\r\n\r\nlinkedlist delete_middle(linkedlist l);\r\n\r\n\r\nPart V: Sort the linked list\r\n\r\nWrite a function which takes as input a linked list and an integer, say key, as input and sorts the linked\r\nlist in non-decreasing (lexicographic) order of first name if key is 0, in non-increasing (lexicographic)\r\norder of first name if key is 1, in non-decreasing (lexicographic) order of last name if key is 2, and in\r\nnon-increasing (lexicographic) order of last name if key is 3.\r\nUse the following sorting algorithm. If the last digit (from right) of your roll number, when divided\r\nby 3, gives remainder\r\n     a) 0, then use bubble sort.\r\n     b) 1, then use selection sort.\r\n\r\nThe prototype should be as follows which displays the linked list l.\r\n\r\nvoid sort(linkedlist* l, int key);\r\n\r\nSubmit one (single) C\/C++ program.\r\n\r\n\r\nSample Output\r\n\r\n1. insert at middle\r\n2. delete from middle\r\n3. sort in non-decreasing order or first name\r\n4. sort in non-increasing order or first name\r\n5. sort in non-decreasing order or last name\r\n6. sort in non-increasing order or last name\r\n7. exit\r\n1\r\nWrite element to be inserted: Sachin Tendulkar\r\nLinked list: (Sachin Tendulkar,)\r\n1\r\nWrite element to be inserted: Virat Kohli\r\nLinked list: (Virat Kohli,Sachin Tendulkar,)\r\n1\r\nWrite element to be inserted: Sourav Ganguly\r\nLinked list: (Virat Kohli,Sourav Ganguly,Sachin Tendulkar,)\r\n1\r\nWrite element to be inserted: MS Dhoni\r\nLinked list: (Virat Kohli,MS Dhoni,Sourav Ganguly,Sachin Tendulkar,)\r\n3\r\nLinked list: (MS Dhoni,Sachin Tendulkar,Sourav Ganguly,Virat Kohli,)\r\n4\r\nLinked list: (Virat Kohli,Sourav Ganguly,Sachin Tendulkar,MS Dhoni,)\r\n2\r\nLinked list: (Virat Kohli,Sachin Tendulkar,MS Dhoni,)\r\n2\r\nLinked list: (Virat Kohli,MS Dhoni,)\r\n7",
                    "Answer": "#include<stdio.h>\r\n#include<string.h>\r\n#include<stdlib.h>\r\n\r\n#define SIZE 50\r\n\r\n\/\/ structure definition as given in question\r\ntypedef struct node {\r\n    char first_name[SIZE];\r\n    char last_name[SIZE];\r\n    struct node *next;\r\n} node;\r\ntypedef node *linkedlist;\r\n\r\n\/\/ init() function initialises the linked list with a head node which is given the value NULL and returned\r\nlinkedlist init(){\r\n    linkedlist head = (linkedlist)malloc(sizeof(node));\r\n    head = NULL;\r\n    return head;\r\n}\r\n\r\n\/\/ display() function displays the linked list\r\nvoid display(linkedlist l){\r\n    linkedlist p = l;\r\n    printf(\"Linked List: (\");\r\n    while(p!=NULL){\r\n        printf(\"%s %s,\", p->first_name, p->last_name);\r\n        p = p->next;\r\n    }\r\n    printf(\")\\n\");\r\n}\r\n\r\n\/\/ insert_middle() function inserts a given element in the middle of the linked list as told in the question\r\nlinkedlist insert_middle(linkedlist l, char first[], char last[]){\r\n    \/\/ p is initialized to l and this p is later used extensively in the code\r\n    linkedlist p = l;\r\n    \/\/ middle node is created with the help of malloc()\r\n    linkedlist middle = (linkedlist)malloc(sizeof(node));\r\n    \/\/ middle node is initialized with the parameters obtained from the main\r\n    strcpy(middle->first_name, first);\r\n    strcpy(middle->last_name, last);\r\n    \/\/ condition when the linked list is empty\r\n    if(p==NULL){\r\n        middle->next = NULL;\r\n        return middle;\r\n    }\r\n    int size = 0;\r\n    \/\/ size of the linked list is determined so that the middle node can be inserted at the right place\r\n    while(p!=NULL){\r\n        size++;\r\n        p = p->next;\r\n    }\r\n    p = l;\r\n    \/\/ special case when size is one and then the middle node is inserted to the left of p and returned as head node\r\n    if(size==1){\r\n        middle->next = p;\r\n        return middle;\r\n    }\r\n    int reqd = 1;\r\n    \/\/ here the proper position is found where the middle node is to be inserted for both cases of even and odd size\r\n    if(size%2==1){\r\n        while(reqd!=(size-1)\/2){\r\n            reqd++;\r\n            p = p->next;\r\n        }\r\n        \/\/ links are made and broken\r\n        middle->next = p->next;\r\n        p->next = middle;\r\n    }else{\r\n        while(reqd!=(size)\/2){\r\n            reqd++;\r\n            p = p->next;\r\n        }\r\n        \/\/ links are made and broken\r\n        middle->next = p->next;\r\n        p->next = middle;\r\n    }\r\n    \/\/ head is returned\r\n    return l;\r\n}\r\n\r\n\/\/ delete_middle() function deletes the middle node of the linked list as told in the question\r\nlinkedlist delete_middle(linkedlist l){\r\n    \/\/ p is initialized to l and this p is later used extensively in the code\r\n    linkedlist p = l;\r\n    \/\/ prev keeps track of the node prior to l\r\n    linkedlist prev;\r\n    \/\/ when linked list is empty then we just return back the head\r\n    if(p==NULL){\r\n        return p;\r\n    }\r\n    int size = 0;\r\n    \/\/ size of the linked list is determined so that the middle node can be founed and deleted\r\n    while(p!=NULL){\r\n        size++;\r\n        p = p->next;\r\n    }\r\n    p = l;\r\n    \/\/ special case when size is one and then the only node present is deleted and NULL is returned indicating that the linked list is empty\r\n    if(size==1){\r\n        free(p);\r\n        return NULL;\r\n    }\r\n    \/\/ special case when size is two and so the left node is deleted and right node is made head and returned\r\n    if(size==2){\r\n        l = p->next;\r\n        free(p);\r\n        return l;\r\n    }\r\n    int reqd = 1;\r\n    \/\/ here the proper position is found from where the middle node is to be deleted for both cases of even and odd size\r\n    if(size%2==1){\r\n        while(reqd!=(size+1)\/2){\r\n            reqd++;\r\n            prev = p;\r\n            p = p->next;\r\n        }\r\n        \/\/ new links are made and middle node is deleted\r\n        prev->next = p->next;\r\n        free(p);\r\n    }else{\r\n        prev = p;\r\n        while(reqd!=(size)\/2){\r\n            reqd++;\r\n            prev = p;\r\n            p = p->next;\r\n        }\r\n        \/\/ new links are made and middle node is deleted\r\n        prev->next = p->next;\r\n        free(p);\r\n    }\r\n    return l;\r\n}\r\n\r\n\/\/ sort() functions sorts the linked list according to Bubble Sort as the last digit\r\n\/\/ of my roll number is 9 and so we get a remainder of 0 when divided by 3\r\nvoid sort(linkedlist* l, int key){\r\n    linkedlist* p = l;\r\n    \/\/head node is stored in head\r\n    linkedlist head = *(l);\r\n    int size = 0;\r\n    \/\/size of linked list is found which is to be used to determine the number of iterations in Bubble Sort\r\n    while(*p != NULL){\r\n        size++;\r\n        *p = (*p)->next;\r\n    }\r\n    \/\/ p stores the address of the head\r\n    (*p) = head;\r\n    \/\/ different logical snippets according to the value of key\r\n    \/\/ only the first snippet is commented as the rest are very much similar\r\n    \/\/ sort in non-decreasing order of first name\r\n    if(key==0){\r\n        \/\/ usual Bubble sort loops\r\n        for(int i=0; i<size-1; i++){\r\n            for(int j=0; j<size-i-1; j++){\r\n                \/\/changing the names from upperCase to lowerCase for comparison but the original names are only swapped\r\n                char name1[SIZE];\r\n                char name2[SIZE];\r\n                int k = 0;\r\n                while((*p)->first_name[k]!='\\0'){\r\n                    if((*p)->first_name[k] >='A' && (*p)->first_name[k]<='Z'){\r\n                        name1[k] = (*p)->first_name[k]-'A'+'a';\r\n                    }else{\r\n                        name1[k] = (*p)->first_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name1[k] = '\\0';\r\n                k = 0;\r\n                while((*p)->next->first_name[k]!='\\0'){\r\n                    if((*p)->next->first_name[k] >='A' && (*p)->next->first_name[k]<='Z'){\r\n                        name2[k] = (*p)->next->first_name[k]-'A'+'a';\r\n                    }else{\r\n                        name2[k] = (*p)->next->first_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name2[k] = '\\0';\r\n                \/\/ strcmp() is a string.h function which compares the two names\r\n                if(strcmp(name1, name2)>0){\r\n                    \/\/ first and last names are swapped\r\n                    \/\/ temp stores the names to be sorted temporarily\r\n                    char temp[SIZE];\r\n                    strcpy(temp, (*p)->first_name);\r\n                    strcpy((*p)->first_name, (*p)->next->first_name);\r\n                    strcpy((*p)->next->first_name, temp);\r\n\r\n                    strcpy(temp, (*p)->last_name);\r\n                    strcpy((*p)->last_name, (*p)->next->last_name);\r\n                    strcpy((*p)->next->last_name, temp);\r\n                }\r\n                \/\/ next node address is stored in p\r\n                *p = (*p)->next;\r\n            }\r\n            (*p) = head;\r\n        }\r\n    }\r\n    \/\/ sort in non-increasing order of first name\r\n    else if(key==1){\r\n        for(int i=0; i<size-1; i++){\r\n            for(int j=0; j<size-i-1; j++){\r\n                \/\/changing the names from upperCase to lowerCase for comparison but the original names are only swapped\r\n                char name1[SIZE];\r\n                char name2[SIZE];\r\n                int k = 0;\r\n                while((*p)->first_name[k]!='\\0'){\r\n                    if((*p)->first_name[k] >='A' && (*p)->first_name[k]<='Z'){\r\n                        name1[k] = (*p)->first_name[k]-'A'+'a';\r\n                    }else{\r\n                        name1[k] = (*p)->first_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name1[k] = '\\0';\r\n                k = 0;\r\n                while((*p)->next->first_name[k]!='\\0'){\r\n                    if((*p)->next->first_name[k] >='A' && (*p)->next->first_name[k]<='Z'){\r\n                        name2[k] = (*p)->next->first_name[k]-'A'+'a';\r\n                    }else{\r\n                        name2[k] = (*p)->next->first_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name2[k] = '\\0';\r\n                if(strcmp(name1, name2)<0){\r\n                    char temp[SIZE];\r\n                    strcpy(temp, (*p)->first_name);\r\n                    strcpy((*p)->first_name, (*p)->next->first_name);\r\n                    strcpy((*p)->next->first_name, temp);\r\n\r\n                    strcpy(temp, (*p)->last_name);\r\n                    strcpy((*p)->last_name, (*p)->next->last_name);\r\n                    strcpy((*p)->next->last_name, temp);\r\n                }\r\n                *p = (*p)->next;\r\n            }\r\n            (*p) = head;\r\n        }\r\n    }\r\n    \/\/ sort in non-decreasing order of last name\r\n    else if(key==2){\r\n        for(int i=0; i<size-1; i++){\r\n            for(int j=0; j<size-i-1; j++){\r\n                \/\/changing the names from upperCase to lowerCase for comparison but the original names are only swapped\r\n                char name1[SIZE];\r\n                char name2[SIZE];\r\n                int k = 0;\r\n                while((*p)->last_name[k]!='\\0'){\r\n                    if((*p)->last_name[k] >='A' && (*p)->last_name[k]<='Z'){\r\n                        name1[k] = (*p)->last_name[k]-'A'+'a';\r\n                    }else{\r\n                        name1[k] = (*p)->last_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name1[k] = '\\0';\r\n                k = 0;\r\n                while((*p)->next->last_name[k]!='\\0'){\r\n                    if((*p)->next->last_name[k] >='A' && (*p)->next->last_name[k]<='Z'){\r\n                        name2[k] = (*p)->next->last_name[k]-'A'+'a';\r\n                    }else{\r\n                        name2[k] = (*p)->next->last_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name2[k] = '\\0';\r\n                if(strcmp(name1, name2)>0){\r\n                    char temp[SIZE];\r\n                    strcpy(temp, (*p)->first_name);\r\n                    strcpy((*p)->first_name, (*p)->next->first_name);\r\n                    strcpy((*p)->next->first_name, temp);\r\n\r\n                    strcpy(temp, (*p)->last_name);\r\n                    strcpy((*p)->last_name, (*p)->next->last_name);\r\n                    strcpy((*p)->next->last_name, temp);\r\n                }\r\n                *p = (*p)->next;\r\n            }\r\n            (*p) = head;\r\n        }\r\n    }\r\n    \/\/ sort in non-increasing order of last name\r\n    else if(key==3){\r\n        for(int i=0; i<size-1; i++){\r\n            for(int j=0; j<size-i-1; j++){\r\n                \/\/changing the names from upperCase to lowerCase for comparison but the original names are only swapped\r\n                char name1[SIZE];\r\n                char name2[SIZE];\r\n                int k = 0;\r\n                while((*p)->last_name[k]!='\\0'){\r\n                    if((*p)->last_name[k] >='A' && (*p)->last_name[k]<='Z'){\r\n                        name1[k] = (*p)->last_name[k]-'A'+'a';\r\n                    }else{\r\n                        name1[k] = (*p)->last_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name1[k] = '\\0';\r\n                k = 0;\r\n                while((*p)->next->last_name[k]!='\\0'){\r\n                    if((*p)->next->last_name[k] >='A' && (*p)->next->last_name[k]<='Z'){\r\n                        name2[k] = (*p)->next->last_name[k]-'A'+'a';\r\n                    }else{\r\n                        name2[k] = (*p)->next->last_name[k];\r\n                    }\r\n                    k++;\r\n                }\r\n                name2[k] = '\\0';\r\n                if(strcmp(name1, name2)<0){\r\n                    char temp[SIZE];\r\n                    strcpy(temp, (*p)->first_name);\r\n                    strcpy((*p)->first_name, (*p)->next->first_name);\r\n                    strcpy((*p)->next->first_name, temp);\r\n\r\n                    strcpy(temp, (*p)->last_name);\r\n                    strcpy((*p)->last_name, (*p)->next->last_name);\r\n                    strcpy((*p)->next->last_name, temp);\r\n                }\r\n                *p = (*p)->next;\r\n            }\r\n            (*p) = head;\r\n        }\r\n    }\r\n}\r\n\r\nint main(){\r\n    \/\/ head of the linked list is declared\r\n    linkedlist head;\r\n    \/\/ head of the lineked list is initialized\r\n    head = init();\r\n    \/\/ exit controls the while loop\r\n    int exit = 0;\r\n    printf(\"Choose one of the following operations: \\n\");\r\n    printf(\"1. insert at middle\\n\");\r\n    printf(\"2. delete from middle\\n\");\r\n    printf(\"3. sort in non-decreasing order of first name\\n\");\r\n    printf(\"4. sort in non-increasing order of first name\\n\");\r\n    printf(\"5. sort in non-decreasing order of last name\\n\");\r\n    printf(\"6. sort in non-increasing order of last name\\n\");\r\n    printf(\"7. exit\\n\");\r\n    while(!exit){\r\n        printf(\"Enter your choice: \");\r\n        \/\/ choice is the switch variable entered by the user\r\n        int choice;\r\n        scanf(\"%d\",&choice);\r\n        switch(choice) {\r\n\r\n            case 1: printf(\"Write an element to be inserted: \");\r\n            \/\/ first and last names of the new node is taken as input\r\n            char first[SIZE], last[SIZE];\r\n            scanf(\"%s %s\", first, last);\r\n            head = insert_middle(head, first, last);\r\n            display(head);\r\n            break;\r\n\r\n            case 2: head = delete_middle(head);\r\n            display(head);\r\n            break;\r\n\r\n            case 3: sort(&(head), 0);\r\n            display(head);\r\n            break;\r\n\r\n            case 4: sort(&(head), 1);\r\n            display(head);\r\n            break;\r\n\r\n            case 5: sort(&(head), 2);\r\n            display(head);\r\n            break;\r\n\r\n            case 6: sort(&(head), 3);\r\n            display(head);\r\n            break;\r\n\r\n            case 7: exit = 1;\r\n            break;\r\n\r\n            default: printf(\"Invalid choice!!\\n\");\r\n        }\r\n    }\r\n    return 0;\r\n}"
                }
            ]
        }
    ]
}